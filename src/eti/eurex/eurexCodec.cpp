/*
 * Copyright 2014-2018 Neueda
 */
#include "eurexCodec.h"
#include "eurexPackets.h"
#include "EtiPacketUtils.h"

namespace neueda
{

extern "C" codec*
getCodec ()
{
    return new eurexCodec ();
}

static void
getInstrmtLegGrpComp (cdr &d, const eurexInstrmtLegGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::getLegSecurityID, &eurexInstrmtLegGrpCompPacket::isLegSecurityIDValid> (d, LegSecurityID, packet);
    eti::setDouble<eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::getLegPrice, &eurexInstrmtLegGrpCompPacket::isLegPriceValid> (d, LegPrice, packet);
    eti::setInteger<int32_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::getLegSymbol, &eurexInstrmtLegGrpCompPacket::isLegSymbolValid> (d, LegSymbol, packet);
    eti::setInteger<int32_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::getLegRatioQty, &eurexInstrmtLegGrpCompPacket::isLegRatioQtyValid> (d, LegRatioQty, packet);
    eti::setInteger<int8_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::getLegSide, &eurexInstrmtLegGrpCompPacket::isLegSideValid> (d, LegSide, packet);
    eti::setInteger<int8_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::getLegSecurityType, &eurexInstrmtLegGrpCompPacket::isLegSecurityTypeValid> (d, LegSecurityType, packet);
    eti::setString<eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::getPad6, &eurexInstrmtLegGrpCompPacket::isPad6Valid> (d, Pad6, packet);
}

static void
getResponseHeaderComp (cdr &d, const eurexResponseHeaderCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::getRequestTime, &eurexResponseHeaderCompPacket::isRequestTimeValid> (d, RequestTime, packet);
    eti::setInteger<uint64_t, eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::getSendingTime, &eurexResponseHeaderCompPacket::isSendingTimeValid> (d, SendingTime, packet);
    eti::setInteger<uint32_t, eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::getMsgSeqNum, &eurexResponseHeaderCompPacket::isMsgSeqNumValid> (d, MsgSeqNum, packet);
    eti::setString<eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::getPad4, &eurexResponseHeaderCompPacket::isPad4Valid> (d, Pad4, packet);
}

static void
getOrderBookItemGrpComp (cdr &d, const eurexOrderBookItemGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getSecurityID, &eurexOrderBookItemGrpCompPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getBestBidPx, &eurexOrderBookItemGrpCompPacket::isBestBidPxValid> (d, BestBidPx, packet);
    eti::setDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getBestBidSize, &eurexOrderBookItemGrpCompPacket::isBestBidSizeValid> (d, BestBidSize, packet);
    eti::setDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getBestOfferPx, &eurexOrderBookItemGrpCompPacket::isBestOfferPxValid> (d, BestOfferPx, packet);
    eti::setDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getBestOfferSize, &eurexOrderBookItemGrpCompPacket::isBestOfferSizeValid> (d, BestOfferSize, packet);
    eti::setInteger<int8_t, eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getMDBookType, &eurexOrderBookItemGrpCompPacket::isMDBookTypeValid> (d, MDBookType, packet);
    eti::setInteger<int8_t, eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getMDSubBookType, &eurexOrderBookItemGrpCompPacket::isMDSubBookTypeValid> (d, MDSubBookType, packet);
    eti::setString<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::getPad6, &eurexOrderBookItemGrpCompPacket::isPad6Valid> (d, Pad6, packet);
}

static void
getQuotReqLegsGrpComp (cdr &d, const eurexQuotReqLegsGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::getLegSecurityID, &eurexQuotReqLegsGrpCompPacket::isLegSecurityIDValid> (d, LegSecurityID, packet);
    eti::setInteger<int32_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::getLegRatioQty, &eurexQuotReqLegsGrpCompPacket::isLegRatioQtyValid> (d, LegRatioQty, packet);
    eti::setInteger<int32_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::getLegSymbol, &eurexQuotReqLegsGrpCompPacket::isLegSymbolValid> (d, LegSymbol, packet);
    eti::setInteger<int8_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::getLegSecurityType, &eurexQuotReqLegsGrpCompPacket::isLegSecurityTypeValid> (d, LegSecurityType, packet);
    eti::setInteger<int8_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::getLegSide, &eurexQuotReqLegsGrpCompPacket::isLegSideValid> (d, LegSide, packet);
    eti::setString<eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::getPad6, &eurexQuotReqLegsGrpCompPacket::isPad6Valid> (d, Pad6, packet);
}

static void
getRiskLimitQtyGrpComp (cdr &d, const eurexRiskLimitQtyGrpCompPacket& packet)
{
    eti::setDouble<eurexRiskLimitQtyGrpCompPacket, &eurexRiskLimitQtyGrpCompPacket::getRiskLimitQty, &eurexRiskLimitQtyGrpCompPacket::isRiskLimitQtyValid> (d, RiskLimitQty, packet);
    eti::setInteger<int8_t, eurexRiskLimitQtyGrpCompPacket, &eurexRiskLimitQtyGrpCompPacket::getRiskLimitType, &eurexRiskLimitQtyGrpCompPacket::isRiskLimitTypeValid> (d, RiskLimitType, packet);
    eti::setString<eurexRiskLimitQtyGrpCompPacket, &eurexRiskLimitQtyGrpCompPacket::getPad7, &eurexRiskLimitQtyGrpCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getEnrichmentRulesGrpComp (cdr &d, const eurexEnrichmentRulesGrpCompPacket& packet)
{
    eti::setInteger<int16_t, eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getEnrichmentRuleID, &eurexEnrichmentRulesGrpCompPacket::isEnrichmentRuleIDValid> (d, EnrichmentRuleID, packet);
    eti::setInteger<int8_t, eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getPartyIDOriginationMarket, &eurexEnrichmentRulesGrpCompPacket::isPartyIDOriginationMarketValid> (d, PartyIDOriginationMarket, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getAccount, &eurexEnrichmentRulesGrpCompPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getPositionEffect, &eurexEnrichmentRulesGrpCompPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getPartyIDTakeUpTradingFirm, &eurexEnrichmentRulesGrpCompPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getPartyIDOrderOriginationFirm, &eurexEnrichmentRulesGrpCompPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getPartyIDBeneficiary, &eurexEnrichmentRulesGrpCompPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getFreeText1, &eurexEnrichmentRulesGrpCompPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getFreeText2, &eurexEnrichmentRulesGrpCompPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getFreeText3, &eurexEnrichmentRulesGrpCompPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::getPad1, &eurexEnrichmentRulesGrpCompPacket::isPad1Valid> (d, Pad1, packet);
}

static void
getInstrmntLegExecGrpComp (cdr &d, const eurexInstrmntLegExecGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::getLegSecurityID, &eurexInstrmntLegExecGrpCompPacket::isLegSecurityIDValid> (d, LegSecurityID, packet);
    eti::setDouble<eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::getLegLastPx, &eurexInstrmntLegExecGrpCompPacket::isLegLastPxValid> (d, LegLastPx, packet);
    eti::setDouble<eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::getLegLastQty, &eurexInstrmntLegExecGrpCompPacket::isLegLastQtyValid> (d, LegLastQty, packet);
    eti::setInteger<int32_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::getLegExecID, &eurexInstrmntLegExecGrpCompPacket::isLegExecIDValid> (d, LegExecID, packet);
    eti::setInteger<int8_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::getLegSide, &eurexInstrmntLegExecGrpCompPacket::isLegSideValid> (d, LegSide, packet);
    eti::setInteger<int8_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::getFillRefID, &eurexInstrmntLegExecGrpCompPacket::isFillRefIDValid> (d, FillRefID, packet);
    eti::setString<eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::getPad2, &eurexInstrmntLegExecGrpCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getMMParameterGrpComp (cdr &d, const eurexMMParameterGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::getExposureDuration, &eurexMMParameterGrpCompPacket::isExposureDurationValid> (d, ExposureDuration, packet);
    eti::setDouble<eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::getCumQty, &eurexMMParameterGrpCompPacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::getDelta, &eurexMMParameterGrpCompPacket::isDeltaValid> (d, Delta, packet);
    eti::setDouble<eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::getVega, &eurexMMParameterGrpCompPacket::isVegaValid> (d, Vega, packet);
    eti::setInteger<int32_t, eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::getPctCount, &eurexMMParameterGrpCompPacket::isPctCountValid> (d, PctCount, packet);
    eti::setInteger<uint32_t, eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::getTargetPartyIDSessionID, &eurexMMParameterGrpCompPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
}

static void
getRBCHeaderMEComp (cdr &d, const eurexRBCHeaderMECompPacket& packet)
{
    eti::setInteger<uint64_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getTrdRegTSTimeOut, &eurexRBCHeaderMECompPacket::isTrdRegTSTimeOutValid> (d, TrdRegTSTimeOut, packet);
    eti::setInteger<uint64_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getNotificationIn, &eurexRBCHeaderMECompPacket::isNotificationInValid> (d, NotificationIn, packet);
    eti::setInteger<uint64_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getSendingTime, &eurexRBCHeaderMECompPacket::isSendingTimeValid> (d, SendingTime, packet);
    eti::setInteger<uint32_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getApplSubID, &eurexRBCHeaderMECompPacket::isApplSubIDValid> (d, ApplSubID, packet);
    eti::setInteger<uint16_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getPartitionID, &eurexRBCHeaderMECompPacket::isPartitionIDValid> (d, PartitionID, packet);
    eti::setString<eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getApplMsgID, &eurexRBCHeaderMECompPacket::isApplMsgIDValid> (d, ApplMsgID, packet);
    eti::setInteger<int8_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getApplID, &eurexRBCHeaderMECompPacket::isApplIDValid> (d, ApplID, packet);
    eti::setInteger<int8_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getApplResendFlag, &eurexRBCHeaderMECompPacket::isApplResendFlagValid> (d, ApplResendFlag, packet);
    eti::setInteger<int8_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getLastFragment, &eurexRBCHeaderMECompPacket::isLastFragmentValid> (d, LastFragment, packet);
    eti::setString<eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::getPad7, &eurexRBCHeaderMECompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getNotifHeaderComp (cdr &d, const eurexNotifHeaderCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexNotifHeaderCompPacket, &eurexNotifHeaderCompPacket::getSendingTime, &eurexNotifHeaderCompPacket::isSendingTimeValid> (d, SendingTime, packet);
}

static void
getBasketSideAllocGrpComp (cdr &d, const eurexBasketSideAllocGrpCompPacket& packet)
{
    eti::setDouble<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getAllocQty, &eurexBasketSideAllocGrpCompPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<uint32_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getIndividualAllocID, &eurexBasketSideAllocGrpCompPacket::isIndividualAllocIDValid> (d, IndividualAllocID, packet);
    eti::setInteger<int16_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getPartySubIDType, &eurexBasketSideAllocGrpCompPacket::isPartySubIDTypeValid> (d, PartySubIDType, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getSide, &eurexBasketSideAllocGrpCompPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getInstrmtMatchSideID, &eurexBasketSideAllocGrpCompPacket::isInstrmtMatchSideIDValid> (d, InstrmtMatchSideID, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getTradeAllocStatus, &eurexBasketSideAllocGrpCompPacket::isTradeAllocStatusValid> (d, TradeAllocStatus, packet);
    eti::setString<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getPartyExecutingFirm, &eurexBasketSideAllocGrpCompPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getPartyExecutingTrader, &eurexBasketSideAllocGrpCompPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::getPad4, &eurexBasketSideAllocGrpCompPacket::isPad4Valid> (d, Pad4, packet);
}

static void
getTrdInstrmntLegGrpComp (cdr &d, const eurexTrdInstrmntLegGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexTrdInstrmntLegGrpCompPacket, &eurexTrdInstrmntLegGrpCompPacket::getLegSecurityID, &eurexTrdInstrmntLegGrpCompPacket::isLegSecurityIDValid> (d, LegSecurityID, packet);
    eti::setDouble<eurexTrdInstrmntLegGrpCompPacket, &eurexTrdInstrmntLegGrpCompPacket::getLegPrice, &eurexTrdInstrmntLegGrpCompPacket::isLegPriceValid> (d, LegPrice, packet);
}

static void
getMessageHeaderInComp (cdr &d, const eurexMessageHeaderInCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::getBodyLen, &eurexMessageHeaderInCompPacket::isBodyLenValid> (d, BodyLen, packet);
    eti::setInteger<uint16_t, eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::getTemplateID, &eurexMessageHeaderInCompPacket::isTemplateIDValid> (d, TemplateID, packet);
    eti::setString<eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::getNetworkMsgID, &eurexMessageHeaderInCompPacket::isNetworkMsgIDValid> (d, NetworkMsgID, packet);
    eti::setString<eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::getPad2, &eurexMessageHeaderInCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getRequestHeaderComp (cdr &d, const eurexRequestHeaderCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexRequestHeaderCompPacket, &eurexRequestHeaderCompPacket::getMsgSeqNum, &eurexRequestHeaderCompPacket::isMsgSeqNumValid> (d, MsgSeqNum, packet);
    eti::setInteger<int32_t, eurexRequestHeaderCompPacket, &eurexRequestHeaderCompPacket::getSenderSubID, &eurexRequestHeaderCompPacket::isSenderSubIDValid> (d, SenderSubID, packet);
}

static void
getSideCrossLegGrpComp (cdr &d, const eurexSideCrossLegGrpCompPacket& packet)
{
    eti::setInteger<int8_t, eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::getLegInputSource, &eurexSideCrossLegGrpCompPacket::isLegInputSourceValid> (d, LegInputSource, packet);
    eti::setString<eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::getLegPositionEffect, &eurexSideCrossLegGrpCompPacket::isLegPositionEffectValid> (d, LegPositionEffect, packet);
    eti::setString<eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::getLegAccount, &eurexSideCrossLegGrpCompPacket::isLegAccountValid> (d, LegAccount, packet);
    eti::setString<eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::getPad4, &eurexSideCrossLegGrpCompPacket::isPad4Valid> (d, Pad4, packet);
}

static void
getTargetPartiesComp (cdr &d, const eurexTargetPartiesCompPacket& packet)
{
    eti::setInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getSideDisclosureInstruction, &eurexTargetPartiesCompPacket::isSideDisclosureInstructionValid> (d, SideDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getPriceDisclosureInstruction, &eurexTargetPartiesCompPacket::isPriceDisclosureInstructionValid> (d, PriceDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getLeavesQtyDisclosureInstruction, &eurexTargetPartiesCompPacket::isLeavesQtyDisclosureInstructionValid> (d, LeavesQtyDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getLastPxDisclosureInstruction, &eurexTargetPartiesCompPacket::isLastPxDisclosureInstructionValid> (d, LastPxDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getLastQtyDisclosureInstruction, &eurexTargetPartiesCompPacket::isLastQtyDisclosureInstructionValid> (d, LastQtyDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getFreeText5DisclosureInstruction, &eurexTargetPartiesCompPacket::isFreeText5DisclosureInstructionValid> (d, FreeText5DisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getQuoteInstruction, &eurexTargetPartiesCompPacket::isQuoteInstructionValid> (d, QuoteInstruction, packet);
    eti::setString<eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getTargetPartyExecutingFirm, &eurexTargetPartiesCompPacket::isTargetPartyExecutingFirmValid> (d, TargetPartyExecutingFirm, packet);
    eti::setString<eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getTargetPartyExecutingTrader, &eurexTargetPartiesCompPacket::isTargetPartyExecutingTraderValid> (d, TargetPartyExecutingTrader, packet);
    eti::setString<eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::getPad6, &eurexTargetPartiesCompPacket::isPad6Valid> (d, Pad6, packet);
}

static void
getNotAffectedSecuritiesGrpComp (cdr &d, const eurexNotAffectedSecuritiesGrpCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexNotAffectedSecuritiesGrpCompPacket, &eurexNotAffectedSecuritiesGrpCompPacket::getNotAffectedSecurityID, &eurexNotAffectedSecuritiesGrpCompPacket::isNotAffectedSecurityIDValid> (d, NotAffectedSecurityID, packet);
}

static void
getSideAllocExtGrpComp (cdr &d, const eurexSideAllocExtGrpCompPacket& packet)
{
    eti::setDouble<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getAllocQty, &eurexSideAllocExtGrpCompPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<uint64_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIDClientID, &eurexSideAllocExtGrpCompPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIdInvestmentDecisionMaker, &eurexSideAllocExtGrpCompPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getExecutingTrader, &eurexSideAllocExtGrpCompPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getIndividualAllocID, &eurexSideAllocExtGrpCompPacket::isIndividualAllocIDValid> (d, IndividualAllocID, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyExecutingFirm, &eurexSideAllocExtGrpCompPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyExecutingTrader, &eurexSideAllocExtGrpCompPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getSide, &eurexSideAllocExtGrpCompPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getTradeAllocStatus, &eurexSideAllocExtGrpCompPacket::isTradeAllocStatusValid> (d, TradeAllocStatus, packet);
    eti::setInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getTradingCapacity, &eurexSideAllocExtGrpCompPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPositionEffect, &eurexSideAllocExtGrpCompPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getOrderAttributeLiquidityProvision, &eurexSideAllocExtGrpCompPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getExecutingTraderQualifier, &eurexSideAllocExtGrpCompPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexSideAllocExtGrpCompPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getOrderAttributeRiskReduction, &eurexSideAllocExtGrpCompPacket::isOrderAttributeRiskReductionValid> (d, OrderAttributeRiskReduction, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getAccount, &eurexSideAllocExtGrpCompPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIDPositionAccount, &eurexSideAllocExtGrpCompPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIDTakeUpTradingFirm, &eurexSideAllocExtGrpCompPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getFreeText1, &eurexSideAllocExtGrpCompPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getFreeText2, &eurexSideAllocExtGrpCompPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getFreeText3, &eurexSideAllocExtGrpCompPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIDOrderOriginationFirm, &eurexSideAllocExtGrpCompPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIDBeneficiary, &eurexSideAllocExtGrpCompPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPartyIDLocationID, &eurexSideAllocExtGrpCompPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getCustOrderHandlingInst, &eurexSideAllocExtGrpCompPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getComplianceText, &eurexSideAllocExtGrpCompPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::getPad7, &eurexSideAllocExtGrpCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getPartyDetailsGrpComp (cdr &d, const eurexPartyDetailsGrpCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::getPartyDetailIDExecutingTrader, &eurexPartyDetailsGrpCompPacket::isPartyDetailIDExecutingTraderValid> (d, PartyDetailIDExecutingTrader, packet);
    eti::setString<eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::getPartyDetailExecutingTrader, &eurexPartyDetailsGrpCompPacket::isPartyDetailExecutingTraderValid> (d, PartyDetailExecutingTrader, packet);
    eti::setInteger<int8_t, eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::getPartyDetailRoleQualifier, &eurexPartyDetailsGrpCompPacket::isPartyDetailRoleQualifierValid> (d, PartyDetailRoleQualifier, packet);
    eti::setInteger<int8_t, eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::getPartyDetailStatus, &eurexPartyDetailsGrpCompPacket::isPartyDetailStatusValid> (d, PartyDetailStatus, packet);
    eti::setString<eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::getPartyDetailDeskID, &eurexPartyDetailsGrpCompPacket::isPartyDetailDeskIDValid> (d, PartyDetailDeskID, packet);
    eti::setString<eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::getPad1, &eurexPartyDetailsGrpCompPacket::isPad1Valid> (d, Pad1, packet);
}

static void
getLegOrdGrpComp (cdr &d, const eurexLegOrdGrpCompPacket& packet)
{
    eti::setString<eurexLegOrdGrpCompPacket, &eurexLegOrdGrpCompPacket::getLegAccount, &eurexLegOrdGrpCompPacket::isLegAccountValid> (d, LegAccount, packet);
    eti::setString<eurexLegOrdGrpCompPacket, &eurexLegOrdGrpCompPacket::getLegPositionEffect, &eurexLegOrdGrpCompPacket::isLegPositionEffectValid> (d, LegPositionEffect, packet);
    eti::setString<eurexLegOrdGrpCompPacket, &eurexLegOrdGrpCompPacket::getPad5, &eurexLegOrdGrpCompPacket::isPad5Valid> (d, Pad5, packet);
}

static void
getNRResponseHeaderMEComp (cdr &d, const eurexNRResponseHeaderMECompPacket& packet)
{
    eti::setInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getRequestTime, &eurexNRResponseHeaderMECompPacket::isRequestTimeValid> (d, RequestTime, packet);
    eti::setInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getTrdRegTSTimeIn, &eurexNRResponseHeaderMECompPacket::isTrdRegTSTimeInValid> (d, TrdRegTSTimeIn, packet);
    eti::setInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getTrdRegTSTimeOut, &eurexNRResponseHeaderMECompPacket::isTrdRegTSTimeOutValid> (d, TrdRegTSTimeOut, packet);
    eti::setInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getResponseIn, &eurexNRResponseHeaderMECompPacket::isResponseInValid> (d, ResponseIn, packet);
    eti::setInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getSendingTime, &eurexNRResponseHeaderMECompPacket::isSendingTimeValid> (d, SendingTime, packet);
    eti::setInteger<uint32_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getMsgSeqNum, &eurexNRResponseHeaderMECompPacket::isMsgSeqNumValid> (d, MsgSeqNum, packet);
    eti::setInteger<int8_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getLastFragment, &eurexNRResponseHeaderMECompPacket::isLastFragmentValid> (d, LastFragment, packet);
    eti::setString<eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::getPad3, &eurexNRResponseHeaderMECompPacket::isPad3Valid> (d, Pad3, packet);
}

static void
getNotAffectedOrdersGrpComp (cdr &d, const eurexNotAffectedOrdersGrpCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexNotAffectedOrdersGrpCompPacket, &eurexNotAffectedOrdersGrpCompPacket::getNotAffectedOrderID, &eurexNotAffectedOrdersGrpCompPacket::isNotAffectedOrderIDValid> (d, NotAffectedOrderID, packet);
    eti::setInteger<uint64_t, eurexNotAffectedOrdersGrpCompPacket, &eurexNotAffectedOrdersGrpCompPacket::getNotAffOrigClOrdID, &eurexNotAffectedOrdersGrpCompPacket::isNotAffOrigClOrdIDValid> (d, NotAffOrigClOrdID, packet);
}

static void
getAffectedOrderRequestsGrpComp (cdr &d, const eurexAffectedOrderRequestsGrpCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexAffectedOrderRequestsGrpCompPacket, &eurexAffectedOrderRequestsGrpCompPacket::getAffectedOrderRequestID, &eurexAffectedOrderRequestsGrpCompPacket::isAffectedOrderRequestIDValid> (d, AffectedOrderRequestID, packet);
    eti::setString<eurexAffectedOrderRequestsGrpCompPacket, &eurexAffectedOrderRequestsGrpCompPacket::getPad4, &eurexAffectedOrderRequestsGrpCompPacket::isPad4Valid> (d, Pad4, packet);
}

static void
getQuoteLegExecGrpComp (cdr &d, const eurexQuoteLegExecGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::getLegSecurityID, &eurexQuoteLegExecGrpCompPacket::isLegSecurityIDValid> (d, LegSecurityID, packet);
    eti::setDouble<eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::getLegLastPx, &eurexQuoteLegExecGrpCompPacket::isLegLastPxValid> (d, LegLastPx, packet);
    eti::setDouble<eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::getLegLastQty, &eurexQuoteLegExecGrpCompPacket::isLegLastQtyValid> (d, LegLastQty, packet);
    eti::setInteger<int32_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::getLegExecID, &eurexQuoteLegExecGrpCompPacket::isLegExecIDValid> (d, LegExecID, packet);
    eti::setInteger<int8_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::getLegSide, &eurexQuoteLegExecGrpCompPacket::isLegSideValid> (d, LegSide, packet);
    eti::setInteger<int8_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::getNoQuoteEventsIndex, &eurexQuoteLegExecGrpCompPacket::isNoQuoteEventsIndexValid> (d, NoQuoteEventsIndex, packet);
    eti::setString<eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::getPad2, &eurexQuoteLegExecGrpCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getNRBCHeaderComp (cdr &d, const eurexNRBCHeaderCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::getSendingTime, &eurexNRBCHeaderCompPacket::isSendingTimeValid> (d, SendingTime, packet);
    eti::setInteger<uint32_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::getApplSubID, &eurexNRBCHeaderCompPacket::isApplSubIDValid> (d, ApplSubID, packet);
    eti::setInteger<int8_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::getApplID, &eurexNRBCHeaderCompPacket::isApplIDValid> (d, ApplID, packet);
    eti::setInteger<int8_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::getLastFragment, &eurexNRBCHeaderCompPacket::isLastFragmentValid> (d, LastFragment, packet);
    eti::setString<eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::getPad2, &eurexNRBCHeaderCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getSessionsGrpComp (cdr &d, const eurexSessionsGrpCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::getPartyIDSessionID, &eurexSessionsGrpCompPacket::isPartyIDSessionIDValid> (d, PartyIDSessionID, packet);
    eti::setInteger<int8_t, eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::getSessionMode, &eurexSessionsGrpCompPacket::isSessionModeValid> (d, SessionMode, packet);
    eti::setInteger<int8_t, eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::getSessionSubMode, &eurexSessionsGrpCompPacket::isSessionSubModeValid> (d, SessionSubMode, packet);
    eti::setString<eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::getPad2, &eurexSessionsGrpCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getInstrumentAttributeGrpComp (cdr &d, const eurexInstrumentAttributeGrpCompPacket& packet)
{
    eti::setInteger<int8_t, eurexInstrumentAttributeGrpCompPacket, &eurexInstrumentAttributeGrpCompPacket::getInstrAttribType, &eurexInstrumentAttributeGrpCompPacket::isInstrAttribTypeValid> (d, InstrAttribType, packet);
    eti::setString<eurexInstrumentAttributeGrpCompPacket, &eurexInstrumentAttributeGrpCompPacket::getInstrAttribValue, &eurexInstrumentAttributeGrpCompPacket::isInstrAttribValueValid> (d, InstrAttribValue, packet);
    eti::setString<eurexInstrumentAttributeGrpCompPacket, &eurexInstrumentAttributeGrpCompPacket::getPad7, &eurexInstrumentAttributeGrpCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getBasketRootPartyGrpComp (cdr &d, const eurexBasketRootPartyGrpCompPacket& packet)
{
    eti::setInteger<int16_t, eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::getRootPartySubIDType, &eurexBasketRootPartyGrpCompPacket::isRootPartySubIDTypeValid> (d, RootPartySubIDType, packet);
    eti::setString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::getRootPartyContraFirm, &eurexBasketRootPartyGrpCompPacket::isRootPartyContraFirmValid> (d, RootPartyContraFirm, packet);
    eti::setString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::getRootPartyContraTrader, &eurexBasketRootPartyGrpCompPacket::isRootPartyContraTraderValid> (d, RootPartyContraTrader, packet);
    eti::setString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::getBasketSideTradeReportID, &eurexBasketRootPartyGrpCompPacket::isBasketSideTradeReportIDValid> (d, BasketSideTradeReportID, packet);
    eti::setString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::getPad7, &eurexBasketRootPartyGrpCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getBasketSideAllocExtBCGrpComp (cdr &d, const eurexBasketSideAllocExtBCGrpCompPacket& packet)
{
    eti::setDouble<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getAllocQty, &eurexBasketSideAllocExtBCGrpCompPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<int64_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getSecurityID, &eurexBasketSideAllocExtBCGrpCompPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getLastPx, &eurexBasketSideAllocExtBCGrpCompPacket::isLastPxValid> (d, LastPx, packet);
    eti::setInteger<uint64_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getTransBkdTime, &eurexBasketSideAllocExtBCGrpCompPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setDouble<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getRelatedClosePrice, &eurexBasketSideAllocExtBCGrpCompPacket::isRelatedClosePriceValid> (d, RelatedClosePrice, packet);
    eti::setInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPackageID, &eurexBasketSideAllocExtBCGrpCompPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<int32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getSideMarketSegmentID, &eurexBasketSideAllocExtBCGrpCompPacket::isSideMarketSegmentIDValid> (d, SideMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getAllocID, &eurexBasketSideAllocExtBCGrpCompPacket::isAllocIDValid> (d, AllocID, packet);
    eti::setInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getNegotiationID, &eurexBasketSideAllocExtBCGrpCompPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getSRQSRelatedTradeID, &eurexBasketSideAllocExtBCGrpCompPacket::isSRQSRelatedTradeIDValid> (d, SRQSRelatedTradeID, packet);
    eti::setInteger<int16_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getSideTrdSubTyp, &eurexBasketSideAllocExtBCGrpCompPacket::isSideTrdSubTypValid> (d, SideTrdSubTyp, packet);
    eti::setInteger<int16_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartySubIDType, &eurexBasketSideAllocExtBCGrpCompPacket::isPartySubIDTypeValid> (d, PartySubIDType, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getSide, &eurexBasketSideAllocExtBCGrpCompPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPositionEffect, &eurexBasketSideAllocExtBCGrpCompPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getEffectOnBasket, &eurexBasketSideAllocExtBCGrpCompPacket::isEffectOnBasketValid> (d, EffectOnBasket, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getTradingCapacity, &eurexBasketSideAllocExtBCGrpCompPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getTradeAllocStatus, &eurexBasketSideAllocExtBCGrpCompPacket::isTradeAllocStatusValid> (d, TradeAllocStatus, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getProductComplex, &eurexBasketSideAllocExtBCGrpCompPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getTradePublishIndicator, &eurexBasketSideAllocExtBCGrpCompPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartyExecutingFirm, &eurexBasketSideAllocExtBCGrpCompPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartyExecutingTrader, &eurexBasketSideAllocExtBCGrpCompPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getAccount, &eurexBasketSideAllocExtBCGrpCompPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getFreeText1, &eurexBasketSideAllocExtBCGrpCompPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getFreeText2, &eurexBasketSideAllocExtBCGrpCompPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getFreeText3, &eurexBasketSideAllocExtBCGrpCompPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartyIDTakeUpTradingFirm, &eurexBasketSideAllocExtBCGrpCompPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartyIDOrderOriginationFirm, &eurexBasketSideAllocExtBCGrpCompPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartyIDBeneficiary, &eurexBasketSideAllocExtBCGrpCompPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartyIDPositionAccount, &eurexBasketSideAllocExtBCGrpCompPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPartyIDLocationID, &eurexBasketSideAllocExtBCGrpCompPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getCustOrderHandlingInst, &eurexBasketSideAllocExtBCGrpCompPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getComplianceText, &eurexBasketSideAllocExtBCGrpCompPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::getPad4, &eurexBasketSideAllocExtBCGrpCompPacket::isPad4Valid> (d, Pad4, packet);
}

static void
getRBCHeaderComp (cdr &d, const eurexRBCHeaderCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getSendingTime, &eurexRBCHeaderCompPacket::isSendingTimeValid> (d, SendingTime, packet);
    eti::setInteger<uint64_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getApplSeqNum, &eurexRBCHeaderCompPacket::isApplSeqNumValid> (d, ApplSeqNum, packet);
    eti::setInteger<uint32_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getApplSubID, &eurexRBCHeaderCompPacket::isApplSubIDValid> (d, ApplSubID, packet);
    eti::setInteger<uint16_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getPartitionID, &eurexRBCHeaderCompPacket::isPartitionIDValid> (d, PartitionID, packet);
    eti::setInteger<int8_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getApplResendFlag, &eurexRBCHeaderCompPacket::isApplResendFlagValid> (d, ApplResendFlag, packet);
    eti::setInteger<int8_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getApplID, &eurexRBCHeaderCompPacket::isApplIDValid> (d, ApplID, packet);
    eti::setInteger<int8_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getLastFragment, &eurexRBCHeaderCompPacket::isLastFragmentValid> (d, LastFragment, packet);
    eti::setString<eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::getPad7, &eurexRBCHeaderCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getSideAllocGrpComp (cdr &d, const eurexSideAllocGrpCompPacket& packet)
{
    eti::setDouble<eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::getAllocQty, &eurexSideAllocGrpCompPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<uint32_t, eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::getIndividualAllocID, &eurexSideAllocGrpCompPacket::isIndividualAllocIDValid> (d, IndividualAllocID, packet);
    eti::setInteger<int8_t, eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::getSide, &eurexSideAllocGrpCompPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::getPartyExecutingFirm, &eurexSideAllocGrpCompPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::getPartyExecutingTrader, &eurexSideAllocGrpCompPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
}

static void
getBasketExecGrpComp (cdr &d, const eurexBasketExecGrpCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::getPackageID, &eurexBasketExecGrpCompPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<int32_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::getSideMarketSegmentID, &eurexBasketExecGrpCompPacket::isSideMarketSegmentIDValid> (d, SideMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::getAllocID, &eurexBasketExecGrpCompPacket::isAllocIDValid> (d, AllocID, packet);
    eti::setInteger<int16_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::getSideTrdSubTyp, &eurexBasketExecGrpCompPacket::isSideTrdSubTypValid> (d, SideTrdSubTyp, packet);
    eti::setString<eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::getPad2, &eurexBasketExecGrpCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getQuoteEventGrpComp (cdr &d, const eurexQuoteEventGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getSecurityID, &eurexQuoteEventGrpCompPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventPx, &eurexQuoteEventGrpCompPacket::isQuoteEventPxValid> (d, QuoteEventPx, packet);
    eti::setDouble<eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventQty, &eurexQuoteEventGrpCompPacket::isQuoteEventQtyValid> (d, QuoteEventQty, packet);
    eti::setInteger<uint64_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteMsgID, &eurexQuoteEventGrpCompPacket::isQuoteMsgIDValid> (d, QuoteMsgID, packet);
    eti::setInteger<uint32_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventMatchID, &eurexQuoteEventGrpCompPacket::isQuoteEventMatchIDValid> (d, QuoteEventMatchID, packet);
    eti::setInteger<int32_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventExecID, &eurexQuoteEventGrpCompPacket::isQuoteEventExecIDValid> (d, QuoteEventExecID, packet);
    eti::setInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventType, &eurexQuoteEventGrpCompPacket::isQuoteEventTypeValid> (d, QuoteEventType, packet);
    eti::setInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventSide, &eurexQuoteEventGrpCompPacket::isQuoteEventSideValid> (d, QuoteEventSide, packet);
    eti::setInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventLiquidityInd, &eurexQuoteEventGrpCompPacket::isQuoteEventLiquidityIndValid> (d, QuoteEventLiquidityInd, packet);
    eti::setInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getQuoteEventReason, &eurexQuoteEventGrpCompPacket::isQuoteEventReasonValid> (d, QuoteEventReason, packet);
    eti::setString<eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::getPad4, &eurexQuoteEventGrpCompPacket::isPad4Valid> (d, Pad4, packet);
}

static void
getMessageHeaderOutComp (cdr &d, const eurexMessageHeaderOutCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexMessageHeaderOutCompPacket, &eurexMessageHeaderOutCompPacket::getBodyLen, &eurexMessageHeaderOutCompPacket::isBodyLenValid> (d, BodyLen, packet);
    eti::setInteger<uint16_t, eurexMessageHeaderOutCompPacket, &eurexMessageHeaderOutCompPacket::getTemplateID, &eurexMessageHeaderOutCompPacket::isTemplateIDValid> (d, TemplateID, packet);
    eti::setString<eurexMessageHeaderOutCompPacket, &eurexMessageHeaderOutCompPacket::getPad2, &eurexMessageHeaderOutCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getInstrumentEventGrpComp (cdr &d, const eurexInstrumentEventGrpCompPacket& packet)
{
    eti::setInteger<int32_t, eurexInstrumentEventGrpCompPacket, &eurexInstrumentEventGrpCompPacket::getEventDate, &eurexInstrumentEventGrpCompPacket::isEventDateValid> (d, EventDate, packet);
    eti::setInteger<int8_t, eurexInstrumentEventGrpCompPacket, &eurexInstrumentEventGrpCompPacket::getEventType, &eurexInstrumentEventGrpCompPacket::isEventTypeValid> (d, EventType, packet);
    eti::setString<eurexInstrumentEventGrpCompPacket, &eurexInstrumentEventGrpCompPacket::getPad3, &eurexInstrumentEventGrpCompPacket::isPad3Valid> (d, Pad3, packet);
}

static void
getSRQSRelatedTradeIDGrpComp (cdr &d, const eurexSRQSRelatedTradeIDGrpCompPacket& packet)
{
    eti::setInteger<uint32_t, eurexSRQSRelatedTradeIDGrpCompPacket, &eurexSRQSRelatedTradeIDGrpCompPacket::getSRQSRelatedTradeID, &eurexSRQSRelatedTradeIDGrpCompPacket::isSRQSRelatedTradeIDValid> (d, SRQSRelatedTradeID, packet);
    eti::setString<eurexSRQSRelatedTradeIDGrpCompPacket, &eurexSRQSRelatedTradeIDGrpCompPacket::getPad4, &eurexSRQSRelatedTradeIDGrpCompPacket::isPad4Valid> (d, Pad4, packet);
}

static void
getSideAllocGrpBCComp (cdr &d, const eurexSideAllocGrpBCCompPacket& packet)
{
    eti::setDouble<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::getAllocQty, &eurexSideAllocGrpBCCompPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<uint32_t, eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::getIndividualAllocID, &eurexSideAllocGrpBCCompPacket::isIndividualAllocIDValid> (d, IndividualAllocID, packet);
    eti::setString<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::getPartyExecutingFirm, &eurexSideAllocGrpBCCompPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::getPartyExecutingTrader, &eurexSideAllocGrpBCCompPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setInteger<int8_t, eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::getSide, &eurexSideAllocGrpBCCompPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::getTradeAllocStatus, &eurexSideAllocGrpBCCompPacket::isTradeAllocStatusValid> (d, TradeAllocStatus, packet);
    eti::setString<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::getPad7, &eurexSideAllocGrpBCCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getBasketSideAllocExtGrpComp (cdr &d, const eurexBasketSideAllocExtGrpCompPacket& packet)
{
    eti::setDouble<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getAllocQty, &eurexBasketSideAllocExtGrpCompPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<uint64_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIDClientID, &eurexBasketSideAllocExtGrpCompPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIdInvestmentDecisionMaker, &eurexBasketSideAllocExtGrpCompPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getExecutingTrader, &eurexBasketSideAllocExtGrpCompPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPackageID, &eurexBasketSideAllocExtGrpCompPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<int32_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getSideMarketSegmentID, &eurexBasketSideAllocExtGrpCompPacket::isSideMarketSegmentIDValid> (d, SideMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getAllocID, &eurexBasketSideAllocExtGrpCompPacket::isAllocIDValid> (d, AllocID, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getSide, &eurexBasketSideAllocExtGrpCompPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPositionEffect, &eurexBasketSideAllocExtGrpCompPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getTradingCapacity, &eurexBasketSideAllocExtGrpCompPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getOrderAttributeLiquidityProvision, &eurexBasketSideAllocExtGrpCompPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getExecutingTraderQualifier, &eurexBasketSideAllocExtGrpCompPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexBasketSideAllocExtGrpCompPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getOrderAttributeRiskReduction, &eurexBasketSideAllocExtGrpCompPacket::isOrderAttributeRiskReductionValid> (d, OrderAttributeRiskReduction, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyExecutingFirm, &eurexBasketSideAllocExtGrpCompPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyExecutingTrader, &eurexBasketSideAllocExtGrpCompPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getAccount, &eurexBasketSideAllocExtGrpCompPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getFreeText1, &eurexBasketSideAllocExtGrpCompPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getFreeText2, &eurexBasketSideAllocExtGrpCompPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getFreeText3, &eurexBasketSideAllocExtGrpCompPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIDTakeUpTradingFirm, &eurexBasketSideAllocExtGrpCompPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIDOrderOriginationFirm, &eurexBasketSideAllocExtGrpCompPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIDBeneficiary, &eurexBasketSideAllocExtGrpCompPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIDPositionAccount, &eurexBasketSideAllocExtGrpCompPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getPartyIDLocationID, &eurexBasketSideAllocExtGrpCompPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getCustOrderHandlingInst, &eurexBasketSideAllocExtGrpCompPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::getComplianceText, &eurexBasketSideAllocExtGrpCompPacket::isComplianceTextValid> (d, ComplianceText, packet);
}

static void
getFillsGrpComp (cdr &d, const eurexFillsGrpCompPacket& packet)
{
    eti::setDouble<eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::getFillPx, &eurexFillsGrpCompPacket::isFillPxValid> (d, FillPx, packet);
    eti::setDouble<eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::getFillQty, &eurexFillsGrpCompPacket::isFillQtyValid> (d, FillQty, packet);
    eti::setInteger<uint32_t, eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::getFillMatchID, &eurexFillsGrpCompPacket::isFillMatchIDValid> (d, FillMatchID, packet);
    eti::setInteger<int32_t, eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::getFillExecID, &eurexFillsGrpCompPacket::isFillExecIDValid> (d, FillExecID, packet);
    eti::setInteger<int8_t, eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::getFillLiquidityInd, &eurexFillsGrpCompPacket::isFillLiquidityIndValid> (d, FillLiquidityInd, packet);
    eti::setString<eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::getPad7, &eurexFillsGrpCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getInstrmtMatchSideGrpComp (cdr &d, const eurexInstrmtMatchSideGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getSecurityID, &eurexInstrmtMatchSideGrpCompPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getLastPx, &eurexInstrmtMatchSideGrpCompPacket::isLastPxValid> (d, LastPx, packet);
    eti::setInteger<uint64_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getTransBkdTime, &eurexInstrmtMatchSideGrpCompPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setDouble<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getRelatedClosePrice, &eurexInstrmtMatchSideGrpCompPacket::isRelatedClosePriceValid> (d, RelatedClosePrice, packet);
    eti::setInteger<uint32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getPackageID, &eurexInstrmtMatchSideGrpCompPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<int32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getSideMarketSegmentID, &eurexInstrmtMatchSideGrpCompPacket::isSideMarketSegmentIDValid> (d, SideMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getNegotiationID, &eurexInstrmtMatchSideGrpCompPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getSRQSRelatedTradeID, &eurexInstrmtMatchSideGrpCompPacket::isSRQSRelatedTradeIDValid> (d, SRQSRelatedTradeID, packet);
    eti::setInteger<int16_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getSideTrdSubTyp, &eurexInstrmtMatchSideGrpCompPacket::isSideTrdSubTypValid> (d, SideTrdSubTyp, packet);
    eti::setInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getProductComplex, &eurexInstrmtMatchSideGrpCompPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getTradePublishIndicator, &eurexInstrmtMatchSideGrpCompPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getInstrmtMatchSideID, &eurexInstrmtMatchSideGrpCompPacket::isInstrmtMatchSideIDValid> (d, InstrmtMatchSideID, packet);
    eti::setInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getEffectOnBasket, &eurexInstrmtMatchSideGrpCompPacket::isEffectOnBasketValid> (d, EffectOnBasket, packet);
    eti::setString<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getTradeReportText, &eurexInstrmtMatchSideGrpCompPacket::isTradeReportTextValid> (d, TradeReportText, packet);
    eti::setString<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::getPad6, &eurexInstrmtMatchSideGrpCompPacket::isPad6Valid> (d, Pad6, packet);
}

static void
getUnderlyingStipGrpComp (cdr &d, const eurexUnderlyingStipGrpCompPacket& packet)
{
    eti::setString<eurexUnderlyingStipGrpCompPacket, &eurexUnderlyingStipGrpCompPacket::getUnderlyingStipValue, &eurexUnderlyingStipGrpCompPacket::isUnderlyingStipValueValid> (d, UnderlyingStipValue, packet);
    eti::setString<eurexUnderlyingStipGrpCompPacket, &eurexUnderlyingStipGrpCompPacket::getUnderlyingStipType, &eurexUnderlyingStipGrpCompPacket::isUnderlyingStipTypeValid> (d, UnderlyingStipType, packet);
    eti::setString<eurexUnderlyingStipGrpCompPacket, &eurexUnderlyingStipGrpCompPacket::getPad1, &eurexUnderlyingStipGrpCompPacket::isPad1Valid> (d, Pad1, packet);
}

static void
getCrossRequestAckSideGrpComp (cdr &d, const eurexCrossRequestAckSideGrpCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::getOrderID, &eurexCrossRequestAckSideGrpCompPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<int8_t, eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::getInputSource, &eurexCrossRequestAckSideGrpCompPacket::isInputSourceValid> (d, InputSource, packet);
    eti::setInteger<int8_t, eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::getSide, &eurexCrossRequestAckSideGrpCompPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::getPad6, &eurexCrossRequestAckSideGrpCompPacket::isPad6Valid> (d, Pad6, packet);
}

static void
getQuoteEntryAckGrpComp (cdr &d, const eurexQuoteEntryAckGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::getSecurityID, &eurexQuoteEntryAckGrpCompPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::getBidCxlSize, &eurexQuoteEntryAckGrpCompPacket::isBidCxlSizeValid> (d, BidCxlSize, packet);
    eti::setDouble<eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::getOfferCxlSize, &eurexQuoteEntryAckGrpCompPacket::isOfferCxlSizeValid> (d, OfferCxlSize, packet);
    eti::setInteger<int32_t, eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::getQuoteEntryRejectReason, &eurexQuoteEntryAckGrpCompPacket::isQuoteEntryRejectReasonValid> (d, QuoteEntryRejectReason, packet);
    eti::setInteger<int8_t, eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::getQuoteEntryStatus, &eurexQuoteEntryAckGrpCompPacket::isQuoteEntryStatusValid> (d, QuoteEntryStatus, packet);
    eti::setString<eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::getPad3, &eurexQuoteEntryAckGrpCompPacket::isPad3Valid> (d, Pad3, packet);
}

static void
getRiskLimitsRptGrpComp (cdr &d, const eurexRiskLimitsRptGrpCompPacket& packet)
{
    eti::setDouble<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getRiskLimitQty, &eurexRiskLimitsRptGrpCompPacket::isRiskLimitQtyValid> (d, RiskLimitQty, packet);
    eti::setDouble<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getRiskLimitOpenQty, &eurexRiskLimitsRptGrpCompPacket::isRiskLimitOpenQtyValid> (d, RiskLimitOpenQty, packet);
    eti::setDouble<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getRiskLimitNetPositionQty, &eurexRiskLimitsRptGrpCompPacket::isRiskLimitNetPositionQtyValid> (d, RiskLimitNetPositionQty, packet);
    eti::setInteger<int8_t, eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getRiskLimitType, &eurexRiskLimitsRptGrpCompPacket::isRiskLimitTypeValid> (d, RiskLimitType, packet);
    eti::setInteger<int8_t, eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getRiskLimitRequestingPartyRole, &eurexRiskLimitsRptGrpCompPacket::isRiskLimitRequestingPartyRoleValid> (d, RiskLimitRequestingPartyRole, packet);
    eti::setInteger<int8_t, eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getRiskLimitViolationIndicator, &eurexRiskLimitsRptGrpCompPacket::isRiskLimitViolationIndicatorValid> (d, RiskLimitViolationIndicator, packet);
    eti::setString<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getRiskLimitGroup, &eurexRiskLimitsRptGrpCompPacket::isRiskLimitGroupValid> (d, RiskLimitGroup, packet);
    eti::setString<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::getPad2, &eurexRiskLimitsRptGrpCompPacket::isPad2Valid> (d, Pad2, packet);
}

static void
getResponseHeaderMEComp (cdr &d, const eurexResponseHeaderMECompPacket& packet)
{
    eti::setInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getRequestTime, &eurexResponseHeaderMECompPacket::isRequestTimeValid> (d, RequestTime, packet);
    eti::setInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getTrdRegTSTimeIn, &eurexResponseHeaderMECompPacket::isTrdRegTSTimeInValid> (d, TrdRegTSTimeIn, packet);
    eti::setInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getTrdRegTSTimeOut, &eurexResponseHeaderMECompPacket::isTrdRegTSTimeOutValid> (d, TrdRegTSTimeOut, packet);
    eti::setInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getResponseIn, &eurexResponseHeaderMECompPacket::isResponseInValid> (d, ResponseIn, packet);
    eti::setInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getSendingTime, &eurexResponseHeaderMECompPacket::isSendingTimeValid> (d, SendingTime, packet);
    eti::setInteger<uint32_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getMsgSeqNum, &eurexResponseHeaderMECompPacket::isMsgSeqNumValid> (d, MsgSeqNum, packet);
    eti::setInteger<uint16_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getPartitionID, &eurexResponseHeaderMECompPacket::isPartitionIDValid> (d, PartitionID, packet);
    eti::setInteger<int8_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getApplID, &eurexResponseHeaderMECompPacket::isApplIDValid> (d, ApplID, packet);
    eti::setString<eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getApplMsgID, &eurexResponseHeaderMECompPacket::isApplMsgIDValid> (d, ApplMsgID, packet);
    eti::setInteger<int8_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::getLastFragment, &eurexResponseHeaderMECompPacket::isLastFragmentValid> (d, LastFragment, packet);
}

static void
getCrossRequestSideGrpComp (cdr &d, const eurexCrossRequestSideGrpCompPacket& packet)
{
    eti::setInteger<uint64_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIDClientID, &eurexCrossRequestSideGrpCompPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIdInvestmentDecisionMaker, &eurexCrossRequestSideGrpCompPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getExecutingTrader, &eurexCrossRequestSideGrpCompPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setDouble<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getMaximumPrice, &eurexCrossRequestSideGrpCompPacket::isMaximumPriceValid> (d, MaximumPrice, packet);
    eti::setInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getInputSource, &eurexCrossRequestSideGrpCompPacket::isInputSourceValid> (d, InputSource, packet);
    eti::setInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getSide, &eurexCrossRequestSideGrpCompPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getTradingCapacity, &eurexCrossRequestSideGrpCompPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getExecutingTraderQualifier, &eurexCrossRequestSideGrpCompPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getOrderAttributeLiquidityProvision, &eurexCrossRequestSideGrpCompPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexCrossRequestSideGrpCompPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPositionEffect, &eurexCrossRequestSideGrpCompPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getCustOrderHandlingInst, &eurexCrossRequestSideGrpCompPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getAccount, &eurexCrossRequestSideGrpCompPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIDPositionAccount, &eurexCrossRequestSideGrpCompPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getFreeText1, &eurexCrossRequestSideGrpCompPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getFreeText2, &eurexCrossRequestSideGrpCompPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getFreeText3, &eurexCrossRequestSideGrpCompPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIDOrderOriginationFirm, &eurexCrossRequestSideGrpCompPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIDBeneficiary, &eurexCrossRequestSideGrpCompPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIDTakeUpTradingFirm, &eurexCrossRequestSideGrpCompPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getSideComplianceText, &eurexCrossRequestSideGrpCompPacket::isSideComplianceTextValid> (d, SideComplianceText, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPartyIDLocationID, &eurexCrossRequestSideGrpCompPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::getPad7, &eurexCrossRequestSideGrpCompPacket::isPad7Valid> (d, Pad7, packet);
}

static void
getQuoteEntryGrpComp (cdr &d, const eurexQuoteEntryGrpCompPacket& packet)
{
    eti::setInteger<int64_t, eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::getSecurityID, &eurexQuoteEntryGrpCompPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::getBidPx, &eurexQuoteEntryGrpCompPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::getBidSize, &eurexQuoteEntryGrpCompPacket::isBidSizeValid> (d, BidSize, packet);
    eti::setDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::getOfferPx, &eurexQuoteEntryGrpCompPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::getOfferSize, &eurexQuoteEntryGrpCompPacket::isOfferSizeValid> (d, OfferSize, packet);
}


void
eurexCodec::getAddComplexInstrumentRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexAddComplexInstrumentRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize AddComplexInstrumentRequest");
    d.setString (MessageName, "AddComplexInstrumentRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::getMarketSegmentID, &eurexAddComplexInstrumentRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::getSecuritySubType, &eurexAddComplexInstrumentRequestPacket::isSecuritySubTypeValid> (d, SecuritySubType, packet);
    eti::setInteger<int8_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::getProductComplex, &eurexAddComplexInstrumentRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::getNoLegs, &eurexAddComplexInstrumentRequestPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setString<eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::getComplianceText, &eurexAddComplexInstrumentRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::getPad2, &eurexAddComplexInstrumentRequestPacket::isPad2Valid> (d, Pad2, packet);
    const vector<eurexInstrmtLegGrpCompPacket>& vInstrmtLegGrp = packet.getInstrmtLegGrp ();
    for (size_t i = 0; i < vInstrmtLegGrp.size (); i++)
    {
        cdr c;
        getInstrmtLegGrpComp (c, vInstrmtLegGrp[i]);
        d.appendArray (InstrmtLegGrp, c);
    }
}

void
eurexCodec::getAddComplexInstrumentResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexAddComplexInstrumentResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize AddComplexInstrumentResponse");
    d.setString (MessageName, "AddComplexInstrumentResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setDouble<eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getLowLimitPrice, &eurexAddComplexInstrumentResponsePacket::isLowLimitPriceValid> (d, LowLimitPrice, packet);
    eti::setDouble<eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getHighLimitPrice, &eurexAddComplexInstrumentResponsePacket::isHighLimitPriceValid> (d, HighLimitPrice, packet);
    eti::setInteger<int64_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getSecurityID, &eurexAddComplexInstrumentResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getLastUpdateTime, &eurexAddComplexInstrumentResponsePacket::isLastUpdateTimeValid> (d, LastUpdateTime, packet);
    eti::setInteger<uint64_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getSecurityResponseID, &eurexAddComplexInstrumentResponsePacket::isSecurityResponseIDValid> (d, SecurityResponseID, packet);
    eti::setInteger<int32_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getMarketSegmentID, &eurexAddComplexInstrumentResponsePacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getNumberOfSecurities, &eurexAddComplexInstrumentResponsePacket::isNumberOfSecuritiesValid> (d, NumberOfSecurities, packet);
    eti::setInteger<int32_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getSecuritySubType, &eurexAddComplexInstrumentResponsePacket::isSecuritySubTypeValid> (d, SecuritySubType, packet);
    eti::setInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getMultilegModel, &eurexAddComplexInstrumentResponsePacket::isMultilegModelValid> (d, MultilegModel, packet);
    eti::setInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getImpliedMarketIndicator, &eurexAddComplexInstrumentResponsePacket::isImpliedMarketIndicatorValid> (d, ImpliedMarketIndicator, packet);
    eti::setInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getProductComplex, &eurexAddComplexInstrumentResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::getNoLegs, &eurexAddComplexInstrumentResponsePacket::isNoLegsValid> (d, NoLegs, packet);
    const vector<eurexInstrmtLegGrpCompPacket>& vInstrmtLegGrp = packet.getInstrmtLegGrp ();
    for (size_t i = 0; i < vInstrmtLegGrp.size (); i++)
    {
        cdr c;
        getInstrmtLegGrpComp (c, vInstrmtLegGrp[i]);
        d.appendArray (InstrmtLegGrp, c);
    }
}

void
eurexCodec::getAddFlexibleInstrumentRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexAddFlexibleInstrumentRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize AddFlexibleInstrumentRequest");
    d.setString (MessageName, "AddFlexibleInstrumentRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setDouble<eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getStrikePrice, &eurexAddFlexibleInstrumentRequestPacket::isStrikePriceValid> (d, StrikePrice, packet);
    eti::setInteger<int32_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getMarketSegmentID, &eurexAddFlexibleInstrumentRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getMaturityDate, &eurexAddFlexibleInstrumentRequestPacket::isMaturityDateValid> (d, MaturityDate, packet);
    eti::setString<eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getSettlMethod, &eurexAddFlexibleInstrumentRequestPacket::isSettlMethodValid> (d, SettlMethod, packet);
    eti::setInteger<int8_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getOptAttribute, &eurexAddFlexibleInstrumentRequestPacket::isOptAttributeValid> (d, OptAttribute, packet);
    eti::setInteger<int8_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getPutOrCall, &eurexAddFlexibleInstrumentRequestPacket::isPutOrCallValid> (d, PutOrCall, packet);
    eti::setInteger<int8_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getExerciseStyle, &eurexAddFlexibleInstrumentRequestPacket::isExerciseStyleValid> (d, ExerciseStyle, packet);
    eti::setString<eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::getComplianceText, &eurexAddFlexibleInstrumentRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
}

void
eurexCodec::getAddFlexibleInstrumentResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexAddFlexibleInstrumentResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize AddFlexibleInstrumentResponse");
    d.setString (MessageName, "AddFlexibleInstrumentResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getSecurityResponseID, &eurexAddFlexibleInstrumentResponsePacket::isSecurityResponseIDValid> (d, SecurityResponseID, packet);
    eti::setInteger<int64_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getSecurityID, &eurexAddFlexibleInstrumentResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getStrikePrice, &eurexAddFlexibleInstrumentResponsePacket::isStrikePriceValid> (d, StrikePrice, packet);
    eti::setInteger<int32_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getMarketSegmentID, &eurexAddFlexibleInstrumentResponsePacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getMaturityDate, &eurexAddFlexibleInstrumentResponsePacket::isMaturityDateValid> (d, MaturityDate, packet);
    eti::setInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getProductComplex, &eurexAddFlexibleInstrumentResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setString<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getSettlMethod, &eurexAddFlexibleInstrumentResponsePacket::isSettlMethodValid> (d, SettlMethod, packet);
    eti::setInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getOptAttribute, &eurexAddFlexibleInstrumentResponsePacket::isOptAttributeValid> (d, OptAttribute, packet);
    eti::setInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getPutOrCall, &eurexAddFlexibleInstrumentResponsePacket::isPutOrCallValid> (d, PutOrCall, packet);
    eti::setInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getExerciseStyle, &eurexAddFlexibleInstrumentResponsePacket::isExerciseStyleValid> (d, ExerciseStyle, packet);
    eti::setString<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getSymbol, &eurexAddFlexibleInstrumentResponsePacket::isSymbolValid> (d, Symbol, packet);
    eti::setString<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::getPad7, &eurexAddFlexibleInstrumentResponsePacket::isPad7Valid> (d, Pad7, packet);
}

void
eurexCodec::getAmendBasketTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexAmendBasketTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize AmendBasketTradeRequest");
    d.setString (MessageName, "AmendBasketTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getBasketTrdMatchID, &eurexAmendBasketTradeRequestPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint32_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getBasketExecID, &eurexAmendBasketTradeRequestPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int32_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getMarketSegmentID, &eurexAmendBasketTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getMaturityMonthYear, &eurexAmendBasketTradeRequestPacket::isMaturityMonthYearValid> (d, MaturityMonthYear, packet);
    eti::setInteger<int16_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getTrdType, &eurexAmendBasketTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getTradeReportType, &eurexAmendBasketTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getBasketTradeReportType, &eurexAmendBasketTradeRequestPacket::isBasketTradeReportTypeValid> (d, BasketTradeReportType, packet);
    eti::setInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getNoBasketRootPartyGrps, &eurexAmendBasketTradeRequestPacket::isNoBasketRootPartyGrpsValid> (d, NoBasketRootPartyGrps, packet);
    eti::setInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getNoInstrmtMatchSides, &eurexAmendBasketTradeRequestPacket::isNoInstrmtMatchSidesValid> (d, NoInstrmtMatchSides, packet);
    eti::setInteger<uint8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getNoBasketSideAlloc, &eurexAmendBasketTradeRequestPacket::isNoBasketSideAllocValid> (d, NoBasketSideAlloc, packet);
    eti::setString<eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getBasketTradeReportText, &eurexAmendBasketTradeRequestPacket::isBasketTradeReportTextValid> (d, BasketTradeReportText, packet);
    eti::setString<eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getTradeReportID, &eurexAmendBasketTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::getPad5, &eurexAmendBasketTradeRequestPacket::isPad5Valid> (d, Pad5, packet);
    const vector<eurexBasketRootPartyGrpCompPacket>& vBasketRootPartyGrp = packet.getBasketRootPartyGrp ();
    for (size_t i = 0; i < vBasketRootPartyGrp.size (); i++)
    {
        cdr c;
        getBasketRootPartyGrpComp (c, vBasketRootPartyGrp[i]);
        d.appendArray (BasketRootPartyGrp, c);
    }
    const vector<eurexInstrmtMatchSideGrpCompPacket>& vInstrmtMatchSideGrp = packet.getInstrmtMatchSideGrp ();
    for (size_t i = 0; i < vInstrmtMatchSideGrp.size (); i++)
    {
        cdr c;
        getInstrmtMatchSideGrpComp (c, vInstrmtMatchSideGrp[i]);
        d.appendArray (InstrmtMatchSideGrp, c);
    }
    const vector<eurexBasketSideAllocGrpCompPacket>& vBasketSideAllocGrp = packet.getBasketSideAllocGrp ();
    for (size_t i = 0; i < vBasketSideAllocGrp.size (); i++)
    {
        cdr c;
        getBasketSideAllocGrpComp (c, vBasketSideAllocGrp[i]);
        d.appendArray (BasketSideAllocGrp, c);
    }
}

void
eurexCodec::getApproveBasketTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexApproveBasketTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ApproveBasketTradeRequest");
    d.setString (MessageName, "ApproveBasketTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getBasketTrdMatchID, &eurexApproveBasketTradeRequestPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint32_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getBasketExecID, &eurexApproveBasketTradeRequestPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int32_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getMarketSegmentID, &eurexApproveBasketTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getRootPartySubIDType, &eurexApproveBasketTradeRequestPacket::isRootPartySubIDTypeValid> (d, RootPartySubIDType, packet);
    eti::setInteger<int16_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getTrdType, &eurexApproveBasketTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getTradeReportType, &eurexApproveBasketTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<uint8_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getNoBasketSideAlloc, &eurexApproveBasketTradeRequestPacket::isNoBasketSideAllocValid> (d, NoBasketSideAlloc, packet);
    eti::setString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getBasketTradeReportText, &eurexApproveBasketTradeRequestPacket::isBasketTradeReportTextValid> (d, BasketTradeReportText, packet);
    eti::setString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getTradeReportID, &eurexApproveBasketTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getBasketSideTradeReportID, &eurexApproveBasketTradeRequestPacket::isBasketSideTradeReportIDValid> (d, BasketSideTradeReportID, packet);
    eti::setString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::getPad6, &eurexApproveBasketTradeRequestPacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexBasketSideAllocExtGrpCompPacket>& vBasketSideAllocExtGrp = packet.getBasketSideAllocExtGrp ();
    for (size_t i = 0; i < vBasketSideAllocExtGrp.size (); i++)
    {
        cdr c;
        getBasketSideAllocExtGrpComp (c, vBasketSideAllocExtGrp[i]);
        d.appendArray (BasketSideAllocExtGrp, c);
    }
}

void
eurexCodec::getApproveTESTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexApproveTESTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ApproveTESTradeRequest");
    d.setString (MessageName, "ApproveTESTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIDClientID, &eurexApproveTESTradeRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexApproveTESTradeRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getExecutingTrader, &eurexApproveTESTradeRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setDouble<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getAllocQty, &eurexApproveTESTradeRequestPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<uint32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPackageID, &eurexApproveTESTradeRequestPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<uint32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getAllocID, &eurexApproveTESTradeRequestPacket::isAllocIDValid> (d, AllocID, packet);
    eti::setInteger<uint32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getTESExecID, &eurexApproveTESTradeRequestPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<int32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getMarketSegmentID, &eurexApproveTESTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getRelatedMarketSegmentID, &eurexApproveTESTradeRequestPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<int16_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getTrdType, &eurexApproveTESTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getTradingCapacity, &eurexApproveTESTradeRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getTradeReportType, &eurexApproveTESTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getSide, &eurexApproveTESTradeRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getOrderAttributeLiquidityProvision, &eurexApproveTESTradeRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexApproveTESTradeRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getExecutingTraderQualifier, &eurexApproveTESTradeRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getOrderAttributeRiskReduction, &eurexApproveTESTradeRequestPacket::isOrderAttributeRiskReductionValid> (d, OrderAttributeRiskReduction, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getTradeReportID, &eurexApproveTESTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPositionEffect, &eurexApproveTESTradeRequestPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyExecutingFirm, &eurexApproveTESTradeRequestPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyExecutingTrader, &eurexApproveTESTradeRequestPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getAccount, &eurexApproveTESTradeRequestPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getFreeText1, &eurexApproveTESTradeRequestPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getFreeText2, &eurexApproveTESTradeRequestPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getFreeText3, &eurexApproveTESTradeRequestPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIDTakeUpTradingFirm, &eurexApproveTESTradeRequestPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIDPositionAccount, &eurexApproveTESTradeRequestPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIDOrderOriginationFirm, &eurexApproveTESTradeRequestPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIDBeneficiary, &eurexApproveTESTradeRequestPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPartyIDLocationID, &eurexApproveTESTradeRequestPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getCustOrderHandlingInst, &eurexApproveTESTradeRequestPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getComplianceText, &eurexApproveTESTradeRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::getPad1, &eurexApproveTESTradeRequestPacket::isPad1Valid> (d, Pad1, packet);
}

void
eurexCodec::getBasketApproveBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexBasketApproveBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize BasketApproveBroadcast");
    d.setString (MessageName, "BasketApproveBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getBasketTrdMatchID, &eurexBasketApproveBroadcastPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint64_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getTransactTime, &eurexBasketApproveBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint32_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getBasketExecID, &eurexBasketApproveBroadcastPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int32_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getMarketSegmentID, &eurexBasketApproveBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getTrdType, &eurexBasketApproveBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getTradeReportType, &eurexBasketApproveBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getBasketTradeReportType, &eurexBasketApproveBroadcastPacket::isBasketTradeReportTypeValid> (d, BasketTradeReportType, packet);
    eti::setString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getMessageEventSource, &eurexBasketApproveBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setInteger<uint8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getNoBasketSideAlloc, &eurexBasketApproveBroadcastPacket::isNoBasketSideAllocValid> (d, NoBasketSideAlloc, packet);
    eti::setInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getNoBasketRootPartyGrps, &eurexBasketApproveBroadcastPacket::isNoBasketRootPartyGrpsValid> (d, NoBasketRootPartyGrps, packet);
    eti::setInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getPartyIDEnteringFirm, &eurexBasketApproveBroadcastPacket::isPartyIDEnteringFirmValid> (d, PartyIDEnteringFirm, packet);
    eti::setString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getPartyEnteringTrader, &eurexBasketApproveBroadcastPacket::isPartyEnteringTraderValid> (d, PartyEnteringTrader, packet);
    eti::setString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getBasketTradeReportText, &eurexBasketApproveBroadcastPacket::isBasketTradeReportTextValid> (d, BasketTradeReportText, packet);
    eti::setString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getTradeReportID, &eurexBasketApproveBroadcastPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::getPad2, &eurexBasketApproveBroadcastPacket::isPad2Valid> (d, Pad2, packet);
    const vector<eurexBasketRootPartyGrpCompPacket>& vBasketRootPartyGrp = packet.getBasketRootPartyGrp ();
    for (size_t i = 0; i < vBasketRootPartyGrp.size (); i++)
    {
        cdr c;
        getBasketRootPartyGrpComp (c, vBasketRootPartyGrp[i]);
        d.appendArray (BasketRootPartyGrp, c);
    }
    const vector<eurexBasketSideAllocExtBCGrpCompPacket>& vBasketSideAllocExtBCGrp = packet.getBasketSideAllocExtBCGrp ();
    for (size_t i = 0; i < vBasketSideAllocExtBCGrp.size (); i++)
    {
        cdr c;
        getBasketSideAllocExtBCGrpComp (c, vBasketSideAllocExtBCGrp[i]);
        d.appendArray (BasketSideAllocExtBCGrp, c);
    }
}

void
eurexCodec::getBasketBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexBasketBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize BasketBroadcast");
    d.setString (MessageName, "BasketBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getBasketTrdMatchID, &eurexBasketBroadcastPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint64_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getTransactTime, &eurexBasketBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint32_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getBasketExecID, &eurexBasketBroadcastPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int32_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getMarketSegmentID, &eurexBasketBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getMaturityMonthYear, &eurexBasketBroadcastPacket::isMaturityMonthYearValid> (d, MaturityMonthYear, packet);
    eti::setInteger<int16_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getTrdType, &eurexBasketBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getTradeReportType, &eurexBasketBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getBasketTradeReportType, &eurexBasketBroadcastPacket::isBasketTradeReportTypeValid> (d, BasketTradeReportType, packet);
    eti::setString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getMessageEventSource, &eurexBasketBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getNoBasketRootPartyGrpsBC, &eurexBasketBroadcastPacket::isNoBasketRootPartyGrpsBCValid> (d, NoBasketRootPartyGrpsBC, packet);
    eti::setInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getNoInstrmtMatchSides, &eurexBasketBroadcastPacket::isNoInstrmtMatchSidesValid> (d, NoInstrmtMatchSides, packet);
    eti::setInteger<uint8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getNoBasketSideAlloc, &eurexBasketBroadcastPacket::isNoBasketSideAllocValid> (d, NoBasketSideAlloc, packet);
    eti::setString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getBasketTradeReportText, &eurexBasketBroadcastPacket::isBasketTradeReportTextValid> (d, BasketTradeReportText, packet);
    eti::setString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getTradeReportID, &eurexBasketBroadcastPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::getPad4, &eurexBasketBroadcastPacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexBasketRootPartyGrpCompPacket>& vBasketRootPartyGrp = packet.getBasketRootPartyGrp ();
    for (size_t i = 0; i < vBasketRootPartyGrp.size (); i++)
    {
        cdr c;
        getBasketRootPartyGrpComp (c, vBasketRootPartyGrp[i]);
        d.appendArray (BasketRootPartyGrp, c);
    }
    const vector<eurexInstrmtMatchSideGrpCompPacket>& vInstrmtMatchSideGrp = packet.getInstrmtMatchSideGrp ();
    for (size_t i = 0; i < vInstrmtMatchSideGrp.size (); i++)
    {
        cdr c;
        getInstrmtMatchSideGrpComp (c, vInstrmtMatchSideGrp[i]);
        d.appendArray (InstrmtMatchSideGrp, c);
    }
    const vector<eurexBasketSideAllocGrpCompPacket>& vBasketSideAllocGrp = packet.getBasketSideAllocGrp ();
    for (size_t i = 0; i < vBasketSideAllocGrp.size (); i++)
    {
        cdr c;
        getBasketSideAllocGrpComp (c, vBasketSideAllocGrp[i]);
        d.appendArray (BasketSideAllocGrp, c);
    }
}

void
eurexCodec::getBasketDeleteBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexBasketDeleteBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize BasketDeleteBroadcast");
    d.setString (MessageName, "BasketDeleteBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getBasketTrdMatchID, &eurexBasketDeleteBroadcastPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint64_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getTransactTime, &eurexBasketDeleteBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int32_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getMarketSegmentID, &eurexBasketDeleteBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getBasketExecID, &eurexBasketDeleteBroadcastPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int16_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getTrdType, &eurexBasketDeleteBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getDeleteReason, &eurexBasketDeleteBroadcastPacket::isDeleteReasonValid> (d, DeleteReason, packet);
    eti::setString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getMessageEventSource, &eurexBasketDeleteBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getBasketTradeReportText, &eurexBasketDeleteBroadcastPacket::isBasketTradeReportTextValid> (d, BasketTradeReportText, packet);
    eti::setString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getTradeReportID, &eurexBasketDeleteBroadcastPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::getBasketSideTradeReportID, &eurexBasketDeleteBroadcastPacket::isBasketSideTradeReportIDValid> (d, BasketSideTradeReportID, packet);
}

void
eurexCodec::getBasketExecutionBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexBasketExecutionBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize BasketExecutionBroadcast");
    d.setString (MessageName, "BasketExecutionBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getBasketTrdMatchID, &eurexBasketExecutionBroadcastPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint64_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getTransactTime, &eurexBasketExecutionBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint32_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getBasketExecID, &eurexBasketExecutionBroadcastPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int32_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getMarketSegmentID, &eurexBasketExecutionBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getTrdType, &eurexBasketExecutionBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getTradeReportType, &eurexBasketExecutionBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getNoInstrmtMatchSides, &eurexBasketExecutionBroadcastPacket::isNoInstrmtMatchSidesValid> (d, NoInstrmtMatchSides, packet);
    eti::setString<eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getMessageEventSource, &eurexBasketExecutionBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getBasketSideTradeReportID, &eurexBasketExecutionBroadcastPacket::isBasketSideTradeReportIDValid> (d, BasketSideTradeReportID, packet);
    eti::setString<eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::getPad7, &eurexBasketExecutionBroadcastPacket::isPad7Valid> (d, Pad7, packet);
    const vector<eurexBasketExecGrpCompPacket>& vBasketExecGrp = packet.getBasketExecGrp ();
    for (size_t i = 0; i < vBasketExecGrp.size (); i++)
    {
        cdr c;
        getBasketExecGrpComp (c, vBasketExecGrp[i]);
        d.appendArray (BasketExecGrp, c);
    }
}

void
eurexCodec::getBasketResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexBasketResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize BasketResponse");
    d.setString (MessageName, "BasketResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<uint32_t, eurexBasketResponsePacket, &eurexBasketResponsePacket::getBasketExecID, &eurexBasketResponsePacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setString<eurexBasketResponsePacket, &eurexBasketResponsePacket::getTradeReportID, &eurexBasketResponsePacket::isTradeReportIDValid> (d, TradeReportID, packet);
}

void
eurexCodec::getBroadcastErrorNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexBroadcastErrorNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize BroadcastErrorNotification");
    d.setString (MessageName, "BroadcastErrorNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNotifHeaderComp (d, packet.getNotifHeader ());
    eti::setInteger<uint32_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::getApplIDStatus, &eurexBroadcastErrorNotificationPacket::isApplIDStatusValid> (d, ApplIDStatus, packet);
    eti::setInteger<uint32_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::getRefApplSubID, &eurexBroadcastErrorNotificationPacket::isRefApplSubIDValid> (d, RefApplSubID, packet);
    eti::setInteger<int16_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::getVarTextLen, &eurexBroadcastErrorNotificationPacket::isVarTextLenValid> (d, VarTextLen, packet);
    eti::setInteger<int8_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::getRefApplID, &eurexBroadcastErrorNotificationPacket::isRefApplIDValid> (d, RefApplID, packet);
    eti::setInteger<int8_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::getSessionStatus, &eurexBroadcastErrorNotificationPacket::isSessionStatusValid> (d, SessionStatus, packet);
    eti::setString<eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::getPad4, &eurexBroadcastErrorNotificationPacket::isPad4Valid> (d, Pad4, packet);
    eti::setString<eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::getVarText, &eurexBroadcastErrorNotificationPacket::isVarTextValid> (d, VarText, packet);
}

void
eurexCodec::getCLIPDeletionNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexCLIPDeletionNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize CLIPDeletionNotification");
    d.setString (MessageName, "CLIPDeletionNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getOrderID, &eurexCLIPDeletionNotificationPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getExecID, &eurexCLIPDeletionNotificationPacket::isExecIDValid> (d, ExecID, packet);
    eti::setInteger<int64_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getSecurityID, &eurexCLIPDeletionNotificationPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getCxlQty, &eurexCLIPDeletionNotificationPacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setInteger<int32_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getMarketSegmentID, &eurexCLIPDeletionNotificationPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getExecRestatementReason, &eurexCLIPDeletionNotificationPacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getProductComplex, &eurexCLIPDeletionNotificationPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getSide, &eurexCLIPDeletionNotificationPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getOrdStatus, &eurexCLIPDeletionNotificationPacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getExecType, &eurexCLIPDeletionNotificationPacket::isExecTypeValid> (d, ExecType, packet);
    eti::setString<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::getPad6, &eurexCLIPDeletionNotificationPacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getCLIPExecutionNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexCLIPExecutionNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize CLIPExecutionNotification");
    d.setString (MessageName, "CLIPExecutionNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getOrderID, &eurexCLIPExecutionNotificationPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getExecID, &eurexCLIPExecutionNotificationPacket::isExecIDValid> (d, ExecID, packet);
    eti::setInteger<int64_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getSecurityID, &eurexCLIPExecutionNotificationPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getCxlQty, &eurexCLIPExecutionNotificationPacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setDouble<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getLeavesQty, &eurexCLIPExecutionNotificationPacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getCumQty, &eurexCLIPExecutionNotificationPacket::isCumQtyValid> (d, CumQty, packet);
    eti::setInteger<int32_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getMarketSegmentID, &eurexCLIPExecutionNotificationPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getExecRestatementReason, &eurexCLIPExecutionNotificationPacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int16_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getNoLegExecs, &eurexCLIPExecutionNotificationPacket::isNoLegExecsValid> (d, NoLegExecs, packet);
    eti::setInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getProductComplex, &eurexCLIPExecutionNotificationPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getSide, &eurexCLIPExecutionNotificationPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getOrdStatus, &eurexCLIPExecutionNotificationPacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getExecType, &eurexCLIPExecutionNotificationPacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getMatchType, &eurexCLIPExecutionNotificationPacket::isMatchTypeValid> (d, MatchType, packet);
    eti::setInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getNoFills, &eurexCLIPExecutionNotificationPacket::isNoFillsValid> (d, NoFills, packet);
    eti::setString<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::getPad2, &eurexCLIPExecutionNotificationPacket::isPad2Valid> (d, Pad2, packet);
    const vector<eurexFillsGrpCompPacket>& vFillsGrp = packet.getFillsGrp ();
    for (size_t i = 0; i < vFillsGrp.size (); i++)
    {
        cdr c;
        getFillsGrpComp (c, vFillsGrp[i]);
        d.appendArray (FillsGrp, c);
    }
    const vector<eurexInstrmntLegExecGrpCompPacket>& vInstrmntLegExecGrp = packet.getInstrmntLegExecGrp ();
    for (size_t i = 0; i < vInstrmntLegExecGrp.size (); i++)
    {
        cdr c;
        getInstrmntLegExecGrpComp (c, vInstrmntLegExecGrp[i]);
        d.appendArray (InstrmntLegExecGrp, c);
    }
}

void
eurexCodec::getCLIPResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexCLIPResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize CLIPResponse");
    d.setString (MessageName, "CLIPResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::getExecID, &eurexCLIPResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setInteger<int64_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::getSecurityID, &eurexCLIPResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<int32_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::getMarketSegmentID, &eurexCLIPResponsePacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::getNoSides, &eurexCLIPResponsePacket::isNoSidesValid> (d, NoSides, packet);
    eti::setString<eurexCLIPResponsePacket, &eurexCLIPResponsePacket::getPad3, &eurexCLIPResponsePacket::isPad3Valid> (d, Pad3, packet);
    eti::setInteger<int32_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::getCrossRequestID, &eurexCLIPResponsePacket::isCrossRequestIDValid> (d, CrossRequestID, packet);
    eti::setString<eurexCLIPResponsePacket, &eurexCLIPResponsePacket::getPad4, &eurexCLIPResponsePacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexCrossRequestAckSideGrpCompPacket>& vCrossRequestAckSideGrp = packet.getCrossRequestAckSideGrp ();
    for (size_t i = 0; i < vCrossRequestAckSideGrp.size (); i++)
    {
        cdr c;
        getCrossRequestAckSideGrpComp (c, vCrossRequestAckSideGrp[i]);
        d.appendArray (CrossRequestAckSideGrp, c);
    }
}

void
eurexCodec::getCrossRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexCrossRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize CrossRequest");
    d.setString (MessageName, "CrossRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexCrossRequestPacket, &eurexCrossRequestPacket::getSecurityID, &eurexCrossRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexCrossRequestPacket, &eurexCrossRequestPacket::getOrderQty, &eurexCrossRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<int32_t, eurexCrossRequestPacket, &eurexCrossRequestPacket::getMarketSegmentID, &eurexCrossRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setString<eurexCrossRequestPacket, &eurexCrossRequestPacket::getComplianceText, &eurexCrossRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
}

void
eurexCodec::getCrossRequestResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexCrossRequestResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize CrossRequestResponse");
    d.setString (MessageName, "CrossRequestResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexCrossRequestResponsePacket, &eurexCrossRequestResponsePacket::getExecID, &eurexCrossRequestResponsePacket::isExecIDValid> (d, ExecID, packet);
}

void
eurexCodec::getDeleteAllOrderBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllOrderBroadcast");
    d.setString (MessageName, "DeleteAllOrderBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getMassActionReportID, &eurexDeleteAllOrderBroadcastPacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
    eti::setInteger<int64_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getSecurityID, &eurexDeleteAllOrderBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getPrice, &eurexDeleteAllOrderBroadcastPacket::isPriceValid> (d, Price, packet);
    eti::setInteger<int32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getMarketSegmentID, &eurexDeleteAllOrderBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getTargetPartyIDSessionID, &eurexDeleteAllOrderBroadcastPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<int32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getTargetPartyIDExecutingTrader, &eurexDeleteAllOrderBroadcastPacket::isTargetPartyIDExecutingTraderValid> (d, TargetPartyIDExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getPartyIDEnteringTrader, &eurexDeleteAllOrderBroadcastPacket::isPartyIDEnteringTraderValid> (d, PartyIDEnteringTrader, packet);
    eti::setInteger<int16_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getNoNotAffectedOrders, &eurexDeleteAllOrderBroadcastPacket::isNoNotAffectedOrdersValid> (d, NoNotAffectedOrders, packet);
    eti::setInteger<int16_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getNoAffectedOrderRequests, &eurexDeleteAllOrderBroadcastPacket::isNoAffectedOrderRequestsValid> (d, NoAffectedOrderRequests, packet);
    eti::setInteger<int8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getPartyIDEnteringFirm, &eurexDeleteAllOrderBroadcastPacket::isPartyIDEnteringFirmValid> (d, PartyIDEnteringFirm, packet);
    eti::setInteger<uint8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getMassActionReason, &eurexDeleteAllOrderBroadcastPacket::isMassActionReasonValid> (d, MassActionReason, packet);
    eti::setInteger<int8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getExecInst, &eurexDeleteAllOrderBroadcastPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::getSide, &eurexDeleteAllOrderBroadcastPacket::isSideValid> (d, Side, packet);
    const vector<eurexNotAffectedOrdersGrpCompPacket>& vNotAffectedOrdersGrp = packet.getNotAffectedOrdersGrp ();
    for (size_t i = 0; i < vNotAffectedOrdersGrp.size (); i++)
    {
        cdr c;
        getNotAffectedOrdersGrpComp (c, vNotAffectedOrdersGrp[i]);
        d.appendArray (NotAffectedOrdersGrp, c);
    }
    const vector<eurexAffectedOrderRequestsGrpCompPacket>& vAffectedOrderRequestsGrp = packet.getAffectedOrderRequestsGrp ();
    for (size_t i = 0; i < vAffectedOrderRequestsGrp.size (); i++)
    {
        cdr c;
        getAffectedOrderRequestsGrpComp (c, vAffectedOrderRequestsGrp[i]);
        d.appendArray (AffectedOrderRequestsGrp, c);
    }
}

void
eurexCodec::getDeleteAllOrderNRResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderNRResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllOrderNRResponse");
    d.setString (MessageName, "DeleteAllOrderNRResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteAllOrderNRResponsePacket, &eurexDeleteAllOrderNRResponsePacket::getMassActionReportID, &eurexDeleteAllOrderNRResponsePacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
}

void
eurexCodec::getDeleteAllOrderQuoteEventBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderQuoteEventBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllOrderQuoteEventBroadcast");
    d.setString (MessageName, "DeleteAllOrderQuoteEventBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::getMassActionReportID, &eurexDeleteAllOrderQuoteEventBroadcastPacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
    eti::setInteger<int64_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::getSecurityID, &eurexDeleteAllOrderQuoteEventBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<int32_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::getMarketSegmentID, &eurexDeleteAllOrderQuoteEventBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint8_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::getMassActionReason, &eurexDeleteAllOrderQuoteEventBroadcastPacket::isMassActionReasonValid> (d, MassActionReason, packet);
    eti::setInteger<int8_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::getExecInst, &eurexDeleteAllOrderQuoteEventBroadcastPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setString<eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::getPad2, &eurexDeleteAllOrderQuoteEventBroadcastPacket::isPad2Valid> (d, Pad2, packet);
}

void
eurexCodec::getDeleteAllOrderRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllOrderRequest");
    d.setString (MessageName, "DeleteAllOrderRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getSecurityID, &eurexDeleteAllOrderRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getPrice, &eurexDeleteAllOrderRequestPacket::isPriceValid> (d, Price, packet);
    eti::setInteger<uint64_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexDeleteAllOrderRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getExecutingTrader, &eurexDeleteAllOrderRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getMarketSegmentID, &eurexDeleteAllOrderRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getTargetPartyIDSessionID, &eurexDeleteAllOrderRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<int32_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getTargetPartyIDExecutingTrader, &eurexDeleteAllOrderRequestPacket::isTargetPartyIDExecutingTraderValid> (d, TargetPartyIDExecutingTrader, packet);
    eti::setInteger<int8_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getSide, &eurexDeleteAllOrderRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteAllOrderRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getExecutingTraderQualifier, &eurexDeleteAllOrderRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::getPad1, &eurexDeleteAllOrderRequestPacket::isPad1Valid> (d, Pad1, packet);
}

void
eurexCodec::getDeleteAllOrderResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllOrderResponse");
    d.setString (MessageName, "DeleteAllOrderResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderMEComp (d, packet.getResponseHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::getMassActionReportID, &eurexDeleteAllOrderResponsePacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
    eti::setInteger<int16_t, eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::getNoNotAffectedOrders, &eurexDeleteAllOrderResponsePacket::isNoNotAffectedOrdersValid> (d, NoNotAffectedOrders, packet);
    eti::setInteger<int16_t, eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::getNoAffectedOrderRequests, &eurexDeleteAllOrderResponsePacket::isNoAffectedOrderRequestsValid> (d, NoAffectedOrderRequests, packet);
    eti::setString<eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::getPad4, &eurexDeleteAllOrderResponsePacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexNotAffectedOrdersGrpCompPacket>& vNotAffectedOrdersGrp = packet.getNotAffectedOrdersGrp ();
    for (size_t i = 0; i < vNotAffectedOrdersGrp.size (); i++)
    {
        cdr c;
        getNotAffectedOrdersGrpComp (c, vNotAffectedOrdersGrp[i]);
        d.appendArray (NotAffectedOrdersGrp, c);
    }
    const vector<eurexAffectedOrderRequestsGrpCompPacket>& vAffectedOrderRequestsGrp = packet.getAffectedOrderRequestsGrp ();
    for (size_t i = 0; i < vAffectedOrderRequestsGrp.size (); i++)
    {
        cdr c;
        getAffectedOrderRequestsGrpComp (c, vAffectedOrderRequestsGrp[i]);
        d.appendArray (AffectedOrderRequestsGrp, c);
    }
}

void
eurexCodec::getDeleteAllQuoteBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllQuoteBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllQuoteBroadcast");
    d.setString (MessageName, "DeleteAllQuoteBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getMassActionReportID, &eurexDeleteAllQuoteBroadcastPacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
    eti::setInteger<int64_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getSecurityID, &eurexDeleteAllQuoteBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<int32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getMarketSegmentID, &eurexDeleteAllQuoteBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getTargetPartyIDSessionID, &eurexDeleteAllQuoteBroadcastPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<uint32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getPartyIDEnteringTrader, &eurexDeleteAllQuoteBroadcastPacket::isPartyIDEnteringTraderValid> (d, PartyIDEnteringTrader, packet);
    eti::setInteger<int32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getTargetPartyIDExecutingTrader, &eurexDeleteAllQuoteBroadcastPacket::isTargetPartyIDExecutingTraderValid> (d, TargetPartyIDExecutingTrader, packet);
    eti::setInteger<int16_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getNoNotAffectedSecurities, &eurexDeleteAllQuoteBroadcastPacket::isNoNotAffectedSecuritiesValid> (d, NoNotAffectedSecurities, packet);
    eti::setInteger<uint8_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getMassActionReason, &eurexDeleteAllQuoteBroadcastPacket::isMassActionReasonValid> (d, MassActionReason, packet);
    eti::setInteger<int8_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getPartyIDEnteringFirm, &eurexDeleteAllQuoteBroadcastPacket::isPartyIDEnteringFirmValid> (d, PartyIDEnteringFirm, packet);
    eti::setString<eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getTargetPartyIDDeskID, &eurexDeleteAllQuoteBroadcastPacket::isTargetPartyIDDeskIDValid> (d, TargetPartyIDDeskID, packet);
    eti::setString<eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::getPad1, &eurexDeleteAllQuoteBroadcastPacket::isPad1Valid> (d, Pad1, packet);
    const vector<eurexNotAffectedSecuritiesGrpCompPacket>& vNotAffectedSecuritiesGrp = packet.getNotAffectedSecuritiesGrp ();
    for (size_t i = 0; i < vNotAffectedSecuritiesGrp.size (); i++)
    {
        cdr c;
        getNotAffectedSecuritiesGrpComp (c, vNotAffectedSecuritiesGrp[i]);
        d.appendArray (NotAffectedSecuritiesGrp, c);
    }
}

void
eurexCodec::getDeleteAllQuoteRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllQuoteRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllQuoteRequest");
    d.setString (MessageName, "DeleteAllQuoteRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexDeleteAllQuoteRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::getExecutingTrader, &eurexDeleteAllQuoteRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::getMarketSegmentID, &eurexDeleteAllQuoteRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::getTargetPartyIDSessionID, &eurexDeleteAllQuoteRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<int8_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteAllQuoteRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::getExecutingTraderQualifier, &eurexDeleteAllQuoteRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::getPad6, &eurexDeleteAllQuoteRequestPacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getDeleteAllQuoteResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteAllQuoteResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteAllQuoteResponse");
    d.setString (MessageName, "DeleteAllQuoteResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteAllQuoteResponsePacket, &eurexDeleteAllQuoteResponsePacket::getMassActionReportID, &eurexDeleteAllQuoteResponsePacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
    eti::setInteger<int16_t, eurexDeleteAllQuoteResponsePacket, &eurexDeleteAllQuoteResponsePacket::getNoNotAffectedSecurities, &eurexDeleteAllQuoteResponsePacket::isNoNotAffectedSecuritiesValid> (d, NoNotAffectedSecurities, packet);
    eti::setString<eurexDeleteAllQuoteResponsePacket, &eurexDeleteAllQuoteResponsePacket::getPad6, &eurexDeleteAllQuoteResponsePacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexNotAffectedSecuritiesGrpCompPacket>& vNotAffectedSecuritiesGrp = packet.getNotAffectedSecuritiesGrp ();
    for (size_t i = 0; i < vNotAffectedSecuritiesGrp.size (); i++)
    {
        cdr c;
        getNotAffectedSecuritiesGrpComp (c, vNotAffectedSecuritiesGrp[i]);
        d.appendArray (NotAffectedSecuritiesGrp, c);
    }
}

void
eurexCodec::getDeleteBasketTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteBasketTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteBasketTradeRequest");
    d.setString (MessageName, "DeleteBasketTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::getBasketTrdMatchID, &eurexDeleteBasketTradeRequestPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint32_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::getBasketExecID, &eurexDeleteBasketTradeRequestPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int32_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::getMarketSegmentID, &eurexDeleteBasketTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::getTrdType, &eurexDeleteBasketTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::getTradeReportType, &eurexDeleteBasketTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setString<eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::getTradeReportID, &eurexDeleteBasketTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::getPad1, &eurexDeleteBasketTradeRequestPacket::isPad1Valid> (d, Pad1, packet);
}

void
eurexCodec::getDeleteCLIPRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteCLIPRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteCLIPRequest");
    d.setString (MessageName, "DeleteCLIPRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getOrderID, &eurexDeleteCLIPRequestPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<int64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getSecurityID, &eurexDeleteCLIPRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexDeleteCLIPRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getExecutingTrader, &eurexDeleteCLIPRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getMarketSegmentID, &eurexDeleteCLIPRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getExecutingTraderQualifier, &eurexDeleteCLIPRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setInteger<int8_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteCLIPRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setString<eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getPad2, &eurexDeleteCLIPRequestPacket::isPad2Valid> (d, Pad2, packet);
    eti::setInteger<int32_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getCrossRequestID, &eurexDeleteCLIPRequestPacket::isCrossRequestIDValid> (d, CrossRequestID, packet);
    eti::setString<eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::getPad4, &eurexDeleteCLIPRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getDeleteOrderBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteOrderBroadcast");
    d.setString (MessageName, "DeleteOrderBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getOrderID, &eurexDeleteOrderBroadcastPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getClOrdID, &eurexDeleteOrderBroadcastPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getOrigClOrdID, &eurexDeleteOrderBroadcastPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getSecurityID, &eurexDeleteOrderBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getExecID, &eurexDeleteOrderBroadcastPacket::isExecIDValid> (d, ExecID, packet);
    eti::setDouble<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getCumQty, &eurexDeleteOrderBroadcastPacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getCxlQty, &eurexDeleteOrderBroadcastPacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setInteger<int32_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getMarketSegmentID, &eurexDeleteOrderBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getPartyIDEnteringTrader, &eurexDeleteOrderBroadcastPacket::isPartyIDEnteringTraderValid> (d, PartyIDEnteringTrader, packet);
    eti::setInteger<uint32_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getPartyIDSessionID, &eurexDeleteOrderBroadcastPacket::isPartyIDSessionIDValid> (d, PartyIDSessionID, packet);
    eti::setInteger<int16_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getExecRestatementReason, &eurexDeleteOrderBroadcastPacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getPartyIDEnteringFirm, &eurexDeleteOrderBroadcastPacket::isPartyIDEnteringFirmValid> (d, PartyIDEnteringFirm, packet);
    eti::setString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getOrdStatus, &eurexDeleteOrderBroadcastPacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getExecType, &eurexDeleteOrderBroadcastPacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int8_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getProductComplex, &eurexDeleteOrderBroadcastPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getSide, &eurexDeleteOrderBroadcastPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getFIXClOrdID, &eurexDeleteOrderBroadcastPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::getPad1, &eurexDeleteOrderBroadcastPacket::isPad1Valid> (d, Pad1, packet);
}

void
eurexCodec::getDeleteOrderComplexRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderComplexRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteOrderComplexRequest");
    d.setString (MessageName, "DeleteOrderComplexRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getOrderID, &eurexDeleteOrderComplexRequestPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getClOrdID, &eurexDeleteOrderComplexRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getOrigClOrdID, &eurexDeleteOrderComplexRequestPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getSecurityID, &eurexDeleteOrderComplexRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexDeleteOrderComplexRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getExecutingTrader, &eurexDeleteOrderComplexRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getMarketSegmentID, &eurexDeleteOrderComplexRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getTargetPartyIDSessionID, &eurexDeleteOrderComplexRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<int8_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteOrderComplexRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getExecutingTraderQualifier, &eurexDeleteOrderComplexRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getFIXClOrdID, &eurexDeleteOrderComplexRequestPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setString<eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::getPad2, &eurexDeleteOrderComplexRequestPacket::isPad2Valid> (d, Pad2, packet);
}

void
eurexCodec::getDeleteOrderNRResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderNRResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteOrderNRResponse");
    d.setString (MessageName, "DeleteOrderNRResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getOrderID, &eurexDeleteOrderNRResponsePacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getClOrdID, &eurexDeleteOrderNRResponsePacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getOrigClOrdID, &eurexDeleteOrderNRResponsePacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getSecurityID, &eurexDeleteOrderNRResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getExecID, &eurexDeleteOrderNRResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setDouble<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getCumQty, &eurexDeleteOrderNRResponsePacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getCxlQty, &eurexDeleteOrderNRResponsePacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setString<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getOrdStatus, &eurexDeleteOrderNRResponsePacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getExecType, &eurexDeleteOrderNRResponsePacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int16_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getExecRestatementReason, &eurexDeleteOrderNRResponsePacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getProductComplex, &eurexDeleteOrderNRResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getTransactionDelayIndicator, &eurexDeleteOrderNRResponsePacket::isTransactionDelayIndicatorValid> (d, TransactionDelayIndicator, packet);
    eti::setString<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::getPad2, &eurexDeleteOrderNRResponsePacket::isPad2Valid> (d, Pad2, packet);
}

void
eurexCodec::getDeleteOrderResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteOrderResponse");
    d.setString (MessageName, "DeleteOrderResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderMEComp (d, packet.getResponseHeaderME ());
    eti::setInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getOrderID, &eurexDeleteOrderResponsePacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getClOrdID, &eurexDeleteOrderResponsePacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getOrigClOrdID, &eurexDeleteOrderResponsePacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getSecurityID, &eurexDeleteOrderResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getExecID, &eurexDeleteOrderResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setDouble<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getCumQty, &eurexDeleteOrderResponsePacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getCxlQty, &eurexDeleteOrderResponsePacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setString<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getOrdStatus, &eurexDeleteOrderResponsePacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getExecType, &eurexDeleteOrderResponsePacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int16_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getExecRestatementReason, &eurexDeleteOrderResponsePacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getProductComplex, &eurexDeleteOrderResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getTransactionDelayIndicator, &eurexDeleteOrderResponsePacket::isTransactionDelayIndicatorValid> (d, TransactionDelayIndicator, packet);
    eti::setString<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::getPad2, &eurexDeleteOrderResponsePacket::isPad2Valid> (d, Pad2, packet);
}

void
eurexCodec::getDeleteOrderSingleRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderSingleRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteOrderSingleRequest");
    d.setString (MessageName, "DeleteOrderSingleRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getOrderID, &eurexDeleteOrderSingleRequestPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getClOrdID, &eurexDeleteOrderSingleRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getOrigClOrdID, &eurexDeleteOrderSingleRequestPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexDeleteOrderSingleRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getExecutingTrader, &eurexDeleteOrderSingleRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getMarketSegmentID, &eurexDeleteOrderSingleRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getSimpleSecurityID, &eurexDeleteOrderSingleRequestPacket::isSimpleSecurityIDValid> (d, SimpleSecurityID, packet);
    eti::setInteger<uint32_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getTargetPartyIDSessionID, &eurexDeleteOrderSingleRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<int8_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteOrderSingleRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getExecutingTraderQualifier, &eurexDeleteOrderSingleRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getFIXClOrdID, &eurexDeleteOrderSingleRequestPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setString<eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::getPad6, &eurexDeleteOrderSingleRequestPacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getDeleteTESTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexDeleteTESTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize DeleteTESTradeRequest");
    d.setString (MessageName, "DeleteTESTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getPackageID, &eurexDeleteTESTradeRequestPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<int32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getMarketSegmentID, &eurexDeleteTESTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getTESExecID, &eurexDeleteTESTradeRequestPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<int32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getRelatedMarketSegmentID, &eurexDeleteTESTradeRequestPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<int16_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getTrdType, &eurexDeleteTESTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getTradeReportType, &eurexDeleteTESTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setString<eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getTradeReportID, &eurexDeleteTESTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::getPad1, &eurexDeleteTESTradeRequestPacket::isPad1Valid> (d, Pad1, packet);
}

void
eurexCodec::getEnterBasketTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexEnterBasketTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize EnterBasketTradeRequest");
    d.setString (MessageName, "EnterBasketTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getMarketSegmentID, &eurexEnterBasketTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getMaturityMonthYear, &eurexEnterBasketTradeRequestPacket::isMaturityMonthYearValid> (d, MaturityMonthYear, packet);
    eti::setInteger<int16_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getTrdType, &eurexEnterBasketTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getTradeReportType, &eurexEnterBasketTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getBasketTradeReportType, &eurexEnterBasketTradeRequestPacket::isBasketTradeReportTypeValid> (d, BasketTradeReportType, packet);
    eti::setInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getNoBasketRootPartyGrps, &eurexEnterBasketTradeRequestPacket::isNoBasketRootPartyGrpsValid> (d, NoBasketRootPartyGrps, packet);
    eti::setInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getNoInstrmtMatchSides, &eurexEnterBasketTradeRequestPacket::isNoInstrmtMatchSidesValid> (d, NoInstrmtMatchSides, packet);
    eti::setInteger<uint8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getNoBasketSideAlloc, &eurexEnterBasketTradeRequestPacket::isNoBasketSideAllocValid> (d, NoBasketSideAlloc, packet);
    eti::setString<eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getBasketTradeReportText, &eurexEnterBasketTradeRequestPacket::isBasketTradeReportTextValid> (d, BasketTradeReportText, packet);
    eti::setString<eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getTradeReportID, &eurexEnterBasketTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::getPad1, &eurexEnterBasketTradeRequestPacket::isPad1Valid> (d, Pad1, packet);
    const vector<eurexBasketRootPartyGrpCompPacket>& vBasketRootPartyGrp = packet.getBasketRootPartyGrp ();
    for (size_t i = 0; i < vBasketRootPartyGrp.size (); i++)
    {
        cdr c;
        getBasketRootPartyGrpComp (c, vBasketRootPartyGrp[i]);
        d.appendArray (BasketRootPartyGrp, c);
    }
    const vector<eurexInstrmtMatchSideGrpCompPacket>& vInstrmtMatchSideGrp = packet.getInstrmtMatchSideGrp ();
    for (size_t i = 0; i < vInstrmtMatchSideGrp.size (); i++)
    {
        cdr c;
        getInstrmtMatchSideGrpComp (c, vInstrmtMatchSideGrp[i]);
        d.appendArray (InstrmtMatchSideGrp, c);
    }
    const vector<eurexBasketSideAllocGrpCompPacket>& vBasketSideAllocGrp = packet.getBasketSideAllocGrp ();
    for (size_t i = 0; i < vBasketSideAllocGrp.size (); i++)
    {
        cdr c;
        getBasketSideAllocGrpComp (c, vBasketSideAllocGrp[i]);
        d.appendArray (BasketSideAllocGrp, c);
    }
}

void
eurexCodec::getEnterCLIPRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexEnterCLIPRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize EnterCLIPRequest");
    d.setString (MessageName, "EnterCLIPRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getSecurityID, &eurexEnterCLIPRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getPrice, &eurexEnterCLIPRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getOrderQty, &eurexEnterCLIPRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<int32_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getMarketSegmentID, &eurexEnterCLIPRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getCrossID, &eurexEnterCLIPRequestPacket::isCrossIDValid> (d, CrossID, packet);
    eti::setInteger<int32_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getCrossRequestID, &eurexEnterCLIPRequestPacket::isCrossRequestIDValid> (d, CrossRequestID, packet);
    eti::setInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getNoSides, &eurexEnterCLIPRequestPacket::isNoSidesValid> (d, NoSides, packet);
    eti::setInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getNoCrossLegs, &eurexEnterCLIPRequestPacket::isNoCrossLegsValid> (d, NoCrossLegs, packet);
    eti::setInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getSideDisclosureInstruction, &eurexEnterCLIPRequestPacket::isSideDisclosureInstructionValid> (d, SideDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getPriceDisclosureInstruction, &eurexEnterCLIPRequestPacket::isPriceDisclosureInstructionValid> (d, PriceDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getOrderQtyDisclosureInstruction, &eurexEnterCLIPRequestPacket::isOrderQtyDisclosureInstructionValid> (d, OrderQtyDisclosureInstruction, packet);
    eti::setString<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getRootPartyContraFirm, &eurexEnterCLIPRequestPacket::isRootPartyContraFirmValid> (d, RootPartyContraFirm, packet);
    eti::setString<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getRootPartyContraTrader, &eurexEnterCLIPRequestPacket::isRootPartyContraTraderValid> (d, RootPartyContraTrader, packet);
    eti::setString<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::getPad4, &eurexEnterCLIPRequestPacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexCrossRequestSideGrpCompPacket>& vCrossRequestSideGrp = packet.getCrossRequestSideGrp ();
    for (size_t i = 0; i < vCrossRequestSideGrp.size (); i++)
    {
        cdr c;
        getCrossRequestSideGrpComp (c, vCrossRequestSideGrp[i]);
        d.appendArray (CrossRequestSideGrp, c);
    }
    const vector<eurexSideCrossLegGrpCompPacket>& vSideCrossLegGrp = packet.getSideCrossLegGrp ();
    for (size_t i = 0; i < vSideCrossLegGrp.size (); i++)
    {
        cdr c;
        getSideCrossLegGrpComp (c, vSideCrossLegGrp[i]);
        d.appendArray (SideCrossLegGrp, c);
    }
}

void
eurexCodec::getEnterTESTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexEnterTESTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize EnterTESTradeRequest");
    d.setString (MessageName, "EnterTESTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getSecurityID, &eurexEnterTESTradeRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getLastPx, &eurexEnterTESTradeRequestPacket::isLastPxValid> (d, LastPx, packet);
    eti::setInteger<uint64_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getTransBkdTime, &eurexEnterTESTradeRequestPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingPx, &eurexEnterTESTradeRequestPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getRelatedClosePrice, &eurexEnterTESTradeRequestPacket::isRelatedClosePriceValid> (d, RelatedClosePrice, packet);
    eti::setDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getRelatedTradeQuantity, &eurexEnterTESTradeRequestPacket::isRelatedTradeQuantityValid> (d, RelatedTradeQuantity, packet);
    eti::setDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingQty, &eurexEnterTESTradeRequestPacket::isUnderlyingQtyValid> (d, UnderlyingQty, packet);
    eti::setInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getMarketSegmentID, &eurexEnterTESTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingSettlementDate, &eurexEnterTESTradeRequestPacket::isUnderlyingSettlementDateValid> (d, UnderlyingSettlementDate, packet);
    eti::setInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingMaturityDate, &eurexEnterTESTradeRequestPacket::isUnderlyingMaturityDateValid> (d, UnderlyingMaturityDate, packet);
    eti::setInteger<uint32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getRelatedTradeID, &eurexEnterTESTradeRequestPacket::isRelatedTradeIDValid> (d, RelatedTradeID, packet);
    eti::setInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getRelatedMarketSegmentID, &eurexEnterTESTradeRequestPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getNegotiationID, &eurexEnterTESTradeRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getNoSRQSRelatedTradeIDs, &eurexEnterTESTradeRequestPacket::isNoSRQSRelatedTradeIDsValid> (d, NoSRQSRelatedTradeIDs, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getPad1, &eurexEnterTESTradeRequestPacket::isPad1Valid> (d, Pad1, packet);
    eti::setInteger<int16_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getTrdType, &eurexEnterTESTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getProductComplex, &eurexEnterTESTradeRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getTradeReportType, &eurexEnterTESTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getTradePublishIndicator, &eurexEnterTESTradeRequestPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getNoSideAllocs, &eurexEnterTESTradeRequestPacket::isNoSideAllocsValid> (d, NoSideAllocs, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getNoEvents, &eurexEnterTESTradeRequestPacket::isNoEventsValid> (d, NoEvents, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getNoLegs, &eurexEnterTESTradeRequestPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getNoInstrAttrib, &eurexEnterTESTradeRequestPacket::isNoInstrAttribValid> (d, NoInstrAttrib, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getNoUnderlyingStips, &eurexEnterTESTradeRequestPacket::isNoUnderlyingStipsValid> (d, NoUnderlyingStips, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getPartyIDSettlementLocation, &eurexEnterTESTradeRequestPacket::isPartyIDSettlementLocationValid> (d, PartyIDSettlementLocation, packet);
    eti::setInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getHedgeType, &eurexEnterTESTradeRequestPacket::isHedgeTypeValid> (d, HedgeType, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getTradeReportText, &eurexEnterTESTradeRequestPacket::isTradeReportTextValid> (d, TradeReportText, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getTradeReportID, &eurexEnterTESTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingSecurityID, &eurexEnterTESTradeRequestPacket::isUnderlyingSecurityIDValid> (d, UnderlyingSecurityID, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingSecurityDesc, &eurexEnterTESTradeRequestPacket::isUnderlyingSecurityDescValid> (d, UnderlyingSecurityDesc, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingCurrency, &eurexEnterTESTradeRequestPacket::isUnderlyingCurrencyValid> (d, UnderlyingCurrency, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getUnderlyingIssuer, &eurexEnterTESTradeRequestPacket::isUnderlyingIssuerValid> (d, UnderlyingIssuer, packet);
    eti::setString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::getPad7, &eurexEnterTESTradeRequestPacket::isPad7Valid> (d, Pad7, packet);
    const vector<eurexSideAllocGrpCompPacket>& vSideAllocGrp = packet.getSideAllocGrp ();
    for (size_t i = 0; i < vSideAllocGrp.size (); i++)
    {
        cdr c;
        getSideAllocGrpComp (c, vSideAllocGrp[i]);
        d.appendArray (SideAllocGrp, c);
    }
    const vector<eurexTrdInstrmntLegGrpCompPacket>& vTrdInstrmntLegGrp = packet.getTrdInstrmntLegGrp ();
    for (size_t i = 0; i < vTrdInstrmntLegGrp.size (); i++)
    {
        cdr c;
        getTrdInstrmntLegGrpComp (c, vTrdInstrmntLegGrp[i]);
        d.appendArray (TrdInstrmntLegGrp, c);
    }
    const vector<eurexInstrumentEventGrpCompPacket>& vInstrumentEventGrp = packet.getInstrumentEventGrp ();
    for (size_t i = 0; i < vInstrumentEventGrp.size (); i++)
    {
        cdr c;
        getInstrumentEventGrpComp (c, vInstrumentEventGrp[i]);
        d.appendArray (InstrumentEventGrp, c);
    }
    const vector<eurexInstrumentAttributeGrpCompPacket>& vInstrumentAttributeGrp = packet.getInstrumentAttributeGrp ();
    for (size_t i = 0; i < vInstrumentAttributeGrp.size (); i++)
    {
        cdr c;
        getInstrumentAttributeGrpComp (c, vInstrumentAttributeGrp[i]);
        d.appendArray (InstrumentAttributeGrp, c);
    }
    getUnderlyingStipGrpComp (d, packet.getUnderlyingStipGrp ());
    const vector<eurexSRQSRelatedTradeIDGrpCompPacket>& vSRQSRelatedTradeIDGrp = packet.getSRQSRelatedTradeIDGrp ();
    for (size_t i = 0; i < vSRQSRelatedTradeIDGrp.size (); i++)
    {
        cdr c;
        getSRQSRelatedTradeIDGrpComp (c, vSRQSRelatedTradeIDGrp[i]);
        d.appendArray (SRQSRelatedTradeIDGrp, c);
    }
}

void
eurexCodec::getForcedLogoutNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexForcedLogoutNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ForcedLogoutNotification");
    d.setString (MessageName, "ForcedLogoutNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNotifHeaderComp (d, packet.getNotifHeader ());
    eti::setInteger<int16_t, eurexForcedLogoutNotificationPacket, &eurexForcedLogoutNotificationPacket::getVarTextLen, &eurexForcedLogoutNotificationPacket::isVarTextLenValid> (d, VarTextLen, packet);
    eti::setString<eurexForcedLogoutNotificationPacket, &eurexForcedLogoutNotificationPacket::getPad6, &eurexForcedLogoutNotificationPacket::isPad6Valid> (d, Pad6, packet);
    eti::setString<eurexForcedLogoutNotificationPacket, &eurexForcedLogoutNotificationPacket::getVarText, &eurexForcedLogoutNotificationPacket::isVarTextValid> (d, VarText, packet);
}

void
eurexCodec::getForcedUserLogoutNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexForcedUserLogoutNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ForcedUserLogoutNotification");
    d.setString (MessageName, "ForcedUserLogoutNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNotifHeaderComp (d, packet.getNotifHeader ());
    eti::setInteger<int8_t, eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::getUserStatus, &eurexForcedUserLogoutNotificationPacket::isUserStatusValid> (d, UserStatus, packet);
    eti::setString<eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::getPad3, &eurexForcedUserLogoutNotificationPacket::isPad3Valid> (d, Pad3, packet);
    eti::setInteger<int32_t, eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::getUsername, &eurexForcedUserLogoutNotificationPacket::isUsernameValid> (d, Username, packet);
    eti::setInteger<int16_t, eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::getVarTextLen, &eurexForcedUserLogoutNotificationPacket::isVarTextLenValid> (d, VarTextLen, packet);
    eti::setString<eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::getPad6, &eurexForcedUserLogoutNotificationPacket::isPad6Valid> (d, Pad6, packet);
    eti::setString<eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::getVarText, &eurexForcedUserLogoutNotificationPacket::isVarTextValid> (d, VarText, packet);
}

void
eurexCodec::getHeartbeat (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexHeartbeatPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize Heartbeat");
    d.setString (MessageName, "Heartbeat");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
}

void
eurexCodec::getHeartbeatNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexHeartbeatNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize HeartbeatNotification");
    d.setString (MessageName, "HeartbeatNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNotifHeaderComp (d, packet.getNotifHeader ());
}

void
eurexCodec::getInquireEnrichmentRuleIDListRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireEnrichmentRuleIDListRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireEnrichmentRuleIDListRequest");
    d.setString (MessageName, "InquireEnrichmentRuleIDListRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setString<eurexInquireEnrichmentRuleIDListRequestPacket, &eurexInquireEnrichmentRuleIDListRequestPacket::getLastEntityProcessed, &eurexInquireEnrichmentRuleIDListRequestPacket::isLastEntityProcessedValid> (d, LastEntityProcessed, packet);
}

void
eurexCodec::getInquireEnrichmentRuleIDListResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireEnrichmentRuleIDListResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireEnrichmentRuleIDListResponse");
    d.setString (MessageName, "InquireEnrichmentRuleIDListResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setString<eurexInquireEnrichmentRuleIDListResponsePacket, &eurexInquireEnrichmentRuleIDListResponsePacket::getLastEntityProcessed, &eurexInquireEnrichmentRuleIDListResponsePacket::isLastEntityProcessedValid> (d, LastEntityProcessed, packet);
    eti::setInteger<int16_t, eurexInquireEnrichmentRuleIDListResponsePacket, &eurexInquireEnrichmentRuleIDListResponsePacket::getNoEnrichmentRules, &eurexInquireEnrichmentRuleIDListResponsePacket::isNoEnrichmentRulesValid> (d, NoEnrichmentRules, packet);
    eti::setString<eurexInquireEnrichmentRuleIDListResponsePacket, &eurexInquireEnrichmentRuleIDListResponsePacket::getPad6, &eurexInquireEnrichmentRuleIDListResponsePacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexEnrichmentRulesGrpCompPacket>& vEnrichmentRulesGrp = packet.getEnrichmentRulesGrp ();
    for (size_t i = 0; i < vEnrichmentRulesGrp.size (); i++)
    {
        cdr c;
        getEnrichmentRulesGrpComp (c, vEnrichmentRulesGrp[i]);
        d.appendArray (EnrichmentRulesGrp, c);
    }
}

void
eurexCodec::getInquireMMParameterRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireMMParameterRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireMMParameterRequest");
    d.setString (MessageName, "InquireMMParameterRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexInquireMMParameterRequestPacket, &eurexInquireMMParameterRequestPacket::getMarketSegmentID, &eurexInquireMMParameterRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexInquireMMParameterRequestPacket, &eurexInquireMMParameterRequestPacket::getTargetPartyIDSessionID, &eurexInquireMMParameterRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
}

void
eurexCodec::getInquireMMParameterResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireMMParameterResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireMMParameterResponse");
    d.setString (MessageName, "InquireMMParameterResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::getMMParameterReportID, &eurexInquireMMParameterResponsePacket::isMMParameterReportIDValid> (d, MMParameterReportID, packet);
    eti::setInteger<int32_t, eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::getMarketSegmentID, &eurexInquireMMParameterResponsePacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::getNoMMParameters, &eurexInquireMMParameterResponsePacket::isNoMMParametersValid> (d, NoMMParameters, packet);
    eti::setString<eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::getPad3, &eurexInquireMMParameterResponsePacket::isPad3Valid> (d, Pad3, packet);
    const vector<eurexMMParameterGrpCompPacket>& vMMParameterGrp = packet.getMMParameterGrp ();
    for (size_t i = 0; i < vMMParameterGrp.size (); i++)
    {
        cdr c;
        getMMParameterGrpComp (c, vMMParameterGrp[i]);
        d.appendArray (MMParameterGrp, c);
    }
}

void
eurexCodec::getInquirePreTradeRiskLimitsRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquirePreTradeRiskLimitsRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquirePreTradeRiskLimitsRequest");
    d.setString (MessageName, "InquirePreTradeRiskLimitsRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::getMarketSegmentID, &eurexInquirePreTradeRiskLimitsRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::getRiskLimitPlatform, &eurexInquirePreTradeRiskLimitsRequestPacket::isRiskLimitPlatformValid> (d, RiskLimitPlatform, packet);
    eti::setString<eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::getPartyExecutingUnit, &eurexInquirePreTradeRiskLimitsRequestPacket::isPartyExecutingUnitValid> (d, PartyExecutingUnit, packet);
    eti::setString<eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::getRiskLimitGroup, &eurexInquirePreTradeRiskLimitsRequestPacket::isRiskLimitGroupValid> (d, RiskLimitGroup, packet);
    eti::setString<eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::getPad3, &eurexInquirePreTradeRiskLimitsRequestPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getInquireSessionListRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireSessionListRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireSessionListRequest");
    d.setString (MessageName, "InquireSessionListRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
}

void
eurexCodec::getInquireSessionListResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireSessionListResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireSessionListResponse");
    d.setString (MessageName, "InquireSessionListResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<int16_t, eurexInquireSessionListResponsePacket, &eurexInquireSessionListResponsePacket::getNoSessions, &eurexInquireSessionListResponsePacket::isNoSessionsValid> (d, NoSessions, packet);
    eti::setString<eurexInquireSessionListResponsePacket, &eurexInquireSessionListResponsePacket::getPad6, &eurexInquireSessionListResponsePacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexSessionsGrpCompPacket>& vSessionsGrp = packet.getSessionsGrp ();
    for (size_t i = 0; i < vSessionsGrp.size (); i++)
    {
        cdr c;
        getSessionsGrpComp (c, vSessionsGrp[i]);
        d.appendArray (SessionsGrp, c);
    }
}

void
eurexCodec::getInquireUserRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireUserRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireUserRequest");
    d.setString (MessageName, "InquireUserRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setString<eurexInquireUserRequestPacket, &eurexInquireUserRequestPacket::getLastEntityProcessed, &eurexInquireUserRequestPacket::isLastEntityProcessedValid> (d, LastEntityProcessed, packet);
}

void
eurexCodec::getInquireUserResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexInquireUserResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize InquireUserResponse");
    d.setString (MessageName, "InquireUserResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setString<eurexInquireUserResponsePacket, &eurexInquireUserResponsePacket::getLastEntityProcessed, &eurexInquireUserResponsePacket::isLastEntityProcessedValid> (d, LastEntityProcessed, packet);
    eti::setInteger<int16_t, eurexInquireUserResponsePacket, &eurexInquireUserResponsePacket::getNoPartyDetails, &eurexInquireUserResponsePacket::isNoPartyDetailsValid> (d, NoPartyDetails, packet);
    eti::setString<eurexInquireUserResponsePacket, &eurexInquireUserResponsePacket::getPad6, &eurexInquireUserResponsePacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexPartyDetailsGrpCompPacket>& vPartyDetailsGrp = packet.getPartyDetailsGrp ();
    for (size_t i = 0; i < vPartyDetailsGrp.size (); i++)
    {
        cdr c;
        getPartyDetailsGrpComp (c, vPartyDetailsGrp[i]);
        d.appendArray (PartyDetailsGrp, c);
    }
}

void
eurexCodec::getLegalNotificationBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexLegalNotificationBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize LegalNotificationBroadcast");
    d.setString (MessageName, "LegalNotificationBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::getTransactTime, &eurexLegalNotificationBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int16_t, eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::getVarTextLen, &eurexLegalNotificationBroadcastPacket::isVarTextLenValid> (d, VarTextLen, packet);
    eti::setInteger<int8_t, eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::getUserStatus, &eurexLegalNotificationBroadcastPacket::isUserStatusValid> (d, UserStatus, packet);
    eti::setString<eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::getPad5, &eurexLegalNotificationBroadcastPacket::isPad5Valid> (d, Pad5, packet);
    eti::setString<eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::getVarText, &eurexLegalNotificationBroadcastPacket::isVarTextValid> (d, VarText, packet);
}

void
eurexCodec::getLogonRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexLogonRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize LogonRequest");
    d.setString (MessageName, "LogonRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint32_t, eurexLogonRequestPacket, &eurexLogonRequestPacket::getHeartBtInt, &eurexLogonRequestPacket::isHeartBtIntValid> (d, HeartBtInt, packet);
    eti::setInteger<uint32_t, eurexLogonRequestPacket, &eurexLogonRequestPacket::getPartyIDSessionID, &eurexLogonRequestPacket::isPartyIDSessionIDValid> (d, PartyIDSessionID, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getDefaultCstmApplVerID, &eurexLogonRequestPacket::isDefaultCstmApplVerIDValid> (d, DefaultCstmApplVerID, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getPassword, &eurexLogonRequestPacket::isPasswordValid> (d, Password, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getApplUsageOrders, &eurexLogonRequestPacket::isApplUsageOrdersValid> (d, ApplUsageOrders, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getApplUsageQuotes, &eurexLogonRequestPacket::isApplUsageQuotesValid> (d, ApplUsageQuotes, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getOrderRoutingIndicator, &eurexLogonRequestPacket::isOrderRoutingIndicatorValid> (d, OrderRoutingIndicator, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getFIXEngineName, &eurexLogonRequestPacket::isFIXEngineNameValid> (d, FIXEngineName, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getFIXEngineVersion, &eurexLogonRequestPacket::isFIXEngineVersionValid> (d, FIXEngineVersion, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getFIXEngineVendor, &eurexLogonRequestPacket::isFIXEngineVendorValid> (d, FIXEngineVendor, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getApplicationSystemName, &eurexLogonRequestPacket::isApplicationSystemNameValid> (d, ApplicationSystemName, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getApplicationSystemVersion, &eurexLogonRequestPacket::isApplicationSystemVersionValid> (d, ApplicationSystemVersion, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getApplicationSystemVendor, &eurexLogonRequestPacket::isApplicationSystemVendorValid> (d, ApplicationSystemVendor, packet);
    eti::setString<eurexLogonRequestPacket, &eurexLogonRequestPacket::getPad3, &eurexLogonRequestPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getLogonResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexLogonResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize LogonResponse");
    d.setString (MessageName, "LogonResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<int64_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::getThrottleTimeInterval, &eurexLogonResponsePacket::isThrottleTimeIntervalValid> (d, ThrottleTimeInterval, packet);
    eti::setInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::getThrottleNoMsgs, &eurexLogonResponsePacket::isThrottleNoMsgsValid> (d, ThrottleNoMsgs, packet);
    eti::setInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::getThrottleDisconnectLimit, &eurexLogonResponsePacket::isThrottleDisconnectLimitValid> (d, ThrottleDisconnectLimit, packet);
    eti::setInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::getHeartBtInt, &eurexLogonResponsePacket::isHeartBtIntValid> (d, HeartBtInt, packet);
    eti::setInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::getSessionInstanceID, &eurexLogonResponsePacket::isSessionInstanceIDValid> (d, SessionInstanceID, packet);
    eti::setInteger<int16_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::getMarketID, &eurexLogonResponsePacket::isMarketIDValid> (d, MarketID, packet);
    eti::setInteger<int8_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::getTradSesMode, &eurexLogonResponsePacket::isTradSesModeValid> (d, TradSesMode, packet);
    eti::setString<eurexLogonResponsePacket, &eurexLogonResponsePacket::getDefaultCstmApplVerID, &eurexLogonResponsePacket::isDefaultCstmApplVerIDValid> (d, DefaultCstmApplVerID, packet);
    eti::setString<eurexLogonResponsePacket, &eurexLogonResponsePacket::getDefaultCstmApplVerSubID, &eurexLogonResponsePacket::isDefaultCstmApplVerSubIDValid> (d, DefaultCstmApplVerSubID, packet);
    eti::setString<eurexLogonResponsePacket, &eurexLogonResponsePacket::getPad2, &eurexLogonResponsePacket::isPad2Valid> (d, Pad2, packet);
}

void
eurexCodec::getLogoutRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexLogoutRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize LogoutRequest");
    d.setString (MessageName, "LogoutRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
}

void
eurexCodec::getLogoutResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexLogoutResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize LogoutResponse");
    d.setString (MessageName, "LogoutResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
}

void
eurexCodec::getMMParameterDefinitionRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexMMParameterDefinitionRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize MMParameterDefinitionRequest");
    d.setString (MessageName, "MMParameterDefinitionRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getExposureDuration, &eurexMMParameterDefinitionRequestPacket::isExposureDurationValid> (d, ExposureDuration, packet);
    eti::setDouble<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getCumQty, &eurexMMParameterDefinitionRequestPacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getDelta, &eurexMMParameterDefinitionRequestPacket::isDeltaValid> (d, Delta, packet);
    eti::setDouble<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getVega, &eurexMMParameterDefinitionRequestPacket::isVegaValid> (d, Vega, packet);
    eti::setInteger<int32_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getMarketSegmentID, &eurexMMParameterDefinitionRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getTargetPartyIDSessionID, &eurexMMParameterDefinitionRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<int32_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getPctCount, &eurexMMParameterDefinitionRequestPacket::isPctCountValid> (d, PctCount, packet);
    eti::setString<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::getPad4, &eurexMMParameterDefinitionRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getMMParameterDefinitionResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexMMParameterDefinitionResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize MMParameterDefinitionResponse");
    d.setString (MessageName, "MMParameterDefinitionResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexMMParameterDefinitionResponsePacket, &eurexMMParameterDefinitionResponsePacket::getExecID, &eurexMMParameterDefinitionResponsePacket::isExecIDValid> (d, ExecID, packet);
}

void
eurexCodec::getMassQuoteRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexMassQuoteRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize MassQuoteRequest");
    d.setString (MessageName, "MassQuoteRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getQuoteID, &eurexMassQuoteRequestPacket::isQuoteIDValid> (d, QuoteID, packet);
    eti::setInteger<uint64_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexMassQuoteRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getExecutingTrader, &eurexMassQuoteRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getMarketSegmentID, &eurexMassQuoteRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getMatchInstCrossID, &eurexMassQuoteRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<int16_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getEnrichmentRuleID, &eurexMassQuoteRequestPacket::isEnrichmentRuleIDValid> (d, EnrichmentRuleID, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getPriceValidityCheckType, &eurexMassQuoteRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getValueCheckTypeValue, &eurexMassQuoteRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getQuoteSizeType, &eurexMassQuoteRequestPacket::isQuoteSizeTypeValid> (d, QuoteSizeType, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getQuoteType, &eurexMassQuoteRequestPacket::isQuoteTypeValid> (d, QuoteType, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getOrderAttributeLiquidityProvision, &eurexMassQuoteRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getNoQuoteEntries, &eurexMassQuoteRequestPacket::isNoQuoteEntriesValid> (d, NoQuoteEntries, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexMassQuoteRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getExecutingTraderQualifier, &eurexMassQuoteRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::getPad6, &eurexMassQuoteRequestPacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexQuoteEntryGrpCompPacket>& vQuoteEntryGrp = packet.getQuoteEntryGrp ();
    for (size_t i = 0; i < vQuoteEntryGrp.size (); i++)
    {
        cdr c;
        getQuoteEntryGrpComp (c, vQuoteEntryGrp[i]);
        d.appendArray (QuoteEntryGrp, c);
    }
}

void
eurexCodec::getMassQuoteResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexMassQuoteResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize MassQuoteResponse");
    d.setString (MessageName, "MassQuoteResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::getQuoteID, &eurexMassQuoteResponsePacket::isQuoteIDValid> (d, QuoteID, packet);
    eti::setInteger<uint64_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::getQuoteResponseID, &eurexMassQuoteResponsePacket::isQuoteResponseIDValid> (d, QuoteResponseID, packet);
    eti::setInteger<int32_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::getMarketSegmentID, &eurexMassQuoteResponsePacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::getNoQuoteEntries, &eurexMassQuoteResponsePacket::isNoQuoteEntriesValid> (d, NoQuoteEntries, packet);
    eti::setString<eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::getPad3, &eurexMassQuoteResponsePacket::isPad3Valid> (d, Pad3, packet);
    const vector<eurexQuoteEntryAckGrpCompPacket>& vQuoteEntryAckGrp = packet.getQuoteEntryAckGrp ();
    for (size_t i = 0; i < vQuoteEntryAckGrp.size (); i++)
    {
        cdr c;
        getQuoteEntryAckGrpComp (c, vQuoteEntryAckGrp[i]);
        d.appendArray (QuoteEntryAckGrp, c);
    }
}

void
eurexCodec::getModifyBasketTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyBasketTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyBasketTradeRequest");
    d.setString (MessageName, "ModifyBasketTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getBasketTrdMatchID, &eurexModifyBasketTradeRequestPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint32_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getBasketExecID, &eurexModifyBasketTradeRequestPacket::isBasketExecIDValid> (d, BasketExecID, packet);
    eti::setInteger<int32_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getMarketSegmentID, &eurexModifyBasketTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getMaturityMonthYear, &eurexModifyBasketTradeRequestPacket::isMaturityMonthYearValid> (d, MaturityMonthYear, packet);
    eti::setInteger<int16_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getTrdType, &eurexModifyBasketTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getTradeReportType, &eurexModifyBasketTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getNoBasketRootPartyGrps, &eurexModifyBasketTradeRequestPacket::isNoBasketRootPartyGrpsValid> (d, NoBasketRootPartyGrps, packet);
    eti::setInteger<int8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getNoInstrmtMatchSides, &eurexModifyBasketTradeRequestPacket::isNoInstrmtMatchSidesValid> (d, NoInstrmtMatchSides, packet);
    eti::setInteger<uint8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getNoBasketSideAlloc, &eurexModifyBasketTradeRequestPacket::isNoBasketSideAllocValid> (d, NoBasketSideAlloc, packet);
    eti::setString<eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getBasketTradeReportText, &eurexModifyBasketTradeRequestPacket::isBasketTradeReportTextValid> (d, BasketTradeReportText, packet);
    eti::setString<eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getTradeReportID, &eurexModifyBasketTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::getPad6, &eurexModifyBasketTradeRequestPacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexBasketRootPartyGrpCompPacket>& vBasketRootPartyGrp = packet.getBasketRootPartyGrp ();
    for (size_t i = 0; i < vBasketRootPartyGrp.size (); i++)
    {
        cdr c;
        getBasketRootPartyGrpComp (c, vBasketRootPartyGrp[i]);
        d.appendArray (BasketRootPartyGrp, c);
    }
    const vector<eurexInstrmtMatchSideGrpCompPacket>& vInstrmtMatchSideGrp = packet.getInstrmtMatchSideGrp ();
    for (size_t i = 0; i < vInstrmtMatchSideGrp.size (); i++)
    {
        cdr c;
        getInstrmtMatchSideGrpComp (c, vInstrmtMatchSideGrp[i]);
        d.appendArray (InstrmtMatchSideGrp, c);
    }
    const vector<eurexBasketSideAllocGrpCompPacket>& vBasketSideAllocGrp = packet.getBasketSideAllocGrp ();
    for (size_t i = 0; i < vBasketSideAllocGrp.size (); i++)
    {
        cdr c;
        getBasketSideAllocGrpComp (c, vBasketSideAllocGrp[i]);
        d.appendArray (BasketSideAllocGrp, c);
    }
}

void
eurexCodec::getModifyOrderComplexRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyOrderComplexRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyOrderComplexRequest");
    d.setString (MessageName, "ModifyOrderComplexRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getOrderID, &eurexModifyOrderComplexRequestPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getClOrdID, &eurexModifyOrderComplexRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getOrigClOrdID, &eurexModifyOrderComplexRequestPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getSecurityID, &eurexModifyOrderComplexRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPrice, &eurexModifyOrderComplexRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getOrderQty, &eurexModifyOrderComplexRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIDClientID, &eurexModifyOrderComplexRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexModifyOrderComplexRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getExecutingTrader, &eurexModifyOrderComplexRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getMarketSegmentID, &eurexModifyOrderComplexRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getExpireDate, &eurexModifyOrderComplexRequestPacket::isExpireDateValid> (d, ExpireDate, packet);
    eti::setInteger<uint32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getMatchInstCrossID, &eurexModifyOrderComplexRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<uint32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getTargetPartyIDSessionID, &eurexModifyOrderComplexRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIDTakeUpTradingFirm, &eurexModifyOrderComplexRequestPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIDOrderOriginationFirm, &eurexModifyOrderComplexRequestPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIDBeneficiary, &eurexModifyOrderComplexRequestPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getApplSeqIndicator, &eurexModifyOrderComplexRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getProductComplex, &eurexModifyOrderComplexRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getSide, &eurexModifyOrderComplexRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getOrdType, &eurexModifyOrderComplexRequestPacket::isOrdTypeValid> (d, OrdType, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPriceValidityCheckType, &eurexModifyOrderComplexRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getValueCheckTypeValue, &eurexModifyOrderComplexRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getOrderAttributeLiquidityProvision, &eurexModifyOrderComplexRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getExecInst, &eurexModifyOrderComplexRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getTimeInForce, &eurexModifyOrderComplexRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getTradingCapacity, &eurexModifyOrderComplexRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getOwnershipIndicator, &eurexModifyOrderComplexRequestPacket::isOwnershipIndicatorValid> (d, OwnershipIndicator, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderComplexRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getExecutingTraderQualifier, &eurexModifyOrderComplexRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIDLocationID, &eurexModifyOrderComplexRequestPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getCustOrderHandlingInst, &eurexModifyOrderComplexRequestPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getComplianceText, &eurexModifyOrderComplexRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPartyIDPositionAccount, &eurexModifyOrderComplexRequestPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getFreeText1, &eurexModifyOrderComplexRequestPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getFreeText2, &eurexModifyOrderComplexRequestPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getFreeText3, &eurexModifyOrderComplexRequestPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getFIXClOrdID, &eurexModifyOrderComplexRequestPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getNoLegs, &eurexModifyOrderComplexRequestPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::getPad6, &eurexModifyOrderComplexRequestPacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexLegOrdGrpCompPacket>& vLegOrdGrp = packet.getLegOrdGrp ();
    for (size_t i = 0; i < vLegOrdGrp.size (); i++)
    {
        cdr c;
        getLegOrdGrpComp (c, vLegOrdGrp[i]);
        d.appendArray (LegOrdGrp, c);
    }
}

void
eurexCodec::getModifyOrderComplexShortRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyOrderComplexShortRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyOrderComplexShortRequest");
    d.setString (MessageName, "ModifyOrderComplexShortRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getClOrdID, &eurexModifyOrderComplexShortRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getOrigClOrdID, &eurexModifyOrderComplexShortRequestPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getSecurityID, &eurexModifyOrderComplexShortRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getPrice, &eurexModifyOrderComplexShortRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getOrderQty, &eurexModifyOrderComplexShortRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getPartyIDClientID, &eurexModifyOrderComplexShortRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexModifyOrderComplexShortRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getExecutingTrader, &eurexModifyOrderComplexShortRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getMarketSegmentID, &eurexModifyOrderComplexShortRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getMatchInstCrossID, &eurexModifyOrderComplexShortRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<int16_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getEnrichmentRuleID, &eurexModifyOrderComplexShortRequestPacket::isEnrichmentRuleIDValid> (d, EnrichmentRuleID, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getApplSeqIndicator, &eurexModifyOrderComplexShortRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getProductComplex, &eurexModifyOrderComplexShortRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getSide, &eurexModifyOrderComplexShortRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getPriceValidityCheckType, &eurexModifyOrderComplexShortRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getValueCheckTypeValue, &eurexModifyOrderComplexShortRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getOrderAttributeLiquidityProvision, &eurexModifyOrderComplexShortRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getExecInst, &eurexModifyOrderComplexShortRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getTimeInForce, &eurexModifyOrderComplexShortRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getTradingCapacity, &eurexModifyOrderComplexShortRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderComplexShortRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getExecutingTraderQualifier, &eurexModifyOrderComplexShortRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::getPad3, &eurexModifyOrderComplexShortRequestPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getModifyOrderNRResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyOrderNRResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyOrderNRResponse");
    d.setString (MessageName, "ModifyOrderNRResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getOrderID, &eurexModifyOrderNRResponsePacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getClOrdID, &eurexModifyOrderNRResponsePacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getOrigClOrdID, &eurexModifyOrderNRResponsePacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getSecurityID, &eurexModifyOrderNRResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getExecID, &eurexModifyOrderNRResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setDouble<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getLeavesQty, &eurexModifyOrderNRResponsePacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getCumQty, &eurexModifyOrderNRResponsePacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getCxlQty, &eurexModifyOrderNRResponsePacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setString<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getOrdStatus, &eurexModifyOrderNRResponsePacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getExecType, &eurexModifyOrderNRResponsePacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int16_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getExecRestatementReason, &eurexModifyOrderNRResponsePacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getCrossedIndicator, &eurexModifyOrderNRResponsePacket::isCrossedIndicatorValid> (d, CrossedIndicator, packet);
    eti::setInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getProductComplex, &eurexModifyOrderNRResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getTriggered, &eurexModifyOrderNRResponsePacket::isTriggeredValid> (d, Triggered, packet);
    eti::setInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::getTransactionDelayIndicator, &eurexModifyOrderNRResponsePacket::isTransactionDelayIndicatorValid> (d, TransactionDelayIndicator, packet);
}

void
eurexCodec::getModifyOrderResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyOrderResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyOrderResponse");
    d.setString (MessageName, "ModifyOrderResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderMEComp (d, packet.getResponseHeaderME ());
    eti::setInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getOrderID, &eurexModifyOrderResponsePacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getClOrdID, &eurexModifyOrderResponsePacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getOrigClOrdID, &eurexModifyOrderResponsePacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getSecurityID, &eurexModifyOrderResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getExecID, &eurexModifyOrderResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setDouble<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getLeavesQty, &eurexModifyOrderResponsePacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getCumQty, &eurexModifyOrderResponsePacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getCxlQty, &eurexModifyOrderResponsePacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getTrdRegTSTimePriority, &eurexModifyOrderResponsePacket::isTrdRegTSTimePriorityValid> (d, TrdRegTSTimePriority, packet);
    eti::setString<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getOrdStatus, &eurexModifyOrderResponsePacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getExecType, &eurexModifyOrderResponsePacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int16_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getExecRestatementReason, &eurexModifyOrderResponsePacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getCrossedIndicator, &eurexModifyOrderResponsePacket::isCrossedIndicatorValid> (d, CrossedIndicator, packet);
    eti::setInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getProductComplex, &eurexModifyOrderResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getTriggered, &eurexModifyOrderResponsePacket::isTriggeredValid> (d, Triggered, packet);
    eti::setInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::getTransactionDelayIndicator, &eurexModifyOrderResponsePacket::isTransactionDelayIndicatorValid> (d, TransactionDelayIndicator, packet);
}

void
eurexCodec::getModifyOrderSingleRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyOrderSingleRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyOrderSingleRequest");
    d.setString (MessageName, "ModifyOrderSingleRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getOrderID, &eurexModifyOrderSingleRequestPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getClOrdID, &eurexModifyOrderSingleRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getOrigClOrdID, &eurexModifyOrderSingleRequestPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setDouble<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPrice, &eurexModifyOrderSingleRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getOrderQty, &eurexModifyOrderSingleRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setDouble<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getStopPx, &eurexModifyOrderSingleRequestPacket::isStopPxValid> (d, StopPx, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIDClientID, &eurexModifyOrderSingleRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexModifyOrderSingleRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getExecutingTrader, &eurexModifyOrderSingleRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getExpireDate, &eurexModifyOrderSingleRequestPacket::isExpireDateValid> (d, ExpireDate, packet);
    eti::setInteger<int32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getMarketSegmentID, &eurexModifyOrderSingleRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getSimpleSecurityID, &eurexModifyOrderSingleRequestPacket::isSimpleSecurityIDValid> (d, SimpleSecurityID, packet);
    eti::setInteger<uint32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getMatchInstCrossID, &eurexModifyOrderSingleRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<uint32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getTargetPartyIDSessionID, &eurexModifyOrderSingleRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIDTakeUpTradingFirm, &eurexModifyOrderSingleRequestPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIDOrderOriginationFirm, &eurexModifyOrderSingleRequestPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIDBeneficiary, &eurexModifyOrderSingleRequestPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getApplSeqIndicator, &eurexModifyOrderSingleRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getSide, &eurexModifyOrderSingleRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getOrdType, &eurexModifyOrderSingleRequestPacket::isOrdTypeValid> (d, OrdType, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPriceValidityCheckType, &eurexModifyOrderSingleRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getValueCheckTypeValue, &eurexModifyOrderSingleRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getOrderAttributeLiquidityProvision, &eurexModifyOrderSingleRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getTimeInForce, &eurexModifyOrderSingleRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getExecInst, &eurexModifyOrderSingleRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getTradingSessionSubID, &eurexModifyOrderSingleRequestPacket::isTradingSessionSubIDValid> (d, TradingSessionSubID, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getTradingCapacity, &eurexModifyOrderSingleRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderSingleRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getExecutingTraderQualifier, &eurexModifyOrderSingleRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getAccount, &eurexModifyOrderSingleRequestPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIDPositionAccount, &eurexModifyOrderSingleRequestPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPositionEffect, &eurexModifyOrderSingleRequestPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getOwnershipIndicator, &eurexModifyOrderSingleRequestPacket::isOwnershipIndicatorValid> (d, OwnershipIndicator, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getPartyIDLocationID, &eurexModifyOrderSingleRequestPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getCustOrderHandlingInst, &eurexModifyOrderSingleRequestPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getComplianceText, &eurexModifyOrderSingleRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getFreeText1, &eurexModifyOrderSingleRequestPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getFreeText2, &eurexModifyOrderSingleRequestPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getFreeText3, &eurexModifyOrderSingleRequestPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::getFIXClOrdID, &eurexModifyOrderSingleRequestPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
}

void
eurexCodec::getModifyOrderSingleShortRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyOrderSingleShortRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyOrderSingleShortRequest");
    d.setString (MessageName, "ModifyOrderSingleShortRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getClOrdID, &eurexModifyOrderSingleShortRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getOrigClOrdID, &eurexModifyOrderSingleShortRequestPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setDouble<eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getPrice, &eurexModifyOrderSingleShortRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getOrderQty, &eurexModifyOrderSingleShortRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getPartyIDClientID, &eurexModifyOrderSingleShortRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexModifyOrderSingleShortRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getExecutingTrader, &eurexModifyOrderSingleShortRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getSimpleSecurityID, &eurexModifyOrderSingleShortRequestPacket::isSimpleSecurityIDValid> (d, SimpleSecurityID, packet);
    eti::setInteger<uint32_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getMatchInstCrossID, &eurexModifyOrderSingleShortRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<int16_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getEnrichmentRuleID, &eurexModifyOrderSingleShortRequestPacket::isEnrichmentRuleIDValid> (d, EnrichmentRuleID, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getSide, &eurexModifyOrderSingleShortRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getPriceValidityCheckType, &eurexModifyOrderSingleShortRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getValueCheckTypeValue, &eurexModifyOrderSingleShortRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getOrderAttributeLiquidityProvision, &eurexModifyOrderSingleShortRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getTimeInForce, &eurexModifyOrderSingleShortRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getApplSeqIndicator, &eurexModifyOrderSingleShortRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getExecInst, &eurexModifyOrderSingleShortRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getTradingCapacity, &eurexModifyOrderSingleShortRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderSingleShortRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getExecutingTraderQualifier, &eurexModifyOrderSingleShortRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::getPad4, &eurexModifyOrderSingleShortRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getModifyTESTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexModifyTESTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ModifyTESTradeRequest");
    d.setString (MessageName, "ModifyTESTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setDouble<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getLastPx, &eurexModifyTESTradeRequestPacket::isLastPxValid> (d, LastPx, packet);
    eti::setInteger<uint64_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getTransBkdTime, &eurexModifyTESTradeRequestPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setInteger<int32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getMarketSegmentID, &eurexModifyTESTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getPackageID, &eurexModifyTESTradeRequestPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<uint32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getTESExecID, &eurexModifyTESTradeRequestPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<int32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getRelatedMarketSegmentID, &eurexModifyTESTradeRequestPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getNegotiationID, &eurexModifyTESTradeRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getNoSRQSRelatedTradeIDs, &eurexModifyTESTradeRequestPacket::isNoSRQSRelatedTradeIDsValid> (d, NoSRQSRelatedTradeIDs, packet);
    eti::setString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getPad1, &eurexModifyTESTradeRequestPacket::isPad1Valid> (d, Pad1, packet);
    eti::setInteger<int16_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getTrdType, &eurexModifyTESTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getTradeReportType, &eurexModifyTESTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getTradePublishIndicator, &eurexModifyTESTradeRequestPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getNoSideAllocs, &eurexModifyTESTradeRequestPacket::isNoSideAllocsValid> (d, NoSideAllocs, packet);
    eti::setInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getNoLegs, &eurexModifyTESTradeRequestPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getTradeReportText, &eurexModifyTESTradeRequestPacket::isTradeReportTextValid> (d, TradeReportText, packet);
    eti::setString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getTradeReportID, &eurexModifyTESTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::getPad4, &eurexModifyTESTradeRequestPacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexSideAllocGrpCompPacket>& vSideAllocGrp = packet.getSideAllocGrp ();
    for (size_t i = 0; i < vSideAllocGrp.size (); i++)
    {
        cdr c;
        getSideAllocGrpComp (c, vSideAllocGrp[i]);
        d.appendArray (SideAllocGrp, c);
    }
    const vector<eurexTrdInstrmntLegGrpCompPacket>& vTrdInstrmntLegGrp = packet.getTrdInstrmntLegGrp ();
    for (size_t i = 0; i < vTrdInstrmntLegGrp.size (); i++)
    {
        cdr c;
        getTrdInstrmntLegGrpComp (c, vTrdInstrmntLegGrp[i]);
        d.appendArray (TrdInstrmntLegGrp, c);
    }
    const vector<eurexSRQSRelatedTradeIDGrpCompPacket>& vSRQSRelatedTradeIDGrp = packet.getSRQSRelatedTradeIDGrp ();
    for (size_t i = 0; i < vSRQSRelatedTradeIDGrp.size (); i++)
    {
        cdr c;
        getSRQSRelatedTradeIDGrpComp (c, vSRQSRelatedTradeIDGrp[i]);
        d.appendArray (SRQSRelatedTradeIDGrp, c);
    }
}

void
eurexCodec::getNewOrderComplexRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexNewOrderComplexRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize NewOrderComplexRequest");
    d.setString (MessageName, "NewOrderComplexRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getClOrdID, &eurexNewOrderComplexRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<int64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getSecurityID, &eurexNewOrderComplexRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPrice, &eurexNewOrderComplexRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getOrderQty, &eurexNewOrderComplexRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIDClientID, &eurexNewOrderComplexRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexNewOrderComplexRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getExecutingTrader, &eurexNewOrderComplexRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getMarketSegmentID, &eurexNewOrderComplexRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getExpireDate, &eurexNewOrderComplexRequestPacket::isExpireDateValid> (d, ExpireDate, packet);
    eti::setInteger<uint32_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getMatchInstCrossID, &eurexNewOrderComplexRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIDTakeUpTradingFirm, &eurexNewOrderComplexRequestPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIDOrderOriginationFirm, &eurexNewOrderComplexRequestPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIDBeneficiary, &eurexNewOrderComplexRequestPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getApplSeqIndicator, &eurexNewOrderComplexRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getProductComplex, &eurexNewOrderComplexRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getSide, &eurexNewOrderComplexRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getOrdType, &eurexNewOrderComplexRequestPacket::isOrdTypeValid> (d, OrdType, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPriceValidityCheckType, &eurexNewOrderComplexRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getValueCheckTypeValue, &eurexNewOrderComplexRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getOrderAttributeLiquidityProvision, &eurexNewOrderComplexRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getOrderAttributeRiskReduction, &eurexNewOrderComplexRequestPacket::isOrderAttributeRiskReductionValid> (d, OrderAttributeRiskReduction, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getExecInst, &eurexNewOrderComplexRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getTimeInForce, &eurexNewOrderComplexRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getTradingCapacity, &eurexNewOrderComplexRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderComplexRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getExecutingTraderQualifier, &eurexNewOrderComplexRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIDLocationID, &eurexNewOrderComplexRequestPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getComplianceText, &eurexNewOrderComplexRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getCustOrderHandlingInst, &eurexNewOrderComplexRequestPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPartyIDPositionAccount, &eurexNewOrderComplexRequestPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getFreeText1, &eurexNewOrderComplexRequestPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getFreeText2, &eurexNewOrderComplexRequestPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getFreeText3, &eurexNewOrderComplexRequestPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getFIXClOrdID, &eurexNewOrderComplexRequestPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getNoLegs, &eurexNewOrderComplexRequestPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::getPad2, &eurexNewOrderComplexRequestPacket::isPad2Valid> (d, Pad2, packet);
    const vector<eurexLegOrdGrpCompPacket>& vLegOrdGrp = packet.getLegOrdGrp ();
    for (size_t i = 0; i < vLegOrdGrp.size (); i++)
    {
        cdr c;
        getLegOrdGrpComp (c, vLegOrdGrp[i]);
        d.appendArray (LegOrdGrp, c);
    }
}

void
eurexCodec::getNewOrderComplexShortRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexNewOrderComplexShortRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize NewOrderComplexShortRequest");
    d.setString (MessageName, "NewOrderComplexShortRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getSecurityID, &eurexNewOrderComplexShortRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getPrice, &eurexNewOrderComplexShortRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getOrderQty, &eurexNewOrderComplexShortRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getClOrdID, &eurexNewOrderComplexShortRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getPartyIDClientID, &eurexNewOrderComplexShortRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexNewOrderComplexShortRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getExecutingTrader, &eurexNewOrderComplexShortRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getMarketSegmentID, &eurexNewOrderComplexShortRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getMatchInstCrossID, &eurexNewOrderComplexShortRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<int16_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getEnrichmentRuleID, &eurexNewOrderComplexShortRequestPacket::isEnrichmentRuleIDValid> (d, EnrichmentRuleID, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getApplSeqIndicator, &eurexNewOrderComplexShortRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getProductComplex, &eurexNewOrderComplexShortRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getSide, &eurexNewOrderComplexShortRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getPriceValidityCheckType, &eurexNewOrderComplexShortRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getValueCheckTypeValue, &eurexNewOrderComplexShortRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getOrderAttributeLiquidityProvision, &eurexNewOrderComplexShortRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getExecInst, &eurexNewOrderComplexShortRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getTimeInForce, &eurexNewOrderComplexShortRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getTradingCapacity, &eurexNewOrderComplexShortRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderComplexShortRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getExecutingTraderQualifier, &eurexNewOrderComplexShortRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::getPad3, &eurexNewOrderComplexShortRequestPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getNewOrderNRResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexNewOrderNRResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize NewOrderNRResponse");
    d.setString (MessageName, "NewOrderNRResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getOrderID, &eurexNewOrderNRResponsePacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getClOrdID, &eurexNewOrderNRResponsePacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<int64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getSecurityID, &eurexNewOrderNRResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getExecID, &eurexNewOrderNRResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setString<eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getOrdStatus, &eurexNewOrderNRResponsePacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getExecType, &eurexNewOrderNRResponsePacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int16_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getExecRestatementReason, &eurexNewOrderNRResponsePacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getCrossedIndicator, &eurexNewOrderNRResponsePacket::isCrossedIndicatorValid> (d, CrossedIndicator, packet);
    eti::setInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getProductComplex, &eurexNewOrderNRResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getTriggered, &eurexNewOrderNRResponsePacket::isTriggeredValid> (d, Triggered, packet);
    eti::setInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::getTransactionDelayIndicator, &eurexNewOrderNRResponsePacket::isTransactionDelayIndicatorValid> (d, TransactionDelayIndicator, packet);
}

void
eurexCodec::getNewOrderResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexNewOrderResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize NewOrderResponse");
    d.setString (MessageName, "NewOrderResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderMEComp (d, packet.getResponseHeaderME ());
    eti::setInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getOrderID, &eurexNewOrderResponsePacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getClOrdID, &eurexNewOrderResponsePacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<int64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getSecurityID, &eurexNewOrderResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getExecID, &eurexNewOrderResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getTrdRegTSEntryTime, &eurexNewOrderResponsePacket::isTrdRegTSEntryTimeValid> (d, TrdRegTSEntryTime, packet);
    eti::setInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getTrdRegTSTimePriority, &eurexNewOrderResponsePacket::isTrdRegTSTimePriorityValid> (d, TrdRegTSTimePriority, packet);
    eti::setString<eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getOrdStatus, &eurexNewOrderResponsePacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getExecType, &eurexNewOrderResponsePacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int16_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getExecRestatementReason, &eurexNewOrderResponsePacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getCrossedIndicator, &eurexNewOrderResponsePacket::isCrossedIndicatorValid> (d, CrossedIndicator, packet);
    eti::setInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getProductComplex, &eurexNewOrderResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getTriggered, &eurexNewOrderResponsePacket::isTriggeredValid> (d, Triggered, packet);
    eti::setInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::getTransactionDelayIndicator, &eurexNewOrderResponsePacket::isTransactionDelayIndicatorValid> (d, TransactionDelayIndicator, packet);
}

void
eurexCodec::getNewOrderSingleRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexNewOrderSingleRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize NewOrderSingleRequest");
    d.setString (MessageName, "NewOrderSingleRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setDouble<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPrice, &eurexNewOrderSingleRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getOrderQty, &eurexNewOrderSingleRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setDouble<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getStopPx, &eurexNewOrderSingleRequestPacket::isStopPxValid> (d, StopPx, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getClOrdID, &eurexNewOrderSingleRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIDClientID, &eurexNewOrderSingleRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexNewOrderSingleRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getExecutingTrader, &eurexNewOrderSingleRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getExpireDate, &eurexNewOrderSingleRequestPacket::isExpireDateValid> (d, ExpireDate, packet);
    eti::setInteger<int32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getMarketSegmentID, &eurexNewOrderSingleRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getSimpleSecurityID, &eurexNewOrderSingleRequestPacket::isSimpleSecurityIDValid> (d, SimpleSecurityID, packet);
    eti::setInteger<uint32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getMatchInstCrossID, &eurexNewOrderSingleRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIDTakeUpTradingFirm, &eurexNewOrderSingleRequestPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIDOrderOriginationFirm, &eurexNewOrderSingleRequestPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIDBeneficiary, &eurexNewOrderSingleRequestPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getApplSeqIndicator, &eurexNewOrderSingleRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getSide, &eurexNewOrderSingleRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getOrdType, &eurexNewOrderSingleRequestPacket::isOrdTypeValid> (d, OrdType, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPriceValidityCheckType, &eurexNewOrderSingleRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getValueCheckTypeValue, &eurexNewOrderSingleRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getOrderAttributeLiquidityProvision, &eurexNewOrderSingleRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getOrderAttributeRiskReduction, &eurexNewOrderSingleRequestPacket::isOrderAttributeRiskReductionValid> (d, OrderAttributeRiskReduction, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getTimeInForce, &eurexNewOrderSingleRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getExecInst, &eurexNewOrderSingleRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getTradingSessionSubID, &eurexNewOrderSingleRequestPacket::isTradingSessionSubIDValid> (d, TradingSessionSubID, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getTradingCapacity, &eurexNewOrderSingleRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderSingleRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getExecutingTraderQualifier, &eurexNewOrderSingleRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getAccount, &eurexNewOrderSingleRequestPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIDPositionAccount, &eurexNewOrderSingleRequestPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPositionEffect, &eurexNewOrderSingleRequestPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPartyIDLocationID, &eurexNewOrderSingleRequestPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getCustOrderHandlingInst, &eurexNewOrderSingleRequestPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getComplianceText, &eurexNewOrderSingleRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getFreeText1, &eurexNewOrderSingleRequestPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getFreeText2, &eurexNewOrderSingleRequestPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getFreeText3, &eurexNewOrderSingleRequestPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getFIXClOrdID, &eurexNewOrderSingleRequestPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::getPad4, &eurexNewOrderSingleRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getNewOrderSingleShortRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexNewOrderSingleShortRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize NewOrderSingleShortRequest");
    d.setString (MessageName, "NewOrderSingleShortRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setDouble<eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getPrice, &eurexNewOrderSingleShortRequestPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getOrderQty, &eurexNewOrderSingleShortRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getClOrdID, &eurexNewOrderSingleShortRequestPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getPartyIDClientID, &eurexNewOrderSingleShortRequestPacket::isPartyIDClientIDValid> (d, PartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexNewOrderSingleShortRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getExecutingTrader, &eurexNewOrderSingleShortRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getSimpleSecurityID, &eurexNewOrderSingleShortRequestPacket::isSimpleSecurityIDValid> (d, SimpleSecurityID, packet);
    eti::setInteger<uint32_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getMatchInstCrossID, &eurexNewOrderSingleShortRequestPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<int16_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getEnrichmentRuleID, &eurexNewOrderSingleShortRequestPacket::isEnrichmentRuleIDValid> (d, EnrichmentRuleID, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getSide, &eurexNewOrderSingleShortRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getApplSeqIndicator, &eurexNewOrderSingleShortRequestPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getPriceValidityCheckType, &eurexNewOrderSingleShortRequestPacket::isPriceValidityCheckTypeValid> (d, PriceValidityCheckType, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getValueCheckTypeValue, &eurexNewOrderSingleShortRequestPacket::isValueCheckTypeValueValid> (d, ValueCheckTypeValue, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getOrderAttributeLiquidityProvision, &eurexNewOrderSingleShortRequestPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getTimeInForce, &eurexNewOrderSingleShortRequestPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getExecInst, &eurexNewOrderSingleShortRequestPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getTradingCapacity, &eurexNewOrderSingleShortRequestPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderSingleShortRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getExecutingTraderQualifier, &eurexNewOrderSingleShortRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::getPad4, &eurexNewOrderSingleShortRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getNewsBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexNewsBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize NewsBroadcast");
    d.setString (MessageName, "NewsBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::getOrigTime, &eurexNewsBroadcastPacket::isOrigTimeValid> (d, OrigTime, packet);
    eti::setInteger<int16_t, eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::getVarTextLen, &eurexNewsBroadcastPacket::isVarTextLenValid> (d, VarTextLen, packet);
    eti::setString<eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::getHeadline, &eurexNewsBroadcastPacket::isHeadlineValid> (d, Headline, packet);
    eti::setString<eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::getPad6, &eurexNewsBroadcastPacket::isPad6Valid> (d, Pad6, packet);
    eti::setString<eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::getVarText, &eurexNewsBroadcastPacket::isVarTextValid> (d, VarText, packet);
}

void
eurexCodec::getOrderExecNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexOrderExecNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize OrderExecNotification");
    d.setString (MessageName, "OrderExecNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getOrderID, &eurexOrderExecNotificationPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getClOrdID, &eurexOrderExecNotificationPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getOrigClOrdID, &eurexOrderExecNotificationPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getSecurityID, &eurexOrderExecNotificationPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getExecID, &eurexOrderExecNotificationPacket::isExecIDValid> (d, ExecID, packet);
    eti::setDouble<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getLeavesQty, &eurexOrderExecNotificationPacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getCumQty, &eurexOrderExecNotificationPacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getCxlQty, &eurexOrderExecNotificationPacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setInteger<int32_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getMarketSegmentID, &eurexOrderExecNotificationPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getNoLegExecs, &eurexOrderExecNotificationPacket::isNoLegExecsValid> (d, NoLegExecs, packet);
    eti::setInteger<int16_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getExecRestatementReason, &eurexOrderExecNotificationPacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getSide, &eurexOrderExecNotificationPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getProductComplex, &eurexOrderExecNotificationPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getOrdStatus, &eurexOrderExecNotificationPacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getExecType, &eurexOrderExecNotificationPacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getTriggered, &eurexOrderExecNotificationPacket::isTriggeredValid> (d, Triggered, packet);
    eti::setInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getCrossedIndicator, &eurexOrderExecNotificationPacket::isCrossedIndicatorValid> (d, CrossedIndicator, packet);
    eti::setString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getFIXClOrdID, &eurexOrderExecNotificationPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getNoFills, &eurexOrderExecNotificationPacket::isNoFillsValid> (d, NoFills, packet);
    eti::setString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::getPad5, &eurexOrderExecNotificationPacket::isPad5Valid> (d, Pad5, packet);
    const vector<eurexFillsGrpCompPacket>& vFillsGrp = packet.getFillsGrp ();
    for (size_t i = 0; i < vFillsGrp.size (); i++)
    {
        cdr c;
        getFillsGrpComp (c, vFillsGrp[i]);
        d.appendArray (FillsGrp, c);
    }
    const vector<eurexInstrmntLegExecGrpCompPacket>& vInstrmntLegExecGrp = packet.getInstrmntLegExecGrp ();
    for (size_t i = 0; i < vInstrmntLegExecGrp.size (); i++)
    {
        cdr c;
        getInstrmntLegExecGrpComp (c, vInstrmntLegExecGrp[i]);
        d.appendArray (InstrmntLegExecGrp, c);
    }
}

void
eurexCodec::getOrderExecReportBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexOrderExecReportBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize OrderExecReportBroadcast");
    d.setString (MessageName, "OrderExecReportBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getOrderID, &eurexOrderExecReportBroadcastPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getClOrdID, &eurexOrderExecReportBroadcastPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getOrigClOrdID, &eurexOrderExecReportBroadcastPacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getSecurityID, &eurexOrderExecReportBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getExecID, &eurexOrderExecReportBroadcastPacket::isExecIDValid> (d, ExecID, packet);
    eti::setInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getTrdRegTSEntryTime, &eurexOrderExecReportBroadcastPacket::isTrdRegTSEntryTimeValid> (d, TrdRegTSEntryTime, packet);
    eti::setInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getTrdRegTSTimePriority, &eurexOrderExecReportBroadcastPacket::isTrdRegTSTimePriorityValid> (d, TrdRegTSTimePriority, packet);
    eti::setDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPrice, &eurexOrderExecReportBroadcastPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getLeavesQty, &eurexOrderExecReportBroadcastPacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getCumQty, &eurexOrderExecReportBroadcastPacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getCxlQty, &eurexOrderExecReportBroadcastPacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getOrderQty, &eurexOrderExecReportBroadcastPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getStopPx, &eurexOrderExecReportBroadcastPacket::isStopPxValid> (d, StopPx, packet);
    eti::setInteger<int32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getMarketSegmentID, &eurexOrderExecReportBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getExpireDate, &eurexOrderExecReportBroadcastPacket::isExpireDateValid> (d, ExpireDate, packet);
    eti::setInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getMatchInstCrossID, &eurexOrderExecReportBroadcastPacket::isMatchInstCrossIDValid> (d, MatchInstCrossID, packet);
    eti::setInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDExecutingUnit, &eurexOrderExecReportBroadcastPacket::isPartyIDExecutingUnitValid> (d, PartyIDExecutingUnit, packet);
    eti::setInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDSessionID, &eurexOrderExecReportBroadcastPacket::isPartyIDSessionIDValid> (d, PartyIDSessionID, packet);
    eti::setInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDExecutingTrader, &eurexOrderExecReportBroadcastPacket::isPartyIDExecutingTraderValid> (d, PartyIDExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDEnteringTrader, &eurexOrderExecReportBroadcastPacket::isPartyIDEnteringTraderValid> (d, PartyIDEnteringTrader, packet);
    eti::setInteger<int16_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getNoLegExecs, &eurexOrderExecReportBroadcastPacket::isNoLegExecsValid> (d, NoLegExecs, packet);
    eti::setInteger<int16_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getExecRestatementReason, &eurexOrderExecReportBroadcastPacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDEnteringFirm, &eurexOrderExecReportBroadcastPacket::isPartyIDEnteringFirmValid> (d, PartyIDEnteringFirm, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getProductComplex, &eurexOrderExecReportBroadcastPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getOrdStatus, &eurexOrderExecReportBroadcastPacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getExecType, &eurexOrderExecReportBroadcastPacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getSide, &eurexOrderExecReportBroadcastPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getOrdType, &eurexOrderExecReportBroadcastPacket::isOrdTypeValid> (d, OrdType, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getTradingCapacity, &eurexOrderExecReportBroadcastPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getTimeInForce, &eurexOrderExecReportBroadcastPacket::isTimeInForceValid> (d, TimeInForce, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getExecInst, &eurexOrderExecReportBroadcastPacket::isExecInstValid> (d, ExecInst, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getTradingSessionSubID, &eurexOrderExecReportBroadcastPacket::isTradingSessionSubIDValid> (d, TradingSessionSubID, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getApplSeqIndicator, &eurexOrderExecReportBroadcastPacket::isApplSeqIndicatorValid> (d, ApplSeqIndicator, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getAccount, &eurexOrderExecReportBroadcastPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDPositionAccount, &eurexOrderExecReportBroadcastPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPositionEffect, &eurexOrderExecReportBroadcastPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDTakeUpTradingFirm, &eurexOrderExecReportBroadcastPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDOrderOriginationFirm, &eurexOrderExecReportBroadcastPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDBeneficiary, &eurexOrderExecReportBroadcastPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPartyIDLocationID, &eurexOrderExecReportBroadcastPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getCustOrderHandlingInst, &eurexOrderExecReportBroadcastPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getComplianceText, &eurexOrderExecReportBroadcastPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getFreeText1, &eurexOrderExecReportBroadcastPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getFreeText2, &eurexOrderExecReportBroadcastPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getFreeText3, &eurexOrderExecReportBroadcastPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getFIXClOrdID, &eurexOrderExecReportBroadcastPacket::isFIXClOrdIDValid> (d, FIXClOrdID, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getNoFills, &eurexOrderExecReportBroadcastPacket::isNoFillsValid> (d, NoFills, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getNoLegs, &eurexOrderExecReportBroadcastPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getTriggered, &eurexOrderExecReportBroadcastPacket::isTriggeredValid> (d, Triggered, packet);
    eti::setInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getCrossedIndicator, &eurexOrderExecReportBroadcastPacket::isCrossedIndicatorValid> (d, CrossedIndicator, packet);
    eti::setString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::getPad2, &eurexOrderExecReportBroadcastPacket::isPad2Valid> (d, Pad2, packet);
    const vector<eurexLegOrdGrpCompPacket>& vLegOrdGrp = packet.getLegOrdGrp ();
    for (size_t i = 0; i < vLegOrdGrp.size (); i++)
    {
        cdr c;
        getLegOrdGrpComp (c, vLegOrdGrp[i]);
        d.appendArray (LegOrdGrp, c);
    }
    const vector<eurexFillsGrpCompPacket>& vFillsGrp = packet.getFillsGrp ();
    for (size_t i = 0; i < vFillsGrp.size (); i++)
    {
        cdr c;
        getFillsGrpComp (c, vFillsGrp[i]);
        d.appendArray (FillsGrp, c);
    }
    const vector<eurexInstrmntLegExecGrpCompPacket>& vInstrmntLegExecGrp = packet.getInstrmntLegExecGrp ();
    for (size_t i = 0; i < vInstrmntLegExecGrp.size (); i++)
    {
        cdr c;
        getInstrmntLegExecGrpComp (c, vInstrmntLegExecGrp[i]);
        d.appendArray (InstrmntLegExecGrp, c);
    }
}

void
eurexCodec::getOrderExecResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexOrderExecResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize OrderExecResponse");
    d.setString (MessageName, "OrderExecResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderMEComp (d, packet.getResponseHeaderME ());
    eti::setInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getOrderID, &eurexOrderExecResponsePacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getClOrdID, &eurexOrderExecResponsePacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getOrigClOrdID, &eurexOrderExecResponsePacket::isOrigClOrdIDValid> (d, OrigClOrdID, packet);
    eti::setInteger<int64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getSecurityID, &eurexOrderExecResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getExecID, &eurexOrderExecResponsePacket::isExecIDValid> (d, ExecID, packet);
    eti::setInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getTrdRegTSEntryTime, &eurexOrderExecResponsePacket::isTrdRegTSEntryTimeValid> (d, TrdRegTSEntryTime, packet);
    eti::setInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getTrdRegTSTimePriority, &eurexOrderExecResponsePacket::isTrdRegTSTimePriorityValid> (d, TrdRegTSTimePriority, packet);
    eti::setDouble<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getLeavesQty, &eurexOrderExecResponsePacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getCumQty, &eurexOrderExecResponsePacket::isCumQtyValid> (d, CumQty, packet);
    eti::setDouble<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getCxlQty, &eurexOrderExecResponsePacket::isCxlQtyValid> (d, CxlQty, packet);
    eti::setInteger<int32_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getMarketSegmentID, &eurexOrderExecResponsePacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getNoLegExecs, &eurexOrderExecResponsePacket::isNoLegExecsValid> (d, NoLegExecs, packet);
    eti::setInteger<int16_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getExecRestatementReason, &eurexOrderExecResponsePacket::isExecRestatementReasonValid> (d, ExecRestatementReason, packet);
    eti::setInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getSide, &eurexOrderExecResponsePacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getProductComplex, &eurexOrderExecResponsePacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setString<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getOrdStatus, &eurexOrderExecResponsePacket::isOrdStatusValid> (d, OrdStatus, packet);
    eti::setString<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getExecType, &eurexOrderExecResponsePacket::isExecTypeValid> (d, ExecType, packet);
    eti::setInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getTriggered, &eurexOrderExecResponsePacket::isTriggeredValid> (d, Triggered, packet);
    eti::setInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getCrossedIndicator, &eurexOrderExecResponsePacket::isCrossedIndicatorValid> (d, CrossedIndicator, packet);
    eti::setInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getTransactionDelayIndicator, &eurexOrderExecResponsePacket::isTransactionDelayIndicatorValid> (d, TransactionDelayIndicator, packet);
    eti::setInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::getNoFills, &eurexOrderExecResponsePacket::isNoFillsValid> (d, NoFills, packet);
    const vector<eurexFillsGrpCompPacket>& vFillsGrp = packet.getFillsGrp ();
    for (size_t i = 0; i < vFillsGrp.size (); i++)
    {
        cdr c;
        getFillsGrpComp (c, vFillsGrp[i]);
        d.appendArray (FillsGrp, c);
    }
    const vector<eurexInstrmntLegExecGrpCompPacket>& vInstrmntLegExecGrp = packet.getInstrmntLegExecGrp ();
    for (size_t i = 0; i < vInstrmntLegExecGrp.size (); i++)
    {
        cdr c;
        getInstrmntLegExecGrpComp (c, vInstrmntLegExecGrp[i]);
        d.appendArray (InstrmntLegExecGrp, c);
    }
}

void
eurexCodec::getPartyActionReport (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexPartyActionReportPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize PartyActionReport");
    d.setString (MessageName, "PartyActionReport");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getTransactTime, &eurexPartyActionReportPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getTradeDate, &eurexPartyActionReportPacket::isTradeDateValid> (d, TradeDate, packet);
    eti::setInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getRequestingPartyIDExecutingTrader, &eurexPartyActionReportPacket::isRequestingPartyIDExecutingTraderValid> (d, RequestingPartyIDExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getPartyIDExecutingUnit, &eurexPartyActionReportPacket::isPartyIDExecutingUnitValid> (d, PartyIDExecutingUnit, packet);
    eti::setInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getPartyIDExecutingTrader, &eurexPartyActionReportPacket::isPartyIDExecutingTraderValid> (d, PartyIDExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getRequestingPartyIDExecutingSystem, &eurexPartyActionReportPacket::isRequestingPartyIDExecutingSystemValid> (d, RequestingPartyIDExecutingSystem, packet);
    eti::setInteger<int16_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getMarketID, &eurexPartyActionReportPacket::isMarketIDValid> (d, MarketID, packet);
    eti::setInteger<int8_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getPartyActionType, &eurexPartyActionReportPacket::isPartyActionTypeValid> (d, PartyActionType, packet);
    eti::setInteger<int8_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::getRequestingPartyIDEnteringFirm, &eurexPartyActionReportPacket::isRequestingPartyIDEnteringFirmValid> (d, RequestingPartyIDEnteringFirm, packet);
}

void
eurexCodec::getPartyEntitlementsUpdateReport (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexPartyEntitlementsUpdateReportPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize PartyEntitlementsUpdateReport");
    d.setString (MessageName, "PartyEntitlementsUpdateReport");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getTransactTime, &eurexPartyEntitlementsUpdateReportPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int32_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getTradeDate, &eurexPartyEntitlementsUpdateReportPacket::isTradeDateValid> (d, TradeDate, packet);
    eti::setInteger<uint32_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getPartyDetailIDExecutingUnit, &eurexPartyEntitlementsUpdateReportPacket::isPartyDetailIDExecutingUnitValid> (d, PartyDetailIDExecutingUnit, packet);
    eti::setInteger<uint32_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getRequestingPartyIDExecutingSystem, &eurexPartyEntitlementsUpdateReportPacket::isRequestingPartyIDExecutingSystemValid> (d, RequestingPartyIDExecutingSystem, packet);
    eti::setInteger<int16_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getMarketID, &eurexPartyEntitlementsUpdateReportPacket::isMarketIDValid> (d, MarketID, packet);
    eti::setString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getListUpdateAction, &eurexPartyEntitlementsUpdateReportPacket::isListUpdateActionValid> (d, ListUpdateAction, packet);
    eti::setString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getRequestingPartyEnteringFirm, &eurexPartyEntitlementsUpdateReportPacket::isRequestingPartyEnteringFirmValid> (d, RequestingPartyEnteringFirm, packet);
    eti::setString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getRequestingPartyClearingFirm, &eurexPartyEntitlementsUpdateReportPacket::isRequestingPartyClearingFirmValid> (d, RequestingPartyClearingFirm, packet);
    eti::setInteger<int8_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getPartyDetailStatus, &eurexPartyEntitlementsUpdateReportPacket::isPartyDetailStatusValid> (d, PartyDetailStatus, packet);
    eti::setString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::getPad6, &eurexPartyEntitlementsUpdateReportPacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getPreTradeRiskLimitResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexPreTradeRiskLimitResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize PreTradeRiskLimitResponse");
    d.setString (MessageName, "PreTradeRiskLimitResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::getRiskLimitReportID, &eurexPreTradeRiskLimitResponsePacket::isRiskLimitReportIDValid> (d, RiskLimitReportID, packet);
    eti::setInteger<int32_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::getMarketSegmentID, &eurexPreTradeRiskLimitResponsePacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::getNoRiskLimits, &eurexPreTradeRiskLimitResponsePacket::isNoRiskLimitsValid> (d, NoRiskLimits, packet);
    eti::setInteger<int8_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::getPartyDetailStatus, &eurexPreTradeRiskLimitResponsePacket::isPartyDetailStatusValid> (d, PartyDetailStatus, packet);
    eti::setInteger<int8_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::getRiskLimitPlatform, &eurexPreTradeRiskLimitResponsePacket::isRiskLimitPlatformValid> (d, RiskLimitPlatform, packet);
    eti::setString<eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::getPartyDetailExecutingUnit, &eurexPreTradeRiskLimitResponsePacket::isPartyDetailExecutingUnitValid> (d, PartyDetailExecutingUnit, packet);
    eti::setString<eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::getPad4, &eurexPreTradeRiskLimitResponsePacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexRiskLimitsRptGrpCompPacket>& vRiskLimitsRptGrp = packet.getRiskLimitsRptGrp ();
    for (size_t i = 0; i < vRiskLimitsRptGrp.size (); i++)
    {
        cdr c;
        getRiskLimitsRptGrpComp (c, vRiskLimitsRptGrp[i]);
        d.appendArray (RiskLimitsRptGrp, c);
    }
}

void
eurexCodec::getPreTradeRiskLimitsDefinitionRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexPreTradeRiskLimitsDefinitionRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize PreTradeRiskLimitsDefinitionRequest");
    d.setString (MessageName, "PreTradeRiskLimitsDefinitionRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::getMarketSegmentID, &eurexPreTradeRiskLimitsDefinitionRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::getRiskLimitPlatform, &eurexPreTradeRiskLimitsDefinitionRequestPacket::isRiskLimitPlatformValid> (d, RiskLimitPlatform, packet);
    eti::setInteger<int8_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::getNoRiskLimitsQty, &eurexPreTradeRiskLimitsDefinitionRequestPacket::isNoRiskLimitsQtyValid> (d, NoRiskLimitsQty, packet);
    eti::setInteger<int8_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::getPartyDetailStatus, &eurexPreTradeRiskLimitsDefinitionRequestPacket::isPartyDetailStatusValid> (d, PartyDetailStatus, packet);
    eti::setString<eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::getRiskLimitGroup, &eurexPreTradeRiskLimitsDefinitionRequestPacket::isRiskLimitGroupValid> (d, RiskLimitGroup, packet);
    eti::setString<eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::getPartyDetailExecutingUnit, &eurexPreTradeRiskLimitsDefinitionRequestPacket::isPartyDetailExecutingUnitValid> (d, PartyDetailExecutingUnit, packet);
    eti::setString<eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::getPad1, &eurexPreTradeRiskLimitsDefinitionRequestPacket::isPad1Valid> (d, Pad1, packet);
    const vector<eurexRiskLimitQtyGrpCompPacket>& vRiskLimitQtyGrp = packet.getRiskLimitQtyGrp ();
    for (size_t i = 0; i < vRiskLimitQtyGrp.size (); i++)
    {
        cdr c;
        getRiskLimitQtyGrpComp (c, vRiskLimitQtyGrp[i]);
        d.appendArray (RiskLimitQtyGrp, c);
    }
}

void
eurexCodec::getQuoteActivationNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexQuoteActivationNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize QuoteActivationNotification");
    d.setString (MessageName, "QuoteActivationNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getMassActionReportID, &eurexQuoteActivationNotificationPacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
    eti::setInteger<int32_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getMarketSegmentID, &eurexQuoteActivationNotificationPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getPartyIDEnteringTrader, &eurexQuoteActivationNotificationPacket::isPartyIDEnteringTraderValid> (d, PartyIDEnteringTrader, packet);
    eti::setInteger<int16_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getNoNotAffectedSecurities, &eurexQuoteActivationNotificationPacket::isNoNotAffectedSecuritiesValid> (d, NoNotAffectedSecurities, packet);
    eti::setInteger<int8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getPartyIDEnteringFirm, &eurexQuoteActivationNotificationPacket::isPartyIDEnteringFirmValid> (d, PartyIDEnteringFirm, packet);
    eti::setInteger<int8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getMassActionType, &eurexQuoteActivationNotificationPacket::isMassActionTypeValid> (d, MassActionType, packet);
    eti::setInteger<int8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getMassActionSubType, &eurexQuoteActivationNotificationPacket::isMassActionSubTypeValid> (d, MassActionSubType, packet);
    eti::setInteger<uint8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getMassActionReason, &eurexQuoteActivationNotificationPacket::isMassActionReasonValid> (d, MassActionReason, packet);
    eti::setString<eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::getPad2, &eurexQuoteActivationNotificationPacket::isPad2Valid> (d, Pad2, packet);
    const vector<eurexNotAffectedSecuritiesGrpCompPacket>& vNotAffectedSecuritiesGrp = packet.getNotAffectedSecuritiesGrp ();
    for (size_t i = 0; i < vNotAffectedSecuritiesGrp.size (); i++)
    {
        cdr c;
        getNotAffectedSecuritiesGrpComp (c, vNotAffectedSecuritiesGrp[i]);
        d.appendArray (NotAffectedSecuritiesGrp, c);
    }
}

void
eurexCodec::getQuoteActivationRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexQuoteActivationRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize QuoteActivationRequest");
    d.setString (MessageName, "QuoteActivationRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getPartyIdInvestmentDecisionMaker, &eurexQuoteActivationRequestPacket::isPartyIdInvestmentDecisionMakerValid> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getExecutingTrader, &eurexQuoteActivationRequestPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<int32_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getMarketSegmentID, &eurexQuoteActivationRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getTargetPartyIDSessionID, &eurexQuoteActivationRequestPacket::isTargetPartyIDSessionIDValid> (d, TargetPartyIDSessionID, packet);
    eti::setInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getMassActionType, &eurexQuoteActivationRequestPacket::isMassActionTypeValid> (d, MassActionType, packet);
    eti::setInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getMassActionSubType, &eurexQuoteActivationRequestPacket::isMassActionSubTypeValid> (d, MassActionSubType, packet);
    eti::setInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getPartyIdInvestmentDecisionMakerQualifier, &eurexQuoteActivationRequestPacket::isPartyIdInvestmentDecisionMakerQualifierValid> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::setInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getExecutingTraderQualifier, &eurexQuoteActivationRequestPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setString<eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::getPad4, &eurexQuoteActivationRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getQuoteActivationResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexQuoteActivationResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize QuoteActivationResponse");
    d.setString (MessageName, "QuoteActivationResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexQuoteActivationResponsePacket, &eurexQuoteActivationResponsePacket::getMassActionReportID, &eurexQuoteActivationResponsePacket::isMassActionReportIDValid> (d, MassActionReportID, packet);
    eti::setInteger<int16_t, eurexQuoteActivationResponsePacket, &eurexQuoteActivationResponsePacket::getNoNotAffectedSecurities, &eurexQuoteActivationResponsePacket::isNoNotAffectedSecuritiesValid> (d, NoNotAffectedSecurities, packet);
    eti::setString<eurexQuoteActivationResponsePacket, &eurexQuoteActivationResponsePacket::getPad6, &eurexQuoteActivationResponsePacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexNotAffectedSecuritiesGrpCompPacket>& vNotAffectedSecuritiesGrp = packet.getNotAffectedSecuritiesGrp ();
    for (size_t i = 0; i < vNotAffectedSecuritiesGrp.size (); i++)
    {
        cdr c;
        getNotAffectedSecuritiesGrpComp (c, vNotAffectedSecuritiesGrp[i]);
        d.appendArray (NotAffectedSecuritiesGrp, c);
    }
}

void
eurexCodec::getQuoteExecutionReport (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexQuoteExecutionReportPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize QuoteExecutionReport");
    d.setString (MessageName, "QuoteExecutionReport");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<uint64_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::getExecID, &eurexQuoteExecutionReportPacket::isExecIDValid> (d, ExecID, packet);
    eti::setInteger<int32_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::getMarketSegmentID, &eurexQuoteExecutionReportPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int16_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::getNoLegExecs, &eurexQuoteExecutionReportPacket::isNoLegExecsValid> (d, NoLegExecs, packet);
    eti::setInteger<int8_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::getNoQuoteEvents, &eurexQuoteExecutionReportPacket::isNoQuoteEventsValid> (d, NoQuoteEvents, packet);
    eti::setString<eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::getPad1, &eurexQuoteExecutionReportPacket::isPad1Valid> (d, Pad1, packet);
    const vector<eurexQuoteEventGrpCompPacket>& vQuoteEventGrp = packet.getQuoteEventGrp ();
    for (size_t i = 0; i < vQuoteEventGrp.size (); i++)
    {
        cdr c;
        getQuoteEventGrpComp (c, vQuoteEventGrp[i]);
        d.appendArray (QuoteEventGrp, c);
    }
    const vector<eurexQuoteLegExecGrpCompPacket>& vQuoteLegExecGrp = packet.getQuoteLegExecGrp ();
    for (size_t i = 0; i < vQuoteLegExecGrp.size (); i++)
    {
        cdr c;
        getQuoteLegExecGrpComp (c, vQuoteLegExecGrp[i]);
        d.appendArray (QuoteLegExecGrp, c);
    }
}

void
eurexCodec::getRFQRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRFQRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize RFQRequest");
    d.setString (MessageName, "RFQRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexRFQRequestPacket, &eurexRFQRequestPacket::getSecurityID, &eurexRFQRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexRFQRequestPacket, &eurexRFQRequestPacket::getOrderQty, &eurexRFQRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<int32_t, eurexRFQRequestPacket, &eurexRFQRequestPacket::getMarketSegmentID, &eurexRFQRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int8_t, eurexRFQRequestPacket, &eurexRFQRequestPacket::getSide, &eurexRFQRequestPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexRFQRequestPacket, &eurexRFQRequestPacket::getComplianceText, &eurexRFQRequestPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexRFQRequestPacket, &eurexRFQRequestPacket::getPad7, &eurexRFQRequestPacket::isPad7Valid> (d, Pad7, packet);
}

void
eurexCodec::getRFQResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRFQResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize RFQResponse");
    d.setString (MessageName, "RFQResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint64_t, eurexRFQResponsePacket, &eurexRFQResponsePacket::getExecID, &eurexRFQResponsePacket::isExecIDValid> (d, ExecID, packet);
}

void
eurexCodec::getReject (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRejectPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize Reject");
    d.setString (MessageName, "Reject");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRResponseHeaderMEComp (d, packet.getNRResponseHeaderME ());
    eti::setInteger<uint32_t, eurexRejectPacket, &eurexRejectPacket::getSessionRejectReason, &eurexRejectPacket::isSessionRejectReasonValid> (d, SessionRejectReason, packet);
    eti::setInteger<int16_t, eurexRejectPacket, &eurexRejectPacket::getVarTextLen, &eurexRejectPacket::isVarTextLenValid> (d, VarTextLen, packet);
    eti::setInteger<int8_t, eurexRejectPacket, &eurexRejectPacket::getSessionStatus, &eurexRejectPacket::isSessionStatusValid> (d, SessionStatus, packet);
    eti::setString<eurexRejectPacket, &eurexRejectPacket::getPad1, &eurexRejectPacket::isPad1Valid> (d, Pad1, packet);
    eti::setString<eurexRejectPacket, &eurexRejectPacket::getVarText, &eurexRejectPacket::isVarTextValid> (d, VarText, packet);
}

void
eurexCodec::getRetransmitMEMessageRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRetransmitMEMessageRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize RetransmitMEMessageRequest");
    d.setString (MessageName, "RetransmitMEMessageRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint32_t, eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::getSubscriptionScope, &eurexRetransmitMEMessageRequestPacket::isSubscriptionScopeValid> (d, SubscriptionScope, packet);
    eti::setInteger<uint16_t, eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::getPartitionID, &eurexRetransmitMEMessageRequestPacket::isPartitionIDValid> (d, PartitionID, packet);
    eti::setInteger<int8_t, eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::getRefApplID, &eurexRetransmitMEMessageRequestPacket::isRefApplIDValid> (d, RefApplID, packet);
    eti::setString<eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::getApplBegMsgID, &eurexRetransmitMEMessageRequestPacket::isApplBegMsgIDValid> (d, ApplBegMsgID, packet);
    eti::setString<eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::getApplEndMsgID, &eurexRetransmitMEMessageRequestPacket::isApplEndMsgIDValid> (d, ApplEndMsgID, packet);
    eti::setString<eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::getPad1, &eurexRetransmitMEMessageRequestPacket::isPad1Valid> (d, Pad1, packet);
}

void
eurexCodec::getRetransmitMEMessageResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRetransmitMEMessageResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize RetransmitMEMessageResponse");
    d.setString (MessageName, "RetransmitMEMessageResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<uint16_t, eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::getApplTotalMessageCount, &eurexRetransmitMEMessageResponsePacket::isApplTotalMessageCountValid> (d, ApplTotalMessageCount, packet);
    eti::setString<eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::getApplEndMsgID, &eurexRetransmitMEMessageResponsePacket::isApplEndMsgIDValid> (d, ApplEndMsgID, packet);
    eti::setString<eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::getRefApplLastMsgID, &eurexRetransmitMEMessageResponsePacket::isRefApplLastMsgIDValid> (d, RefApplLastMsgID, packet);
    eti::setString<eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::getPad6, &eurexRetransmitMEMessageResponsePacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getRetransmitRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRetransmitRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize RetransmitRequest");
    d.setString (MessageName, "RetransmitRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::getApplBegSeqNum, &eurexRetransmitRequestPacket::isApplBegSeqNumValid> (d, ApplBegSeqNum, packet);
    eti::setInteger<uint64_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::getApplEndSeqNum, &eurexRetransmitRequestPacket::isApplEndSeqNumValid> (d, ApplEndSeqNum, packet);
    eti::setInteger<uint16_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::getPartitionID, &eurexRetransmitRequestPacket::isPartitionIDValid> (d, PartitionID, packet);
    eti::setInteger<int8_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::getRefApplID, &eurexRetransmitRequestPacket::isRefApplIDValid> (d, RefApplID, packet);
    eti::setString<eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::getPad5, &eurexRetransmitRequestPacket::isPad5Valid> (d, Pad5, packet);
}

void
eurexCodec::getRetransmitResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRetransmitResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize RetransmitResponse");
    d.setString (MessageName, "RetransmitResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<uint64_t, eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::getApplEndSeqNum, &eurexRetransmitResponsePacket::isApplEndSeqNumValid> (d, ApplEndSeqNum, packet);
    eti::setInteger<uint64_t, eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::getRefApplLastSeqNum, &eurexRetransmitResponsePacket::isRefApplLastSeqNumValid> (d, RefApplLastSeqNum, packet);
    eti::setInteger<uint16_t, eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::getApplTotalMessageCount, &eurexRetransmitResponsePacket::isApplTotalMessageCountValid> (d, ApplTotalMessageCount, packet);
    eti::setString<eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::getPad6, &eurexRetransmitResponsePacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getRiskNotificationBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexRiskNotificationBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize RiskNotificationBroadcast");
    d.setString (MessageName, "RiskNotificationBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getTransactTime, &eurexRiskNotificationBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int32_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getTradeDate, &eurexRiskNotificationBroadcastPacket::isTradeDateValid> (d, TradeDate, packet);
    eti::setInteger<uint32_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getPartyDetailIDExecutingUnit, &eurexRiskNotificationBroadcastPacket::isPartyDetailIDExecutingUnitValid> (d, PartyDetailIDExecutingUnit, packet);
    eti::setInteger<uint32_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getRequestingPartyIDExecutingSystem, &eurexRiskNotificationBroadcastPacket::isRequestingPartyIDExecutingSystemValid> (d, RequestingPartyIDExecutingSystem, packet);
    eti::setInteger<int16_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getMarketID, &eurexRiskNotificationBroadcastPacket::isMarketIDValid> (d, MarketID, packet);
    eti::setString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getListUpdateAction, &eurexRiskNotificationBroadcastPacket::isListUpdateActionValid> (d, ListUpdateAction, packet);
    eti::setInteger<int8_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getRiskLimitAction, &eurexRiskNotificationBroadcastPacket::isRiskLimitActionValid> (d, RiskLimitAction, packet);
    eti::setString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getRequestingPartyEnteringFirm, &eurexRiskNotificationBroadcastPacket::isRequestingPartyEnteringFirmValid> (d, RequestingPartyEnteringFirm, packet);
    eti::setString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getRequestingPartyClearingFirm, &eurexRiskNotificationBroadcastPacket::isRequestingPartyClearingFirmValid> (d, RequestingPartyClearingFirm, packet);
    eti::setString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::getPad6, &eurexRiskNotificationBroadcastPacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getSRQSCreateDealNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSCreateDealNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSCreateDealNotification");
    d.setString (MessageName, "SRQSCreateDealNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getTransactTime, &eurexSRQSCreateDealNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getLastPx, &eurexSRQSCreateDealNotificationPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getLastQty, &eurexSRQSCreateDealNotificationPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setInteger<uint64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getQuoteID, &eurexSRQSCreateDealNotificationPacket::isQuoteIDValid> (d, QuoteID, packet);
    eti::setInteger<int64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getSecurityID, &eurexSRQSCreateDealNotificationPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getExpireTime, &eurexSRQSCreateDealNotificationPacket::isExpireTimeValid> (d, ExpireTime, packet);
    eti::setDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getUnderlyingPx, &eurexSRQSCreateDealNotificationPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getUnderlyingDeltaPercentage, &eurexSRQSCreateDealNotificationPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getUnderlyingEffectiveDeltaPercentage, &eurexSRQSCreateDealNotificationPacket::isUnderlyingEffectiveDeltaPercentageValid> (d, UnderlyingEffectiveDeltaPercentage, packet);
    eti::setDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getUnderlyingQty, &eurexSRQSCreateDealNotificationPacket::isUnderlyingQtyValid> (d, UnderlyingQty, packet);
    eti::setDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getUnderlyingPriceStipValue, &eurexSRQSCreateDealNotificationPacket::isUnderlyingPriceStipValueValid> (d, UnderlyingPriceStipValue, packet);
    eti::setInteger<uint32_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getNegotiationID, &eurexSRQSCreateDealNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getTradeID, &eurexSRQSCreateDealNotificationPacket::isTradeIDValid> (d, TradeID, packet);
    eti::setInteger<uint32_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getOrigTradeID, &eurexSRQSCreateDealNotificationPacket::isOrigTradeIDValid> (d, OrigTradeID, packet);
    eti::setInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getTrdRptStatus, &eurexSRQSCreateDealNotificationPacket::isTrdRptStatusValid> (d, TrdRptStatus, packet);
    eti::setInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getTradeReportType, &eurexSRQSCreateDealNotificationPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getMessageEventSource, &eurexSRQSCreateDealNotificationPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getSide, &eurexSRQSCreateDealNotificationPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getNoOrderBookItems, &eurexSRQSCreateDealNotificationPacket::isNoOrderBookItemsValid> (d, NoOrderBookItems, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getRootPartyExecutingFirm, &eurexSRQSCreateDealNotificationPacket::isRootPartyExecutingFirmValid> (d, RootPartyExecutingFirm, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getRootPartyExecutingTrader, &eurexSRQSCreateDealNotificationPacket::isRootPartyExecutingTraderValid> (d, RootPartyExecutingTrader, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getRootPartyEnteringTrader, &eurexSRQSCreateDealNotificationPacket::isRootPartyEnteringTraderValid> (d, RootPartyEnteringTrader, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getTargetPartyExecutingFirm, &eurexSRQSCreateDealNotificationPacket::isTargetPartyExecutingFirmValid> (d, TargetPartyExecutingFirm, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getTargetPartyExecutingTrader, &eurexSRQSCreateDealNotificationPacket::isTargetPartyExecutingTraderValid> (d, TargetPartyExecutingTrader, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getFirmTradeID, &eurexSRQSCreateDealNotificationPacket::isFirmTradeIDValid> (d, FirmTradeID, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getFirmNegotiationID, &eurexSRQSCreateDealNotificationPacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getFreeText1, &eurexSRQSCreateDealNotificationPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getFreeText5, &eurexSRQSCreateDealNotificationPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::getPad3, &eurexSRQSCreateDealNotificationPacket::isPad3Valid> (d, Pad3, packet);
    const vector<eurexOrderBookItemGrpCompPacket>& vOrderBookItemGrp = packet.getOrderBookItemGrp ();
    for (size_t i = 0; i < vOrderBookItemGrp.size (); i++)
    {
        cdr c;
        getOrderBookItemGrpComp (c, vOrderBookItemGrp[i]);
        d.appendArray (OrderBookItemGrp, c);
    }
}

void
eurexCodec::getSRQSDealNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSDealNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSDealNotification");
    d.setString (MessageName, "SRQSDealNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getTransactTime, &eurexSRQSDealNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getUnderlyingPriceStipValue, &eurexSRQSDealNotificationPacket::isUnderlyingPriceStipValueValid> (d, UnderlyingPriceStipValue, packet);
    eti::setDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getUnderlyingPx, &eurexSRQSDealNotificationPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getLastPx, &eurexSRQSDealNotificationPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getLastQty, &eurexSRQSDealNotificationPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setInteger<uint32_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getNegotiationID, &eurexSRQSDealNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getTradeID, &eurexSRQSDealNotificationPacket::isTradeIDValid> (d, TradeID, packet);
    eti::setInteger<int8_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getTrdRptStatus, &eurexSRQSDealNotificationPacket::isTrdRptStatusValid> (d, TrdRptStatus, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getMessageEventSource, &eurexSRQSDealNotificationPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getRootPartyExecutingFirm, &eurexSRQSDealNotificationPacket::isRootPartyExecutingFirmValid> (d, RootPartyExecutingFirm, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getRootPartyExecutingTrader, &eurexSRQSDealNotificationPacket::isRootPartyExecutingTraderValid> (d, RootPartyExecutingTrader, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getRootPartyEnteringTrader, &eurexSRQSDealNotificationPacket::isRootPartyEnteringTraderValid> (d, RootPartyEnteringTrader, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getTargetPartyExecutingFirm, &eurexSRQSDealNotificationPacket::isTargetPartyExecutingFirmValid> (d, TargetPartyExecutingFirm, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getTargetPartyExecutingTrader, &eurexSRQSDealNotificationPacket::isTargetPartyExecutingTraderValid> (d, TargetPartyExecutingTrader, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getTargetPartyEnteringTrader, &eurexSRQSDealNotificationPacket::isTargetPartyEnteringTraderValid> (d, TargetPartyEnteringTrader, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getFirmTradeID, &eurexSRQSDealNotificationPacket::isFirmTradeIDValid> (d, FirmTradeID, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getFirmNegotiationID, &eurexSRQSDealNotificationPacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::getFreeText5, &eurexSRQSDealNotificationPacket::isFreeText5Valid> (d, FreeText5, packet);
}

void
eurexCodec::getSRQSDealResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSDealResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSDealResponse");
    d.setString (MessageName, "SRQSDealResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<int64_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getSecurityID, &eurexSRQSDealResponsePacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<uint64_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getQuoteID, &eurexSRQSDealResponsePacket::isQuoteIDValid> (d, QuoteID, packet);
    eti::setInteger<uint32_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getNegotiationID, &eurexSRQSDealResponsePacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getTradeID, &eurexSRQSDealResponsePacket::isTradeIDValid> (d, TradeID, packet);
    eti::setInteger<uint32_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getSecondaryTradeID, &eurexSRQSDealResponsePacket::isSecondaryTradeIDValid> (d, SecondaryTradeID, packet);
    eti::setString<eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getFirmTradeID, &eurexSRQSDealResponsePacket::isFirmTradeIDValid> (d, FirmTradeID, packet);
    eti::setString<eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getFirmNegotiationID, &eurexSRQSDealResponsePacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::getPad4, &eurexSRQSDealResponsePacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getSRQSEnterQuoteRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSEnterQuoteRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSEnterQuoteRequest");
    d.setString (MessageName, "SRQSEnterQuoteRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getBidPx, &eurexSRQSEnterQuoteRequestPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getOfferPx, &eurexSRQSEnterQuoteRequestPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getUnderlyingPx, &eurexSRQSEnterQuoteRequestPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getUnderlyingDeltaPercentage, &eurexSRQSEnterQuoteRequestPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getBidSize, &eurexSRQSEnterQuoteRequestPacket::isBidSizeValid> (d, BidSize, packet);
    eti::setDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getOfferSize, &eurexSRQSEnterQuoteRequestPacket::isOfferSizeValid> (d, OfferSize, packet);
    eti::setInteger<int32_t, eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getMarketSegmentID, &eurexSRQSEnterQuoteRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getNegotiationID, &eurexSRQSEnterQuoteRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getValueCheckTypeQuantity, &eurexSRQSEnterQuoteRequestPacket::isValueCheckTypeQuantityValid> (d, ValueCheckTypeQuantity, packet);
    eti::setString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getPartyExecutingFirm, &eurexSRQSEnterQuoteRequestPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getPartyExecutingTrader, &eurexSRQSEnterQuoteRequestPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getFreeText1, &eurexSRQSEnterQuoteRequestPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getFreeText5, &eurexSRQSEnterQuoteRequestPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::getPad4, &eurexSRQSEnterQuoteRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getSRQSHitQuoteRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSHitQuoteRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSHitQuoteRequest");
    d.setString (MessageName, "SRQSHitQuoteRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint64_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getQuoteID, &eurexSRQSHitQuoteRequestPacket::isQuoteIDValid> (d, QuoteID, packet);
    eti::setDouble<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getOrderQty, &eurexSRQSHitQuoteRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<uint64_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getValidUntilTime, &eurexSRQSHitQuoteRequestPacket::isValidUntilTimeValid> (d, ValidUntilTime, packet);
    eti::setDouble<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getUnderlyingQty, &eurexSRQSHitQuoteRequestPacket::isUnderlyingQtyValid> (d, UnderlyingQty, packet);
    eti::setDouble<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getUnderlyingPriceStipValue, &eurexSRQSHitQuoteRequestPacket::isUnderlyingPriceStipValueValid> (d, UnderlyingPriceStipValue, packet);
    eti::setInteger<int32_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getMarketSegmentID, &eurexSRQSHitQuoteRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getNegotiationID, &eurexSRQSHitQuoteRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getSide, &eurexSRQSHitQuoteRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getValueCheckTypeQuantity, &eurexSRQSHitQuoteRequestPacket::isValueCheckTypeQuantityValid> (d, ValueCheckTypeQuantity, packet);
    eti::setString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getPartyExecutingFirm, &eurexSRQSHitQuoteRequestPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getPartyExecutingTrader, &eurexSRQSHitQuoteRequestPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getFirmTradeID, &eurexSRQSHitQuoteRequestPacket::isFirmTradeIDValid> (d, FirmTradeID, packet);
    eti::setString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getFreeText1, &eurexSRQSHitQuoteRequestPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getFreeText5, &eurexSRQSHitQuoteRequestPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::getPad7, &eurexSRQSHitQuoteRequestPacket::isPad7Valid> (d, Pad7, packet);
}

void
eurexCodec::getSRQSNegotiationNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSNegotiationNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSNegotiationNotification");
    d.setString (MessageName, "SRQSNegotiationNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getTransactTime, &eurexSRQSNegotiationNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getQuoteRefPrice, &eurexSRQSNegotiationNotificationPacket::isQuoteRefPriceValid> (d, QuoteRefPrice, packet);
    eti::setDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getUnderlyingDeltaPercentage, &eurexSRQSNegotiationNotificationPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getBidPx, &eurexSRQSNegotiationNotificationPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getOfferPx, &eurexSRQSNegotiationNotificationPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getLastPx, &eurexSRQSNegotiationNotificationPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getLeavesQty, &eurexSRQSNegotiationNotificationPacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getLastQty, &eurexSRQSNegotiationNotificationPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setInteger<uint32_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getNegotiationID, &eurexSRQSNegotiationNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getNumberOfRespondents, &eurexSRQSNegotiationNotificationPacket::isNumberOfRespondentsValid> (d, NumberOfRespondents, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getQuoteType, &eurexSRQSNegotiationNotificationPacket::isQuoteTypeValid> (d, QuoteType, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getQuoteSubType, &eurexSRQSNegotiationNotificationPacket::isQuoteSubTypeValid> (d, QuoteSubType, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getQuoteStatus, &eurexSRQSNegotiationNotificationPacket::isQuoteStatusValid> (d, QuoteStatus, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getQuoteInstruction, &eurexSRQSNegotiationNotificationPacket::isQuoteInstructionValid> (d, QuoteInstruction, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getSide, &eurexSRQSNegotiationNotificationPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getQuoteRefPriceSource, &eurexSRQSNegotiationNotificationPacket::isQuoteRefPriceSourceValid> (d, QuoteRefPriceSource, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getPartyExecutingFirm, &eurexSRQSNegotiationNotificationPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getPartyExecutingTrader, &eurexSRQSNegotiationNotificationPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getPartyEnteringTrader, &eurexSRQSNegotiationNotificationPacket::isPartyEnteringTraderValid> (d, PartyEnteringTrader, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getTargetPartyExecutingFirm, &eurexSRQSNegotiationNotificationPacket::isTargetPartyExecutingFirmValid> (d, TargetPartyExecutingFirm, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getTargetPartyExecutingTrader, &eurexSRQSNegotiationNotificationPacket::isTargetPartyExecutingTraderValid> (d, TargetPartyExecutingTrader, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getFirmNegotiationID, &eurexSRQSNegotiationNotificationPacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getFreeText5, &eurexSRQSNegotiationNotificationPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::getPad6, &eurexSRQSNegotiationNotificationPacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getSRQSNegotiationRequesterNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSNegotiationRequesterNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSNegotiationRequesterNotification");
    d.setString (MessageName, "SRQSNegotiationRequesterNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getTransactTime, &eurexSRQSNegotiationRequesterNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint64_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getTrdRegTSExecutionTime, &eurexSRQSNegotiationRequesterNotificationPacket::isTrdRegTSExecutionTimeValid> (d, TrdRegTSExecutionTime, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getQuoteRefPrice, &eurexSRQSNegotiationRequesterNotificationPacket::isQuoteRefPriceValid> (d, QuoteRefPrice, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getUnderlyingDeltaPercentage, &eurexSRQSNegotiationRequesterNotificationPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getBidPx, &eurexSRQSNegotiationRequesterNotificationPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getOfferPx, &eurexSRQSNegotiationRequesterNotificationPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getOrderQty, &eurexSRQSNegotiationRequesterNotificationPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getLastPx, &eurexSRQSNegotiationRequesterNotificationPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getLeavesQty, &eurexSRQSNegotiationRequesterNotificationPacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getLastQty, &eurexSRQSNegotiationRequesterNotificationPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setInteger<uint32_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getNegotiationID, &eurexSRQSNegotiationRequesterNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getNumberOfRespondents, &eurexSRQSNegotiationRequesterNotificationPacket::isNumberOfRespondentsValid> (d, NumberOfRespondents, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getQuoteType, &eurexSRQSNegotiationRequesterNotificationPacket::isQuoteTypeValid> (d, QuoteType, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getQuoteSubType, &eurexSRQSNegotiationRequesterNotificationPacket::isQuoteSubTypeValid> (d, QuoteSubType, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getQuoteStatus, &eurexSRQSNegotiationRequesterNotificationPacket::isQuoteStatusValid> (d, QuoteStatus, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getNoTargetPartyIDs, &eurexSRQSNegotiationRequesterNotificationPacket::isNoTargetPartyIDsValid> (d, NoTargetPartyIDs, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getNumberOfRespDisclosureInstruction, &eurexSRQSNegotiationRequesterNotificationPacket::isNumberOfRespDisclosureInstructionValid> (d, NumberOfRespDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getSide, &eurexSRQSNegotiationRequesterNotificationPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getQuoteRefPriceSource, &eurexSRQSNegotiationRequesterNotificationPacket::isQuoteRefPriceSourceValid> (d, QuoteRefPriceSource, packet);
    eti::setString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getPartyExecutingFirm, &eurexSRQSNegotiationRequesterNotificationPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getPartyExecutingTrader, &eurexSRQSNegotiationRequesterNotificationPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getPartyEnteringTrader, &eurexSRQSNegotiationRequesterNotificationPacket::isPartyEnteringTraderValid> (d, PartyEnteringTrader, packet);
    eti::setString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getFirmNegotiationID, &eurexSRQSNegotiationRequesterNotificationPacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::getFreeText5, &eurexSRQSNegotiationRequesterNotificationPacket::isFreeText5Valid> (d, FreeText5, packet);
    const vector<eurexTargetPartiesCompPacket>& vTargetParties = packet.getTargetParties ();
    for (size_t i = 0; i < vTargetParties.size (); i++)
    {
        cdr c;
        getTargetPartiesComp (c, vTargetParties[i]);
        d.appendArray (TargetParties, c);
    }
}

void
eurexCodec::getSRQSNegotiationStatusNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSNegotiationStatusNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSNegotiationStatusNotification");
    d.setString (MessageName, "SRQSNegotiationStatusNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::getTransactTime, &eurexSRQSNegotiationStatusNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint32_t, eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::getNegotiationID, &eurexSRQSNegotiationStatusNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::getQuoteStatus, &eurexSRQSNegotiationStatusNotificationPacket::isQuoteStatusValid> (d, QuoteStatus, packet);
    eti::setString<eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::getFirmNegotiationID, &eurexSRQSNegotiationStatusNotificationPacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::getPad7, &eurexSRQSNegotiationStatusNotificationPacket::isPad7Valid> (d, Pad7, packet);
}

void
eurexCodec::getSRQSOpenNegotiationNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSOpenNegotiationNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSOpenNegotiationNotification");
    d.setString (MessageName, "SRQSOpenNegotiationNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getTransactTime, &eurexSRQSOpenNegotiationNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint64_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getNegotiationStartTime, &eurexSRQSOpenNegotiationNotificationPacket::isNegotiationStartTimeValid> (d, NegotiationStartTime, packet);
    eti::setInteger<int64_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getSecurityID, &eurexSRQSOpenNegotiationNotificationPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getBidPx, &eurexSRQSOpenNegotiationNotificationPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getOfferPx, &eurexSRQSOpenNegotiationNotificationPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getLeavesQty, &eurexSRQSOpenNegotiationNotificationPacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getLastQty, &eurexSRQSOpenNegotiationNotificationPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getLastPx, &eurexSRQSOpenNegotiationNotificationPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getQuoteRefPrice, &eurexSRQSOpenNegotiationNotificationPacket::isQuoteRefPriceValid> (d, QuoteRefPrice, packet);
    eti::setDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getUnderlyingDeltaPercentage, &eurexSRQSOpenNegotiationNotificationPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setInteger<uint32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getNegotiationID, &eurexSRQSOpenNegotiationNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getMarketSegmentID, &eurexSRQSOpenNegotiationNotificationPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getSecuritySubType, &eurexSRQSOpenNegotiationNotificationPacket::isSecuritySubTypeValid> (d, SecuritySubType, packet);
    eti::setInteger<uint32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getNumberOfRespondents, &eurexSRQSOpenNegotiationNotificationPacket::isNumberOfRespondentsValid> (d, NumberOfRespondents, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getQuoteType, &eurexSRQSOpenNegotiationNotificationPacket::isQuoteTypeValid> (d, QuoteType, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getQuoteSubType, &eurexSRQSOpenNegotiationNotificationPacket::isQuoteSubTypeValid> (d, QuoteSubType, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getQuoteStatus, &eurexSRQSOpenNegotiationNotificationPacket::isQuoteStatusValid> (d, QuoteStatus, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getNoLegs, &eurexSRQSOpenNegotiationNotificationPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getSide, &eurexSRQSOpenNegotiationNotificationPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getQuoteRefPriceSource, &eurexSRQSOpenNegotiationNotificationPacket::isQuoteRefPriceSourceValid> (d, QuoteRefPriceSource, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getTradeUnderlying, &eurexSRQSOpenNegotiationNotificationPacket::isTradeUnderlyingValid> (d, TradeUnderlying, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getProductComplex, &eurexSRQSOpenNegotiationNotificationPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getNegotiateUnderlying, &eurexSRQSOpenNegotiationNotificationPacket::isNegotiateUnderlyingValid> (d, NegotiateUnderlying, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getPartyExecutingFirm, &eurexSRQSOpenNegotiationNotificationPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getPartyExecutingTrader, &eurexSRQSOpenNegotiationNotificationPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getPartyEnteringTrader, &eurexSRQSOpenNegotiationNotificationPacket::isPartyEnteringTraderValid> (d, PartyEnteringTrader, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getTargetPartyExecutingFirm, &eurexSRQSOpenNegotiationNotificationPacket::isTargetPartyExecutingFirmValid> (d, TargetPartyExecutingFirm, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getTargetPartyExecutingTrader, &eurexSRQSOpenNegotiationNotificationPacket::isTargetPartyExecutingTraderValid> (d, TargetPartyExecutingTrader, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getFirmNegotiationID, &eurexSRQSOpenNegotiationNotificationPacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getFreeText5, &eurexSRQSOpenNegotiationNotificationPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::getPad3, &eurexSRQSOpenNegotiationNotificationPacket::isPad3Valid> (d, Pad3, packet);
    const vector<eurexQuotReqLegsGrpCompPacket>& vQuotReqLegsGrp = packet.getQuotReqLegsGrp ();
    for (size_t i = 0; i < vQuotReqLegsGrp.size (); i++)
    {
        cdr c;
        getQuotReqLegsGrpComp (c, vQuotReqLegsGrp[i]);
        d.appendArray (QuotReqLegsGrp, c);
    }
}

void
eurexCodec::getSRQSOpenNegotiationRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSOpenNegotiationRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSOpenNegotiationRequest");
    d.setString (MessageName, "SRQSOpenNegotiationRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getSecurityID, &eurexSRQSOpenNegotiationRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getBidPx, &eurexSRQSOpenNegotiationRequestPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getOfferPx, &eurexSRQSOpenNegotiationRequestPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getOrderQty, &eurexSRQSOpenNegotiationRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getQuoteRefPrice, &eurexSRQSOpenNegotiationRequestPacket::isQuoteRefPriceValid> (d, QuoteRefPrice, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getUnderlyingDeltaPercentage, &eurexSRQSOpenNegotiationRequestPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setInteger<int32_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getMarketSegmentID, &eurexSRQSOpenNegotiationRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getSecuritySubType, &eurexSRQSOpenNegotiationRequestPacket::isSecuritySubTypeValid> (d, SecuritySubType, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getQuoteType, &eurexSRQSOpenNegotiationRequestPacket::isQuoteTypeValid> (d, QuoteType, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getQuoteSubType, &eurexSRQSOpenNegotiationRequestPacket::isQuoteSubTypeValid> (d, QuoteSubType, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getNoLegs, &eurexSRQSOpenNegotiationRequestPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getNoTargetPartyIDs, &eurexSRQSOpenNegotiationRequestPacket::isNoTargetPartyIDsValid> (d, NoTargetPartyIDs, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getNumberOfRespDisclosureInstruction, &eurexSRQSOpenNegotiationRequestPacket::isNumberOfRespDisclosureInstructionValid> (d, NumberOfRespDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getSide, &eurexSRQSOpenNegotiationRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getQuoteRefPriceSource, &eurexSRQSOpenNegotiationRequestPacket::isQuoteRefPriceSourceValid> (d, QuoteRefPriceSource, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getTradeUnderlying, &eurexSRQSOpenNegotiationRequestPacket::isTradeUnderlyingValid> (d, TradeUnderlying, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getNegotiateUnderlying, &eurexSRQSOpenNegotiationRequestPacket::isNegotiateUnderlyingValid> (d, NegotiateUnderlying, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getProductComplex, &eurexSRQSOpenNegotiationRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getPartyExecutingFirm, &eurexSRQSOpenNegotiationRequestPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getPartyExecutingTrader, &eurexSRQSOpenNegotiationRequestPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getFreeText5, &eurexSRQSOpenNegotiationRequestPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getQuoteReqID, &eurexSRQSOpenNegotiationRequestPacket::isQuoteReqIDValid> (d, QuoteReqID, packet);
    eti::setString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::getPad3, &eurexSRQSOpenNegotiationRequestPacket::isPad3Valid> (d, Pad3, packet);
    const vector<eurexQuotReqLegsGrpCompPacket>& vQuotReqLegsGrp = packet.getQuotReqLegsGrp ();
    for (size_t i = 0; i < vQuotReqLegsGrp.size (); i++)
    {
        cdr c;
        getQuotReqLegsGrpComp (c, vQuotReqLegsGrp[i]);
        d.appendArray (QuotReqLegsGrp, c);
    }
    const vector<eurexTargetPartiesCompPacket>& vTargetParties = packet.getTargetParties ();
    for (size_t i = 0; i < vTargetParties.size (); i++)
    {
        cdr c;
        getTargetPartiesComp (c, vTargetParties[i]);
        d.appendArray (TargetParties, c);
    }
}

void
eurexCodec::getSRQSOpenNegotiationRequesterNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSOpenNegotiationRequesterNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSOpenNegotiationRequesterNotification");
    d.setString (MessageName, "SRQSOpenNegotiationRequesterNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getTransactTime, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int64_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getSecurityID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getBidPx, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getOfferPx, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getOrderQty, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getLastPx, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getLastQty, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getQuoteRefPrice, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isQuoteRefPriceValid> (d, QuoteRefPrice, packet);
    eti::setDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getUnderlyingDeltaPercentage, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setInteger<uint32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getNegotiationID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getMarketSegmentID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getSecuritySubType, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isSecuritySubTypeValid> (d, SecuritySubType, packet);
    eti::setInteger<uint32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getNumberOfRespondents, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isNumberOfRespondentsValid> (d, NumberOfRespondents, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getQuoteType, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isQuoteTypeValid> (d, QuoteType, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getQuoteSubType, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isQuoteSubTypeValid> (d, QuoteSubType, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getQuoteStatus, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isQuoteStatusValid> (d, QuoteStatus, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getNoLegs, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getNoTargetPartyIDs, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isNoTargetPartyIDsValid> (d, NoTargetPartyIDs, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getSide, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getQuoteRefPriceSource, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isQuoteRefPriceSourceValid> (d, QuoteRefPriceSource, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getTradeUnderlying, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isTradeUnderlyingValid> (d, TradeUnderlying, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getNegotiateUnderlying, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isNegotiateUnderlyingValid> (d, NegotiateUnderlying, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getProductComplex, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getNumberOfRespDisclosureInstruction, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isNumberOfRespDisclosureInstructionValid> (d, NumberOfRespDisclosureInstruction, packet);
    eti::setString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getPartyExecutingFirm, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getPartyExecutingTrader, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getPartyEnteringTrader, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isPartyEnteringTraderValid> (d, PartyEnteringTrader, packet);
    eti::setString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getFirmNegotiationID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isFirmNegotiationIDValid> (d, FirmNegotiationID, packet);
    eti::setString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getFreeText5, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::getPad4, &eurexSRQSOpenNegotiationRequesterNotificationPacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexQuotReqLegsGrpCompPacket>& vQuotReqLegsGrp = packet.getQuotReqLegsGrp ();
    for (size_t i = 0; i < vQuotReqLegsGrp.size (); i++)
    {
        cdr c;
        getQuotReqLegsGrpComp (c, vQuotReqLegsGrp[i]);
        d.appendArray (QuotReqLegsGrp, c);
    }
    const vector<eurexTargetPartiesCompPacket>& vTargetParties = packet.getTargetParties ();
    for (size_t i = 0; i < vTargetParties.size (); i++)
    {
        cdr c;
        getTargetPartiesComp (c, vTargetParties[i]);
        d.appendArray (TargetParties, c);
    }
}

void
eurexCodec::getSRQSQuoteNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSQuoteNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSQuoteNotification");
    d.setString (MessageName, "SRQSQuoteNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getTransactTime, &eurexSRQSQuoteNotificationPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint64_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getQuoteID, &eurexSRQSQuoteNotificationPacket::isQuoteIDValid> (d, QuoteID, packet);
    eti::setInteger<uint64_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getSecondaryQuoteID, &eurexSRQSQuoteNotificationPacket::isSecondaryQuoteIDValid> (d, SecondaryQuoteID, packet);
    eti::setDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getBidPx, &eurexSRQSQuoteNotificationPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getBidSize, &eurexSRQSQuoteNotificationPacket::isBidSizeValid> (d, BidSize, packet);
    eti::setDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getOfferPx, &eurexSRQSQuoteNotificationPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getOfferSize, &eurexSRQSQuoteNotificationPacket::isOfferSizeValid> (d, OfferSize, packet);
    eti::setDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getUnderlyingPx, &eurexSRQSQuoteNotificationPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getUnderlyingDeltaPercentage, &eurexSRQSQuoteNotificationPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setInteger<uint32_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getNegotiationID, &eurexSRQSQuoteNotificationPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getQuotingStatus, &eurexSRQSQuoteNotificationPacket::isQuotingStatusValid> (d, QuotingStatus, packet);
    eti::setString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getPartyExecutingFirm, &eurexSRQSQuoteNotificationPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getPartyExecutingTrader, &eurexSRQSQuoteNotificationPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getPartyEnteringTrader, &eurexSRQSQuoteNotificationPacket::isPartyEnteringTraderValid> (d, PartyEnteringTrader, packet);
    eti::setString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getQuoteReqID, &eurexSRQSQuoteNotificationPacket::isQuoteReqIDValid> (d, QuoteReqID, packet);
    eti::setString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getFreeText1, &eurexSRQSQuoteNotificationPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getFreeText5, &eurexSRQSQuoteNotificationPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::getPad6, &eurexSRQSQuoteNotificationPacket::isPad6Valid> (d, Pad6, packet);
}

void
eurexCodec::getSRQSQuoteResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSQuoteResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSQuoteResponse");
    d.setString (MessageName, "SRQSQuoteResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<uint64_t, eurexSRQSQuoteResponsePacket, &eurexSRQSQuoteResponsePacket::getQuoteID, &eurexSRQSQuoteResponsePacket::isQuoteIDValid> (d, QuoteID, packet);
    eti::setInteger<uint32_t, eurexSRQSQuoteResponsePacket, &eurexSRQSQuoteResponsePacket::getNegotiationID, &eurexSRQSQuoteResponsePacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setString<eurexSRQSQuoteResponsePacket, &eurexSRQSQuoteResponsePacket::getQuoteReqID, &eurexSRQSQuoteResponsePacket::isQuoteReqIDValid> (d, QuoteReqID, packet);
}

void
eurexCodec::getSRQSQuotingStatusRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSQuotingStatusRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSQuotingStatusRequest");
    d.setString (MessageName, "SRQSQuotingStatusRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::getMarketSegmentID, &eurexSRQSQuotingStatusRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::getNegotiationID, &eurexSRQSQuotingStatusRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::getQuotingStatus, &eurexSRQSQuotingStatusRequestPacket::isQuotingStatusValid> (d, QuotingStatus, packet);
    eti::setString<eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::getPartyExecutingFirm, &eurexSRQSQuotingStatusRequestPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::getPartyExecutingTrader, &eurexSRQSQuotingStatusRequestPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::getFreeText5, &eurexSRQSQuotingStatusRequestPacket::isFreeText5Valid> (d, FreeText5, packet);
}

void
eurexCodec::getSRQSStatusBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSStatusBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSStatusBroadcast");
    d.setString (MessageName, "SRQSStatusBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int32_t, eurexSRQSStatusBroadcastPacket, &eurexSRQSStatusBroadcastPacket::getTradeDate, &eurexSRQSStatusBroadcastPacket::isTradeDateValid> (d, TradeDate, packet);
    eti::setInteger<int8_t, eurexSRQSStatusBroadcastPacket, &eurexSRQSStatusBroadcastPacket::getTradSesEvent, &eurexSRQSStatusBroadcastPacket::isTradSesEventValid> (d, TradSesEvent, packet);
    eti::setString<eurexSRQSStatusBroadcastPacket, &eurexSRQSStatusBroadcastPacket::getPad3, &eurexSRQSStatusBroadcastPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getSRQSUpdateDealStatusRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSUpdateDealStatusRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSUpdateDealStatusRequest");
    d.setString (MessageName, "SRQSUpdateDealStatusRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setDouble<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getUnderlyingPriceStipValue, &eurexSRQSUpdateDealStatusRequestPacket::isUnderlyingPriceStipValueValid> (d, UnderlyingPriceStipValue, packet);
    eti::setDouble<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getUnderlyingPx, &eurexSRQSUpdateDealStatusRequestPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getLastQty, &eurexSRQSUpdateDealStatusRequestPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setInteger<int32_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getMarketSegmentID, &eurexSRQSUpdateDealStatusRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getNegotiationID, &eurexSRQSUpdateDealStatusRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<uint32_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getTradeID, &eurexSRQSUpdateDealStatusRequestPacket::isTradeIDValid> (d, TradeID, packet);
    eti::setInteger<int8_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getTradeReportType, &eurexSRQSUpdateDealStatusRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getTrdRptStatus, &eurexSRQSUpdateDealStatusRequestPacket::isTrdRptStatusValid> (d, TrdRptStatus, packet);
    eti::setString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getPartyExecutingFirm, &eurexSRQSUpdateDealStatusRequestPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getPartyExecutingTrader, &eurexSRQSUpdateDealStatusRequestPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getFreeText5, &eurexSRQSUpdateDealStatusRequestPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::getPad3, &eurexSRQSUpdateDealStatusRequestPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getSRQSUpdateNegotiationRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSRQSUpdateNegotiationRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SRQSUpdateNegotiationRequest");
    d.setString (MessageName, "SRQSUpdateNegotiationRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getQuoteRefPrice, &eurexSRQSUpdateNegotiationRequestPacket::isQuoteRefPriceValid> (d, QuoteRefPrice, packet);
    eti::setDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getUnderlyingDeltaPercentage, &eurexSRQSUpdateNegotiationRequestPacket::isUnderlyingDeltaPercentageValid> (d, UnderlyingDeltaPercentage, packet);
    eti::setDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getBidPx, &eurexSRQSUpdateNegotiationRequestPacket::isBidPxValid> (d, BidPx, packet);
    eti::setDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getOfferPx, &eurexSRQSUpdateNegotiationRequestPacket::isOfferPxValid> (d, OfferPx, packet);
    eti::setDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getOrderQty, &eurexSRQSUpdateNegotiationRequestPacket::isOrderQtyValid> (d, OrderQty, packet);
    eti::setInteger<int32_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getMarketSegmentID, &eurexSRQSUpdateNegotiationRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getNegotiationID, &eurexSRQSUpdateNegotiationRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getNoTargetPartyIDs, &eurexSRQSUpdateNegotiationRequestPacket::isNoTargetPartyIDsValid> (d, NoTargetPartyIDs, packet);
    eti::setInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getNumberOfRespDisclosureInstruction, &eurexSRQSUpdateNegotiationRequestPacket::isNumberOfRespDisclosureInstructionValid> (d, NumberOfRespDisclosureInstruction, packet);
    eti::setInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getSide, &eurexSRQSUpdateNegotiationRequestPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getQuoteCancelType, &eurexSRQSUpdateNegotiationRequestPacket::isQuoteCancelTypeValid> (d, QuoteCancelType, packet);
    eti::setInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getQuoteRefPriceSource, &eurexSRQSUpdateNegotiationRequestPacket::isQuoteRefPriceSourceValid> (d, QuoteRefPriceSource, packet);
    eti::setString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getPartyExecutingFirm, &eurexSRQSUpdateNegotiationRequestPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getPartyExecutingTrader, &eurexSRQSUpdateNegotiationRequestPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getFreeText5, &eurexSRQSUpdateNegotiationRequestPacket::isFreeText5Valid> (d, FreeText5, packet);
    eti::setString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::getPad4, &eurexSRQSUpdateNegotiationRequestPacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexTargetPartiesCompPacket>& vTargetParties = packet.getTargetParties ();
    for (size_t i = 0; i < vTargetParties.size (); i++)
    {
        cdr c;
        getTargetPartiesComp (c, vTargetParties[i]);
        d.appendArray (TargetParties, c);
    }
}

void
eurexCodec::getServiceAvailabilityBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexServiceAvailabilityBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ServiceAvailabilityBroadcast");
    d.setString (MessageName, "ServiceAvailabilityBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRBCHeaderComp (d, packet.getNRBCHeader ());
    eti::setInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getMatchingEngineTradeDate, &eurexServiceAvailabilityBroadcastPacket::isMatchingEngineTradeDateValid> (d, MatchingEngineTradeDate, packet);
    eti::setInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getTradeManagerTradeDate, &eurexServiceAvailabilityBroadcastPacket::isTradeManagerTradeDateValid> (d, TradeManagerTradeDate, packet);
    eti::setInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getApplSeqTradeDate, &eurexServiceAvailabilityBroadcastPacket::isApplSeqTradeDateValid> (d, ApplSeqTradeDate, packet);
    eti::setInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getT7EntryServiceTradeDate, &eurexServiceAvailabilityBroadcastPacket::isT7EntryServiceTradeDateValid> (d, T7EntryServiceTradeDate, packet);
    eti::setInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getT7EntryServiceRtmTradeDate, &eurexServiceAvailabilityBroadcastPacket::isT7EntryServiceRtmTradeDateValid> (d, T7EntryServiceRtmTradeDate, packet);
    eti::setInteger<uint16_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getPartitionID, &eurexServiceAvailabilityBroadcastPacket::isPartitionIDValid> (d, PartitionID, packet);
    eti::setInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getMatchingEngineStatus, &eurexServiceAvailabilityBroadcastPacket::isMatchingEngineStatusValid> (d, MatchingEngineStatus, packet);
    eti::setInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getTradeManagerStatus, &eurexServiceAvailabilityBroadcastPacket::isTradeManagerStatusValid> (d, TradeManagerStatus, packet);
    eti::setInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getApplSeqStatus, &eurexServiceAvailabilityBroadcastPacket::isApplSeqStatusValid> (d, ApplSeqStatus, packet);
    eti::setInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getT7EntryServiceStatus, &eurexServiceAvailabilityBroadcastPacket::isT7EntryServiceStatusValid> (d, T7EntryServiceStatus, packet);
    eti::setInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getT7EntryServiceRtmStatus, &eurexServiceAvailabilityBroadcastPacket::isT7EntryServiceRtmStatusValid> (d, T7EntryServiceRtmStatus, packet);
    eti::setString<eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::getPad5, &eurexServiceAvailabilityBroadcastPacket::isPad5Valid> (d, Pad5, packet);
}

void
eurexCodec::getServiceAvailabilityMarketBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexServiceAvailabilityMarketBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ServiceAvailabilityMarketBroadcast");
    d.setString (MessageName, "ServiceAvailabilityMarketBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNRBCHeaderComp (d, packet.getNRBCHeader ());
    eti::setInteger<int32_t, eurexServiceAvailabilityMarketBroadcastPacket, &eurexServiceAvailabilityMarketBroadcastPacket::getSelectiveRequestForQuoteServiceTradeDate, &eurexServiceAvailabilityMarketBroadcastPacket::isSelectiveRequestForQuoteServiceTradeDateValid> (d, SelectiveRequestForQuoteServiceTradeDate, packet);
    eti::setInteger<int8_t, eurexServiceAvailabilityMarketBroadcastPacket, &eurexServiceAvailabilityMarketBroadcastPacket::getSelectiveRequestForQuoteServiceStatus, &eurexServiceAvailabilityMarketBroadcastPacket::isSelectiveRequestForQuoteServiceStatusValid> (d, SelectiveRequestForQuoteServiceStatus, packet);
    eti::setString<eurexServiceAvailabilityMarketBroadcastPacket, &eurexServiceAvailabilityMarketBroadcastPacket::getPad3, &eurexServiceAvailabilityMarketBroadcastPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getSubscribeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSubscribeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SubscribeRequest");
    d.setString (MessageName, "SubscribeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint32_t, eurexSubscribeRequestPacket, &eurexSubscribeRequestPacket::getSubscriptionScope, &eurexSubscribeRequestPacket::isSubscriptionScopeValid> (d, SubscriptionScope, packet);
    eti::setInteger<int8_t, eurexSubscribeRequestPacket, &eurexSubscribeRequestPacket::getRefApplID, &eurexSubscribeRequestPacket::isRefApplIDValid> (d, RefApplID, packet);
    eti::setString<eurexSubscribeRequestPacket, &eurexSubscribeRequestPacket::getPad3, &eurexSubscribeRequestPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getSubscribeResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexSubscribeResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize SubscribeResponse");
    d.setString (MessageName, "SubscribeResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<uint32_t, eurexSubscribeResponsePacket, &eurexSubscribeResponsePacket::getApplSubID, &eurexSubscribeResponsePacket::isApplSubIDValid> (d, ApplSubID, packet);
    eti::setString<eurexSubscribeResponsePacket, &eurexSubscribeResponsePacket::getPad4, &eurexSubscribeResponsePacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getTESApproveBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESApproveBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESApproveBroadcast");
    d.setString (MessageName, "TESApproveBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int64_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getSecurityID, &eurexTESApproveBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getLastPx, &eurexTESApproveBroadcastPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getAllocQty, &eurexTESApproveBroadcastPacket::isAllocQtyValid> (d, AllocQty, packet);
    eti::setInteger<uint64_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTransactTime, &eurexTESApproveBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingPx, &eurexTESApproveBroadcastPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setInteger<uint64_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTransBkdTime, &eurexTESApproveBroadcastPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getRelatedClosePrice, &eurexTESApproveBroadcastPacket::isRelatedClosePriceValid> (d, RelatedClosePrice, packet);
    eti::setDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getRelatedTradeQuantity, &eurexTESApproveBroadcastPacket::isRelatedTradeQuantityValid> (d, RelatedTradeQuantity, packet);
    eti::setDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingQty, &eurexTESApproveBroadcastPacket::isUnderlyingQtyValid> (d, UnderlyingQty, packet);
    eti::setInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getMarketSegmentID, &eurexTESApproveBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPackageID, &eurexTESApproveBroadcastPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTESExecID, &eurexTESApproveBroadcastPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getAllocID, &eurexTESApproveBroadcastPacket::isAllocIDValid> (d, AllocID, packet);
    eti::setInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingSettlementDate, &eurexTESApproveBroadcastPacket::isUnderlyingSettlementDateValid> (d, UnderlyingSettlementDate, packet);
    eti::setInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingMaturityDate, &eurexTESApproveBroadcastPacket::isUnderlyingMaturityDateValid> (d, UnderlyingMaturityDate, packet);
    eti::setInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getRelatedTradeID, &eurexTESApproveBroadcastPacket::isRelatedTradeIDValid> (d, RelatedTradeID, packet);
    eti::setInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getRelatedMarketSegmentID, &eurexTESApproveBroadcastPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getNegotiationID, &eurexTESApproveBroadcastPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getNoSRQSRelatedTradeIDs, &eurexTESApproveBroadcastPacket::isNoSRQSRelatedTradeIDsValid> (d, NoSRQSRelatedTradeIDs, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPad1, &eurexTESApproveBroadcastPacket::isPad1Valid> (d, Pad1, packet);
    eti::setInteger<int16_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTrdType, &eurexTESApproveBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getSide, &eurexTESApproveBroadcastPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTradePublishIndicator, &eurexTESApproveBroadcastPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getProductComplex, &eurexTESApproveBroadcastPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTradeReportType, &eurexTESApproveBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTradingCapacity, &eurexTESApproveBroadcastPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyIDSettlementLocation, &eurexTESApproveBroadcastPacket::isPartyIDSettlementLocationValid> (d, PartyIDSettlementLocation, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTradeAllocStatus, &eurexTESApproveBroadcastPacket::isTradeAllocStatusValid> (d, TradeAllocStatus, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getHedgeType, &eurexTESApproveBroadcastPacket::isHedgeTypeValid> (d, HedgeType, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getNoLegs, &eurexTESApproveBroadcastPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getNoEvents, &eurexTESApproveBroadcastPacket::isNoEventsValid> (d, NoEvents, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getNoInstrAttrib, &eurexTESApproveBroadcastPacket::isNoInstrAttribValid> (d, NoInstrAttrib, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getNoUnderlyingStips, &eurexTESApproveBroadcastPacket::isNoUnderlyingStipsValid> (d, NoUnderlyingStips, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getMessageEventSource, &eurexTESApproveBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getTradeReportID, &eurexTESApproveBroadcastPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyExecutingFirm, &eurexTESApproveBroadcastPacket::isPartyExecutingFirmValid> (d, PartyExecutingFirm, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyExecutingTrader, &eurexTESApproveBroadcastPacket::isPartyExecutingTraderValid> (d, PartyExecutingTrader, packet);
    eti::setInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyIDEnteringFirm, &eurexTESApproveBroadcastPacket::isPartyIDEnteringFirmValid> (d, PartyIDEnteringFirm, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyEnteringTrader, &eurexTESApproveBroadcastPacket::isPartyEnteringTraderValid> (d, PartyEnteringTrader, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPositionEffect, &eurexTESApproveBroadcastPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getRootPartyExecutingFirm, &eurexTESApproveBroadcastPacket::isRootPartyExecutingFirmValid> (d, RootPartyExecutingFirm, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getRootPartyExecutingTrader, &eurexTESApproveBroadcastPacket::isRootPartyExecutingTraderValid> (d, RootPartyExecutingTrader, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getFreeText1, &eurexTESApproveBroadcastPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getFreeText2, &eurexTESApproveBroadcastPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getFreeText3, &eurexTESApproveBroadcastPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyIDTakeUpTradingFirm, &eurexTESApproveBroadcastPacket::isPartyIDTakeUpTradingFirmValid> (d, PartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getAccount, &eurexTESApproveBroadcastPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyIDPositionAccount, &eurexTESApproveBroadcastPacket::isPartyIDPositionAccountValid> (d, PartyIDPositionAccount, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyIDOrderOriginationFirm, &eurexTESApproveBroadcastPacket::isPartyIDOrderOriginationFirmValid> (d, PartyIDOrderOriginationFirm, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyIDBeneficiary, &eurexTESApproveBroadcastPacket::isPartyIDBeneficiaryValid> (d, PartyIDBeneficiary, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPartyIDLocationID, &eurexTESApproveBroadcastPacket::isPartyIDLocationIDValid> (d, PartyIDLocationID, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getCustOrderHandlingInst, &eurexTESApproveBroadcastPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getComplianceText, &eurexTESApproveBroadcastPacket::isComplianceTextValid> (d, ComplianceText, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingSecurityID, &eurexTESApproveBroadcastPacket::isUnderlyingSecurityIDValid> (d, UnderlyingSecurityID, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingSecurityDesc, &eurexTESApproveBroadcastPacket::isUnderlyingSecurityDescValid> (d, UnderlyingSecurityDesc, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingCurrency, &eurexTESApproveBroadcastPacket::isUnderlyingCurrencyValid> (d, UnderlyingCurrency, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getUnderlyingIssuer, &eurexTESApproveBroadcastPacket::isUnderlyingIssuerValid> (d, UnderlyingIssuer, packet);
    eti::setString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::getPad4, &eurexTESApproveBroadcastPacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexTrdInstrmntLegGrpCompPacket>& vTrdInstrmntLegGrp = packet.getTrdInstrmntLegGrp ();
    for (size_t i = 0; i < vTrdInstrmntLegGrp.size (); i++)
    {
        cdr c;
        getTrdInstrmntLegGrpComp (c, vTrdInstrmntLegGrp[i]);
        d.appendArray (TrdInstrmntLegGrp, c);
    }
    const vector<eurexInstrumentEventGrpCompPacket>& vInstrumentEventGrp = packet.getInstrumentEventGrp ();
    for (size_t i = 0; i < vInstrumentEventGrp.size (); i++)
    {
        cdr c;
        getInstrumentEventGrpComp (c, vInstrumentEventGrp[i]);
        d.appendArray (InstrumentEventGrp, c);
    }
    const vector<eurexInstrumentAttributeGrpCompPacket>& vInstrumentAttributeGrp = packet.getInstrumentAttributeGrp ();
    for (size_t i = 0; i < vInstrumentAttributeGrp.size (); i++)
    {
        cdr c;
        getInstrumentAttributeGrpComp (c, vInstrumentAttributeGrp[i]);
        d.appendArray (InstrumentAttributeGrp, c);
    }
    getUnderlyingStipGrpComp (d, packet.getUnderlyingStipGrp ());
    const vector<eurexSRQSRelatedTradeIDGrpCompPacket>& vSRQSRelatedTradeIDGrp = packet.getSRQSRelatedTradeIDGrp ();
    for (size_t i = 0; i < vSRQSRelatedTradeIDGrp.size (); i++)
    {
        cdr c;
        getSRQSRelatedTradeIDGrpComp (c, vSRQSRelatedTradeIDGrp[i]);
        d.appendArray (SRQSRelatedTradeIDGrp, c);
    }
}

void
eurexCodec::getTESBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESBroadcast");
    d.setString (MessageName, "TESBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int64_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getSecurityID, &eurexTESBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getLastPx, &eurexTESBroadcastPacket::isLastPxValid> (d, LastPx, packet);
    eti::setInteger<uint64_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTransactTime, &eurexTESBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingPx, &eurexTESBroadcastPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setInteger<uint64_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTransBkdTime, &eurexTESBroadcastPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getRelatedClosePrice, &eurexTESBroadcastPacket::isRelatedClosePriceValid> (d, RelatedClosePrice, packet);
    eti::setDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getRelatedTradeQuantity, &eurexTESBroadcastPacket::isRelatedTradeQuantityValid> (d, RelatedTradeQuantity, packet);
    eti::setDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingQty, &eurexTESBroadcastPacket::isUnderlyingQtyValid> (d, UnderlyingQty, packet);
    eti::setInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getMarketSegmentID, &eurexTESBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getPackageID, &eurexTESBroadcastPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTESExecID, &eurexTESBroadcastPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingSettlementDate, &eurexTESBroadcastPacket::isUnderlyingSettlementDateValid> (d, UnderlyingSettlementDate, packet);
    eti::setInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingMaturityDate, &eurexTESBroadcastPacket::isUnderlyingMaturityDateValid> (d, UnderlyingMaturityDate, packet);
    eti::setInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getRelatedTradeID, &eurexTESBroadcastPacket::isRelatedTradeIDValid> (d, RelatedTradeID, packet);
    eti::setInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getRelatedMarketSegmentID, &eurexTESBroadcastPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getNegotiationID, &eurexTESBroadcastPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getNoSRQSRelatedTradeIDs, &eurexTESBroadcastPacket::isNoSRQSRelatedTradeIDsValid> (d, NoSRQSRelatedTradeIDs, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getPad1, &eurexTESBroadcastPacket::isPad1Valid> (d, Pad1, packet);
    eti::setInteger<int16_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTrdType, &eurexTESBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTradeReportType, &eurexTESBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getProductComplex, &eurexTESBroadcastPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTradePublishIndicator, &eurexTESBroadcastPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getNoEvents, &eurexTESBroadcastPacket::isNoEventsValid> (d, NoEvents, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getNoInstrAttrib, &eurexTESBroadcastPacket::isNoInstrAttribValid> (d, NoInstrAttrib, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getNoUnderlyingStips, &eurexTESBroadcastPacket::isNoUnderlyingStipsValid> (d, NoUnderlyingStips, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getNoSideAllocs, &eurexTESBroadcastPacket::isNoSideAllocsValid> (d, NoSideAllocs, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getNoLegs, &eurexTESBroadcastPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getPartyIDSettlementLocation, &eurexTESBroadcastPacket::isPartyIDSettlementLocationValid> (d, PartyIDSettlementLocation, packet);
    eti::setInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getHedgeType, &eurexTESBroadcastPacket::isHedgeTypeValid> (d, HedgeType, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getMessageEventSource, &eurexTESBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTradeReportText, &eurexTESBroadcastPacket::isTradeReportTextValid> (d, TradeReportText, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getTradeReportID, &eurexTESBroadcastPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getRootPartyExecutingFirm, &eurexTESBroadcastPacket::isRootPartyExecutingFirmValid> (d, RootPartyExecutingFirm, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getRootPartyExecutingTrader, &eurexTESBroadcastPacket::isRootPartyExecutingTraderValid> (d, RootPartyExecutingTrader, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingSecurityID, &eurexTESBroadcastPacket::isUnderlyingSecurityIDValid> (d, UnderlyingSecurityID, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingSecurityDesc, &eurexTESBroadcastPacket::isUnderlyingSecurityDescValid> (d, UnderlyingSecurityDesc, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingCurrency, &eurexTESBroadcastPacket::isUnderlyingCurrencyValid> (d, UnderlyingCurrency, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getUnderlyingIssuer, &eurexTESBroadcastPacket::isUnderlyingIssuerValid> (d, UnderlyingIssuer, packet);
    eti::setString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::getPad3, &eurexTESBroadcastPacket::isPad3Valid> (d, Pad3, packet);
    const vector<eurexSideAllocGrpBCCompPacket>& vSideAllocGrpBC = packet.getSideAllocGrpBC ();
    for (size_t i = 0; i < vSideAllocGrpBC.size (); i++)
    {
        cdr c;
        getSideAllocGrpBCComp (c, vSideAllocGrpBC[i]);
        d.appendArray (SideAllocGrpBC, c);
    }
    const vector<eurexTrdInstrmntLegGrpCompPacket>& vTrdInstrmntLegGrp = packet.getTrdInstrmntLegGrp ();
    for (size_t i = 0; i < vTrdInstrmntLegGrp.size (); i++)
    {
        cdr c;
        getTrdInstrmntLegGrpComp (c, vTrdInstrmntLegGrp[i]);
        d.appendArray (TrdInstrmntLegGrp, c);
    }
    const vector<eurexInstrumentEventGrpCompPacket>& vInstrumentEventGrp = packet.getInstrumentEventGrp ();
    for (size_t i = 0; i < vInstrumentEventGrp.size (); i++)
    {
        cdr c;
        getInstrumentEventGrpComp (c, vInstrumentEventGrp[i]);
        d.appendArray (InstrumentEventGrp, c);
    }
    const vector<eurexInstrumentAttributeGrpCompPacket>& vInstrumentAttributeGrp = packet.getInstrumentAttributeGrp ();
    for (size_t i = 0; i < vInstrumentAttributeGrp.size (); i++)
    {
        cdr c;
        getInstrumentAttributeGrpComp (c, vInstrumentAttributeGrp[i]);
        d.appendArray (InstrumentAttributeGrp, c);
    }
    getUnderlyingStipGrpComp (d, packet.getUnderlyingStipGrp ());
    const vector<eurexSRQSRelatedTradeIDGrpCompPacket>& vSRQSRelatedTradeIDGrp = packet.getSRQSRelatedTradeIDGrp ();
    for (size_t i = 0; i < vSRQSRelatedTradeIDGrp.size (); i++)
    {
        cdr c;
        getSRQSRelatedTradeIDGrpComp (c, vSRQSRelatedTradeIDGrp[i]);
        d.appendArray (SRQSRelatedTradeIDGrp, c);
    }
}

void
eurexCodec::getTESDeleteBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESDeleteBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESDeleteBroadcast");
    d.setString (MessageName, "TESDeleteBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getTransactTime, &eurexTESDeleteBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int32_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getMarketSegmentID, &eurexTESDeleteBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getPackageID, &eurexTESDeleteBroadcastPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<uint32_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getTESExecID, &eurexTESDeleteBroadcastPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<int16_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getTrdType, &eurexTESDeleteBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getDeleteReason, &eurexTESDeleteBroadcastPacket::isDeleteReasonValid> (d, DeleteReason, packet);
    eti::setInteger<int8_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getTradeReportType, &eurexTESDeleteBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setString<eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getMessageEventSource, &eurexTESDeleteBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getTradeReportID, &eurexTESDeleteBroadcastPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::getPad3, &eurexTESDeleteBroadcastPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getTESExecutionBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESExecutionBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESExecutionBroadcast");
    d.setString (MessageName, "TESExecutionBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<uint64_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getTransactTime, &eurexTESExecutionBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getMarketSegmentID, &eurexTESExecutionBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getPackageID, &eurexTESExecutionBroadcastPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<uint32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getTESExecID, &eurexTESExecutionBroadcastPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<uint32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getAllocID, &eurexTESExecutionBroadcastPacket::isAllocIDValid> (d, AllocID, packet);
    eti::setInteger<int16_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getTrdType, &eurexTESExecutionBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getTradeReportType, &eurexTESExecutionBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getSide, &eurexTESExecutionBroadcastPacket::isSideValid> (d, Side, packet);
    eti::setString<eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getMessageEventSource, &eurexTESExecutionBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::getPad3, &eurexTESExecutionBroadcastPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getTESResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESResponse");
    d.setString (MessageName, "TESResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
    eti::setInteger<uint32_t, eurexTESResponsePacket, &eurexTESResponsePacket::getTESExecID, &eurexTESResponsePacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setString<eurexTESResponsePacket, &eurexTESResponsePacket::getTradeReportID, &eurexTESResponsePacket::isTradeReportIDValid> (d, TradeReportID, packet);
}

void
eurexCodec::getTESTradeBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESTradeBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESTradeBroadcast");
    d.setString (MessageName, "TESTradeBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getSecurityID, &eurexTESTradeBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getLastPx, &eurexTESTradeBroadcastPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getLastQty, &eurexTESTradeBroadcastPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getClearingTradePrice, &eurexTESTradeBroadcastPacket::isClearingTradePriceValid> (d, ClearingTradePrice, packet);
    eti::setDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getClearingTradeQty, &eurexTESTradeBroadcastPacket::isClearingTradeQtyValid> (d, ClearingTradeQty, packet);
    eti::setInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTransactTime, &eurexTESTradeBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<int64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRelatedSecurityID, &eurexTESTradeBroadcastPacket::isRelatedSecurityIDValid> (d, RelatedSecurityID, packet);
    eti::setInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDClientID, &eurexTESTradeBroadcastPacket::isRootPartyIDClientIDValid> (d, RootPartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getExecutingTrader, &eurexTESTradeBroadcastPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDInvestmentDecisionMaker, &eurexTESTradeBroadcastPacket::isRootPartyIDInvestmentDecisionMakerValid> (d, RootPartyIDInvestmentDecisionMaker, packet);
    eti::setInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getBasketTrdMatchID, &eurexTESTradeBroadcastPacket::isBasketTrdMatchIDValid> (d, BasketTrdMatchID, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getPackageID, &eurexTESTradeBroadcastPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getMarketSegmentID, &eurexTESTradeBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTradeID, &eurexTESTradeBroadcastPacket::isTradeIDValid> (d, TradeID, packet);
    eti::setInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTradeDate, &eurexTESTradeBroadcastPacket::isTradeDateValid> (d, TradeDate, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getSideTradeID, &eurexTESTradeBroadcastPacket::isSideTradeIDValid> (d, SideTradeID, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDSessionID, &eurexTESTradeBroadcastPacket::isRootPartyIDSessionIDValid> (d, RootPartyIDSessionID, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getOrigTradeID, &eurexTESTradeBroadcastPacket::isOrigTradeIDValid> (d, OrigTradeID, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDExecutingUnit, &eurexTESTradeBroadcastPacket::isRootPartyIDExecutingUnitValid> (d, RootPartyIDExecutingUnit, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDExecutingTrader, &eurexTESTradeBroadcastPacket::isRootPartyIDExecutingTraderValid> (d, RootPartyIDExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDClearingUnit, &eurexTESTradeBroadcastPacket::isRootPartyIDClearingUnitValid> (d, RootPartyIDClearingUnit, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getStrategyLinkID, &eurexTESTradeBroadcastPacket::isStrategyLinkIDValid> (d, StrategyLinkID, packet);
    eti::setInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRelatedSymbol, &eurexTESTradeBroadcastPacket::isRelatedSymbolValid> (d, RelatedSymbol, packet);
    eti::setInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTotNumTradeReports, &eurexTESTradeBroadcastPacket::isTotNumTradeReportsValid> (d, TotNumTradeReports, packet);
    eti::setInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getNegotiationID, &eurexTESTradeBroadcastPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getNoSRQSRelatedTradeIDs, &eurexTESTradeBroadcastPacket::isNoSRQSRelatedTradeIDsValid> (d, NoSRQSRelatedTradeIDs, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getPad1, &eurexTESTradeBroadcastPacket::isPad1Valid> (d, Pad1, packet);
    eti::setInteger<int16_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTrdType, &eurexTESTradeBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getProductComplex, &eurexTESTradeBroadcastPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRelatedProductComplex, &eurexTESTradeBroadcastPacket::isRelatedProductComplexValid> (d, RelatedProductComplex, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getSide, &eurexTESTradeBroadcastPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTradingCapacity, &eurexTESTradeBroadcastPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTradeReportType, &eurexTESTradeBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTransferReason, &eurexTESTradeBroadcastPacket::isTransferReasonValid> (d, TransferReason, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getTradePublishIndicator, &eurexTESTradeBroadcastPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getMultiLegReportingType, &eurexTESTradeBroadcastPacket::isMultiLegReportingTypeValid> (d, MultiLegReportingType, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getPositionEffect, &eurexTESTradeBroadcastPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getMultilegPriceModel, &eurexTESTradeBroadcastPacket::isMultilegPriceModelValid> (d, MultilegPriceModel, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getOrderAttributeLiquidityProvision, &eurexTESTradeBroadcastPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getOrderAttributeRiskReduction, &eurexTESTradeBroadcastPacket::isOrderAttributeRiskReductionValid> (d, OrderAttributeRiskReduction, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getExecutingTraderQualifier, &eurexTESTradeBroadcastPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDInvestmentDecisionMakerQualifier, &eurexTESTradeBroadcastPacket::isRootPartyIDInvestmentDecisionMakerQualifierValid> (d, RootPartyIDInvestmentDecisionMakerQualifier, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getAccount, &eurexTESTradeBroadcastPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDPositionAccount, &eurexTESTradeBroadcastPacket::isRootPartyIDPositionAccountValid> (d, RootPartyIDPositionAccount, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getCustOrderHandlingInst, &eurexTESTradeBroadcastPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getFreeText1, &eurexTESTradeBroadcastPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getFreeText2, &eurexTESTradeBroadcastPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getFreeText3, &eurexTESTradeBroadcastPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyExecutingFirm, &eurexTESTradeBroadcastPacket::isRootPartyExecutingFirmValid> (d, RootPartyExecutingFirm, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyExecutingTrader, &eurexTESTradeBroadcastPacket::isRootPartyExecutingTraderValid> (d, RootPartyExecutingTrader, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyClearingFirm, &eurexTESTradeBroadcastPacket::isRootPartyClearingFirmValid> (d, RootPartyClearingFirm, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyClearingOrganization, &eurexTESTradeBroadcastPacket::isRootPartyClearingOrganizationValid> (d, RootPartyClearingOrganization, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDBeneficiary, &eurexTESTradeBroadcastPacket::isRootPartyIDBeneficiaryValid> (d, RootPartyIDBeneficiary, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDTakeUpTradingFirm, &eurexTESTradeBroadcastPacket::isRootPartyIDTakeUpTradingFirmValid> (d, RootPartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDOrderOriginationFirm, &eurexTESTradeBroadcastPacket::isRootPartyIDOrderOriginationFirmValid> (d, RootPartyIDOrderOriginationFirm, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRootPartyIDExecutionVenue, &eurexTESTradeBroadcastPacket::isRootPartyIDExecutionVenueValid> (d, RootPartyIDExecutionVenue, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getRegulatoryTradeID, &eurexTESTradeBroadcastPacket::isRegulatoryTradeIDValid> (d, RegulatoryTradeID, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getBasketSideTradeReportID, &eurexTESTradeBroadcastPacket::isBasketSideTradeReportIDValid> (d, BasketSideTradeReportID, packet);
    eti::setString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::getPad2_1, &eurexTESTradeBroadcastPacket::isPad2_1Valid> (d, Pad2_1, packet);
    const vector<eurexSRQSRelatedTradeIDGrpCompPacket>& vSRQSRelatedTradeIDGrp = packet.getSRQSRelatedTradeIDGrp ();
    for (size_t i = 0; i < vSRQSRelatedTradeIDGrp.size (); i++)
    {
        cdr c;
        getSRQSRelatedTradeIDGrpComp (c, vSRQSRelatedTradeIDGrp[i]);
        d.appendArray (SRQSRelatedTradeIDGrp, c);
    }
}

void
eurexCodec::getTESTradingSessionStatusBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESTradingSessionStatusBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESTradingSessionStatusBroadcast");
    d.setString (MessageName, "TESTradingSessionStatusBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int32_t, eurexTESTradingSessionStatusBroadcastPacket, &eurexTESTradingSessionStatusBroadcastPacket::getTradeDate, &eurexTESTradingSessionStatusBroadcastPacket::isTradeDateValid> (d, TradeDate, packet);
    eti::setInteger<int8_t, eurexTESTradingSessionStatusBroadcastPacket, &eurexTESTradingSessionStatusBroadcastPacket::getTradSesEvent, &eurexTESTradingSessionStatusBroadcastPacket::isTradSesEventValid> (d, TradSesEvent, packet);
    eti::setString<eurexTESTradingSessionStatusBroadcastPacket, &eurexTESTradingSessionStatusBroadcastPacket::getPad3, &eurexTESTradingSessionStatusBroadcastPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getTESUploadBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTESUploadBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TESUploadBroadcast");
    d.setString (MessageName, "TESUploadBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int64_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getSecurityID, &eurexTESUploadBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getLastPx, &eurexTESUploadBroadcastPacket::isLastPxValid> (d, LastPx, packet);
    eti::setInteger<uint64_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTransBkdTime, &eurexTESUploadBroadcastPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setInteger<uint64_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTransactTime, &eurexTESUploadBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingPx, &eurexTESUploadBroadcastPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getRelatedClosePrice, &eurexTESUploadBroadcastPacket::isRelatedClosePriceValid> (d, RelatedClosePrice, packet);
    eti::setDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getRelatedTradeQuantity, &eurexTESUploadBroadcastPacket::isRelatedTradeQuantityValid> (d, RelatedTradeQuantity, packet);
    eti::setDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingQty, &eurexTESUploadBroadcastPacket::isUnderlyingQtyValid> (d, UnderlyingQty, packet);
    eti::setInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getMarketSegmentID, &eurexTESUploadBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getPackageID, &eurexTESUploadBroadcastPacket::isPackageIDValid> (d, PackageID, packet);
    eti::setInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTESExecID, &eurexTESUploadBroadcastPacket::isTESExecIDValid> (d, TESExecID, packet);
    eti::setInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingSettlementDate, &eurexTESUploadBroadcastPacket::isUnderlyingSettlementDateValid> (d, UnderlyingSettlementDate, packet);
    eti::setInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingMaturityDate, &eurexTESUploadBroadcastPacket::isUnderlyingMaturityDateValid> (d, UnderlyingMaturityDate, packet);
    eti::setInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getRelatedTradeID, &eurexTESUploadBroadcastPacket::isRelatedTradeIDValid> (d, RelatedTradeID, packet);
    eti::setInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getRelatedMarketSegmentID, &eurexTESUploadBroadcastPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getNegotiationID, &eurexTESUploadBroadcastPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getNoSRQSRelatedTradeIDs, &eurexTESUploadBroadcastPacket::isNoSRQSRelatedTradeIDsValid> (d, NoSRQSRelatedTradeIDs, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getPad1, &eurexTESUploadBroadcastPacket::isPad1Valid> (d, Pad1, packet);
    eti::setInteger<int16_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTrdType, &eurexTESUploadBroadcastPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getProductComplex, &eurexTESUploadBroadcastPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTradeReportType, &eurexTESUploadBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTradePublishIndicator, &eurexTESUploadBroadcastPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTradePlatform, &eurexTESUploadBroadcastPacket::isTradePlatformValid> (d, TradePlatform, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getNoSideAllocs, &eurexTESUploadBroadcastPacket::isNoSideAllocsValid> (d, NoSideAllocs, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getNoLegs, &eurexTESUploadBroadcastPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getNoEvents, &eurexTESUploadBroadcastPacket::isNoEventsValid> (d, NoEvents, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getNoInstrAttrib, &eurexTESUploadBroadcastPacket::isNoInstrAttribValid> (d, NoInstrAttrib, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getNoUnderlyingStips, &eurexTESUploadBroadcastPacket::isNoUnderlyingStipsValid> (d, NoUnderlyingStips, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getHedgeType, &eurexTESUploadBroadcastPacket::isHedgeTypeValid> (d, HedgeType, packet);
    eti::setInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getPartyIDSettlementLocation, &eurexTESUploadBroadcastPacket::isPartyIDSettlementLocationValid> (d, PartyIDSettlementLocation, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getMessageEventSource, &eurexTESUploadBroadcastPacket::isMessageEventSourceValid> (d, MessageEventSource, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getTradeReportID, &eurexTESUploadBroadcastPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getRootPartyExecutingFirm, &eurexTESUploadBroadcastPacket::isRootPartyExecutingFirmValid> (d, RootPartyExecutingFirm, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getRootPartyExecutingTrader, &eurexTESUploadBroadcastPacket::isRootPartyExecutingTraderValid> (d, RootPartyExecutingTrader, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingSecurityID, &eurexTESUploadBroadcastPacket::isUnderlyingSecurityIDValid> (d, UnderlyingSecurityID, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingSecurityDesc, &eurexTESUploadBroadcastPacket::isUnderlyingSecurityDescValid> (d, UnderlyingSecurityDesc, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingCurrency, &eurexTESUploadBroadcastPacket::isUnderlyingCurrencyValid> (d, UnderlyingCurrency, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getUnderlyingIssuer, &eurexTESUploadBroadcastPacket::isUnderlyingIssuerValid> (d, UnderlyingIssuer, packet);
    eti::setString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::getPad6, &eurexTESUploadBroadcastPacket::isPad6Valid> (d, Pad6, packet);
    const vector<eurexSideAllocExtGrpCompPacket>& vSideAllocExtGrp = packet.getSideAllocExtGrp ();
    for (size_t i = 0; i < vSideAllocExtGrp.size (); i++)
    {
        cdr c;
        getSideAllocExtGrpComp (c, vSideAllocExtGrp[i]);
        d.appendArray (SideAllocExtGrp, c);
    }
    const vector<eurexTrdInstrmntLegGrpCompPacket>& vTrdInstrmntLegGrp = packet.getTrdInstrmntLegGrp ();
    for (size_t i = 0; i < vTrdInstrmntLegGrp.size (); i++)
    {
        cdr c;
        getTrdInstrmntLegGrpComp (c, vTrdInstrmntLegGrp[i]);
        d.appendArray (TrdInstrmntLegGrp, c);
    }
    const vector<eurexInstrumentEventGrpCompPacket>& vInstrumentEventGrp = packet.getInstrumentEventGrp ();
    for (size_t i = 0; i < vInstrumentEventGrp.size (); i++)
    {
        cdr c;
        getInstrumentEventGrpComp (c, vInstrumentEventGrp[i]);
        d.appendArray (InstrumentEventGrp, c);
    }
    const vector<eurexInstrumentAttributeGrpCompPacket>& vInstrumentAttributeGrp = packet.getInstrumentAttributeGrp ();
    for (size_t i = 0; i < vInstrumentAttributeGrp.size (); i++)
    {
        cdr c;
        getInstrumentAttributeGrpComp (c, vInstrumentAttributeGrp[i]);
        d.appendArray (InstrumentAttributeGrp, c);
    }
    getUnderlyingStipGrpComp (d, packet.getUnderlyingStipGrp ());
    const vector<eurexSRQSRelatedTradeIDGrpCompPacket>& vSRQSRelatedTradeIDGrp = packet.getSRQSRelatedTradeIDGrp ();
    for (size_t i = 0; i < vSRQSRelatedTradeIDGrp.size (); i++)
    {
        cdr c;
        getSRQSRelatedTradeIDGrpComp (c, vSRQSRelatedTradeIDGrp[i]);
        d.appendArray (SRQSRelatedTradeIDGrp, c);
    }
}

void
eurexCodec::getTMTradingSessionStatusBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTMTradingSessionStatusBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TMTradingSessionStatusBroadcast");
    d.setString (MessageName, "TMTradingSessionStatusBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int8_t, eurexTMTradingSessionStatusBroadcastPacket, &eurexTMTradingSessionStatusBroadcastPacket::getTradSesEvent, &eurexTMTradingSessionStatusBroadcastPacket::isTradSesEventValid> (d, TradSesEvent, packet);
    eti::setString<eurexTMTradingSessionStatusBroadcastPacket, &eurexTMTradingSessionStatusBroadcastPacket::getPad7, &eurexTMTradingSessionStatusBroadcastPacket::isPad7Valid> (d, Pad7, packet);
}

void
eurexCodec::getThrottleUpdateNotification (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexThrottleUpdateNotificationPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize ThrottleUpdateNotification");
    d.setString (MessageName, "ThrottleUpdateNotification");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getNotifHeaderComp (d, packet.getNotifHeader ());
    eti::setInteger<int64_t, eurexThrottleUpdateNotificationPacket, &eurexThrottleUpdateNotificationPacket::getThrottleTimeInterval, &eurexThrottleUpdateNotificationPacket::isThrottleTimeIntervalValid> (d, ThrottleTimeInterval, packet);
    eti::setInteger<uint32_t, eurexThrottleUpdateNotificationPacket, &eurexThrottleUpdateNotificationPacket::getThrottleNoMsgs, &eurexThrottleUpdateNotificationPacket::isThrottleNoMsgsValid> (d, ThrottleNoMsgs, packet);
    eti::setInteger<uint32_t, eurexThrottleUpdateNotificationPacket, &eurexThrottleUpdateNotificationPacket::getThrottleDisconnectLimit, &eurexThrottleUpdateNotificationPacket::isThrottleDisconnectLimitValid> (d, ThrottleDisconnectLimit, packet);
}

void
eurexCodec::getTradeBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTradeBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TradeBroadcast");
    d.setString (MessageName, "TradeBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderComp (d, packet.getRBCHeader ());
    eti::setInteger<int64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getSecurityID, &eurexTradeBroadcastPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setInteger<int64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRelatedSecurityID, &eurexTradeBroadcastPacket::isRelatedSecurityIDValid> (d, RelatedSecurityID, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getPrice, &eurexTradeBroadcastPacket::isPriceValid> (d, Price, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getLastPx, &eurexTradeBroadcastPacket::isLastPxValid> (d, LastPx, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getLastQty, &eurexTradeBroadcastPacket::isLastQtyValid> (d, LastQty, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getSideLastPx, &eurexTradeBroadcastPacket::isSideLastPxValid> (d, SideLastPx, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getSideLastQty, &eurexTradeBroadcastPacket::isSideLastQtyValid> (d, SideLastQty, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getClearingTradePrice, &eurexTradeBroadcastPacket::isClearingTradePriceValid> (d, ClearingTradePrice, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getClearingTradeQty, &eurexTradeBroadcastPacket::isClearingTradeQtyValid> (d, ClearingTradeQty, packet);
    eti::setInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getTransactTime, &eurexTradeBroadcastPacket::isTransactTimeValid> (d, TransactTime, packet);
    eti::setInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getOrderID, &eurexTradeBroadcastPacket::isOrderIDValid> (d, OrderID, packet);
    eti::setInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getClOrdID, &eurexTradeBroadcastPacket::isClOrdIDValid> (d, ClOrdID, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getLeavesQty, &eurexTradeBroadcastPacket::isLeavesQtyValid> (d, LeavesQty, packet);
    eti::setDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getCumQty, &eurexTradeBroadcastPacket::isCumQtyValid> (d, CumQty, packet);
    eti::setInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDClientID, &eurexTradeBroadcastPacket::isRootPartyIDClientIDValid> (d, RootPartyIDClientID, packet);
    eti::setInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getExecutingTrader, &eurexTradeBroadcastPacket::isExecutingTraderValid> (d, ExecutingTrader, packet);
    eti::setInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDInvestmentDecisionMaker, &eurexTradeBroadcastPacket::isRootPartyIDInvestmentDecisionMakerValid> (d, RootPartyIDInvestmentDecisionMaker, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getTradeID, &eurexTradeBroadcastPacket::isTradeIDValid> (d, TradeID, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getOrigTradeID, &eurexTradeBroadcastPacket::isOrigTradeIDValid> (d, OrigTradeID, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDExecutingUnit, &eurexTradeBroadcastPacket::isRootPartyIDExecutingUnitValid> (d, RootPartyIDExecutingUnit, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDSessionID, &eurexTradeBroadcastPacket::isRootPartyIDSessionIDValid> (d, RootPartyIDSessionID, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDExecutingTrader, &eurexTradeBroadcastPacket::isRootPartyIDExecutingTraderValid> (d, RootPartyIDExecutingTrader, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDClearingUnit, &eurexTradeBroadcastPacket::isRootPartyIDClearingUnitValid> (d, RootPartyIDClearingUnit, packet);
    eti::setInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getMarketSegmentID, &eurexTradeBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRelatedSymbol, &eurexTradeBroadcastPacket::isRelatedSymbolValid> (d, RelatedSymbol, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getSideTradeID, &eurexTradeBroadcastPacket::isSideTradeIDValid> (d, SideTradeID, packet);
    eti::setInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getMatchDate, &eurexTradeBroadcastPacket::isMatchDateValid> (d, MatchDate, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getTrdMatchID, &eurexTradeBroadcastPacket::isTrdMatchIDValid> (d, TrdMatchID, packet);
    eti::setInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getStrategyLinkID, &eurexTradeBroadcastPacket::isStrategyLinkIDValid> (d, StrategyLinkID, packet);
    eti::setInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getTotNumTradeReports, &eurexTradeBroadcastPacket::isTotNumTradeReportsValid> (d, TotNumTradeReports, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getMultiLegReportingType, &eurexTradeBroadcastPacket::isMultiLegReportingTypeValid> (d, MultiLegReportingType, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getTradeReportType, &eurexTradeBroadcastPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getTransferReason, &eurexTradeBroadcastPacket::isTransferReasonValid> (d, TransferReason, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDBeneficiary, &eurexTradeBroadcastPacket::isRootPartyIDBeneficiaryValid> (d, RootPartyIDBeneficiary, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDTakeUpTradingFirm, &eurexTradeBroadcastPacket::isRootPartyIDTakeUpTradingFirmValid> (d, RootPartyIDTakeUpTradingFirm, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDOrderOriginationFirm, &eurexTradeBroadcastPacket::isRootPartyIDOrderOriginationFirmValid> (d, RootPartyIDOrderOriginationFirm, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getMatchType, &eurexTradeBroadcastPacket::isMatchTypeValid> (d, MatchType, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getMatchSubType, &eurexTradeBroadcastPacket::isMatchSubTypeValid> (d, MatchSubType, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getSide, &eurexTradeBroadcastPacket::isSideValid> (d, Side, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getSideLiquidityInd, &eurexTradeBroadcastPacket::isSideLiquidityIndValid> (d, SideLiquidityInd, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getTradingCapacity, &eurexTradeBroadcastPacket::isTradingCapacityValid> (d, TradingCapacity, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getOrderAttributeLiquidityProvision, &eurexTradeBroadcastPacket::isOrderAttributeLiquidityProvisionValid> (d, OrderAttributeLiquidityProvision, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getOrderAttributeRiskReduction, &eurexTradeBroadcastPacket::isOrderAttributeRiskReductionValid> (d, OrderAttributeRiskReduction, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getExecutingTraderQualifier, &eurexTradeBroadcastPacket::isExecutingTraderQualifierValid> (d, ExecutingTraderQualifier, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDInvestmentDecisionMakerQualifier, &eurexTradeBroadcastPacket::isRootPartyIDInvestmentDecisionMakerQualifierValid> (d, RootPartyIDInvestmentDecisionMakerQualifier, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getAccount, &eurexTradeBroadcastPacket::isAccountValid> (d, Account, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDPositionAccount, &eurexTradeBroadcastPacket::isRootPartyIDPositionAccountValid> (d, RootPartyIDPositionAccount, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getPositionEffect, &eurexTradeBroadcastPacket::isPositionEffectValid> (d, PositionEffect, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getCustOrderHandlingInst, &eurexTradeBroadcastPacket::isCustOrderHandlingInstValid> (d, CustOrderHandlingInst, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getFreeText1, &eurexTradeBroadcastPacket::isFreeText1Valid> (d, FreeText1, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getFreeText2, &eurexTradeBroadcastPacket::isFreeText2Valid> (d, FreeText2, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getFreeText3, &eurexTradeBroadcastPacket::isFreeText3Valid> (d, FreeText3, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getOrderCategory, &eurexTradeBroadcastPacket::isOrderCategoryValid> (d, OrderCategory, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getOrdType, &eurexTradeBroadcastPacket::isOrdTypeValid> (d, OrdType, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRelatedProductComplex, &eurexTradeBroadcastPacket::isRelatedProductComplexValid> (d, RelatedProductComplex, packet);
    eti::setInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getOrderSide, &eurexTradeBroadcastPacket::isOrderSideValid> (d, OrderSide, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyClearingOrganization, &eurexTradeBroadcastPacket::isRootPartyClearingOrganizationValid> (d, RootPartyClearingOrganization, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyExecutingFirm, &eurexTradeBroadcastPacket::isRootPartyExecutingFirmValid> (d, RootPartyExecutingFirm, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyExecutingTrader, &eurexTradeBroadcastPacket::isRootPartyExecutingTraderValid> (d, RootPartyExecutingTrader, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyClearingFirm, &eurexTradeBroadcastPacket::isRootPartyClearingFirmValid> (d, RootPartyClearingFirm, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRegulatoryTradeID, &eurexTradeBroadcastPacket::isRegulatoryTradeIDValid> (d, RegulatoryTradeID, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getRootPartyIDExecutionVenue, &eurexTradeBroadcastPacket::isRootPartyIDExecutionVenueValid> (d, RootPartyIDExecutionVenue, packet);
    eti::setString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::getPad3, &eurexTradeBroadcastPacket::isPad3Valid> (d, Pad3, packet);
}

void
eurexCodec::getTradingSessionStatusBroadcast (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexTradingSessionStatusBroadcastPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize TradingSessionStatusBroadcast");
    d.setString (MessageName, "TradingSessionStatusBroadcast");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getRBCHeaderMEComp (d, packet.getRBCHeaderME ());
    eti::setInteger<int32_t, eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::getMarketSegmentID, &eurexTradingSessionStatusBroadcastPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::getTradeDate, &eurexTradingSessionStatusBroadcastPacket::isTradeDateValid> (d, TradeDate, packet);
    eti::setInteger<int8_t, eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::getTradSesEvent, &eurexTradingSessionStatusBroadcastPacket::isTradSesEventValid> (d, TradSesEvent, packet);
    eti::setString<eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::getRefApplLastMsgID, &eurexTradingSessionStatusBroadcastPacket::isRefApplLastMsgIDValid> (d, RefApplLastMsgID, packet);
    eti::setString<eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::getPad7, &eurexTradingSessionStatusBroadcastPacket::isPad7Valid> (d, Pad7, packet);
}

void
eurexCodec::getUnsubscribeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexUnsubscribeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize UnsubscribeRequest");
    d.setString (MessageName, "UnsubscribeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<uint32_t, eurexUnsubscribeRequestPacket, &eurexUnsubscribeRequestPacket::getRefApplSubID, &eurexUnsubscribeRequestPacket::isRefApplSubIDValid> (d, RefApplSubID, packet);
    eti::setString<eurexUnsubscribeRequestPacket, &eurexUnsubscribeRequestPacket::getPad4, &eurexUnsubscribeRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getUnsubscribeResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexUnsubscribeResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize UnsubscribeResponse");
    d.setString (MessageName, "UnsubscribeResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
}

void
eurexCodec::getUploadTESTradeRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexUploadTESTradeRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize UploadTESTradeRequest");
    d.setString (MessageName, "UploadTESTradeRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int64_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getSecurityID, &eurexUploadTESTradeRequestPacket::isSecurityIDValid> (d, SecurityID, packet);
    eti::setDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getLastPx, &eurexUploadTESTradeRequestPacket::isLastPxValid> (d, LastPx, packet);
    eti::setInteger<uint64_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTransBkdTime, &eurexUploadTESTradeRequestPacket::isTransBkdTimeValid> (d, TransBkdTime, packet);
    eti::setDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingPx, &eurexUploadTESTradeRequestPacket::isUnderlyingPxValid> (d, UnderlyingPx, packet);
    eti::setDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getRelatedClosePrice, &eurexUploadTESTradeRequestPacket::isRelatedClosePriceValid> (d, RelatedClosePrice, packet);
    eti::setDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getRelatedTradeQuantity, &eurexUploadTESTradeRequestPacket::isRelatedTradeQuantityValid> (d, RelatedTradeQuantity, packet);
    eti::setDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingQty, &eurexUploadTESTradeRequestPacket::isUnderlyingQtyValid> (d, UnderlyingQty, packet);
    eti::setInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getMarketSegmentID, &eurexUploadTESTradeRequestPacket::isMarketSegmentIDValid> (d, MarketSegmentID, packet);
    eti::setInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingSettlementDate, &eurexUploadTESTradeRequestPacket::isUnderlyingSettlementDateValid> (d, UnderlyingSettlementDate, packet);
    eti::setInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingMaturityDate, &eurexUploadTESTradeRequestPacket::isUnderlyingMaturityDateValid> (d, UnderlyingMaturityDate, packet);
    eti::setInteger<uint32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getRelatedTradeID, &eurexUploadTESTradeRequestPacket::isRelatedTradeIDValid> (d, RelatedTradeID, packet);
    eti::setInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getRelatedMarketSegmentID, &eurexUploadTESTradeRequestPacket::isRelatedMarketSegmentIDValid> (d, RelatedMarketSegmentID, packet);
    eti::setInteger<uint32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getNegotiationID, &eurexUploadTESTradeRequestPacket::isNegotiationIDValid> (d, NegotiationID, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getNoSRQSRelatedTradeIDs, &eurexUploadTESTradeRequestPacket::isNoSRQSRelatedTradeIDsValid> (d, NoSRQSRelatedTradeIDs, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getPad1, &eurexUploadTESTradeRequestPacket::isPad1Valid> (d, Pad1, packet);
    eti::setInteger<int16_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTrdType, &eurexUploadTESTradeRequestPacket::isTrdTypeValid> (d, TrdType, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getProductComplex, &eurexUploadTESTradeRequestPacket::isProductComplexValid> (d, ProductComplex, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTradeReportType, &eurexUploadTESTradeRequestPacket::isTradeReportTypeValid> (d, TradeReportType, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTradePublishIndicator, &eurexUploadTESTradeRequestPacket::isTradePublishIndicatorValid> (d, TradePublishIndicator, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getNoSideAllocs, &eurexUploadTESTradeRequestPacket::isNoSideAllocsValid> (d, NoSideAllocs, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getNoLegs, &eurexUploadTESTradeRequestPacket::isNoLegsValid> (d, NoLegs, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getNoEvents, &eurexUploadTESTradeRequestPacket::isNoEventsValid> (d, NoEvents, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getNoInstrAttrib, &eurexUploadTESTradeRequestPacket::isNoInstrAttribValid> (d, NoInstrAttrib, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getNoUnderlyingStips, &eurexUploadTESTradeRequestPacket::isNoUnderlyingStipsValid> (d, NoUnderlyingStips, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getSkipValidations, &eurexUploadTESTradeRequestPacket::isSkipValidationsValid> (d, SkipValidations, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTrdRptStatus, &eurexUploadTESTradeRequestPacket::isTrdRptStatusValid> (d, TrdRptStatus, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTradePlatform, &eurexUploadTESTradeRequestPacket::isTradePlatformValid> (d, TradePlatform, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getHedgeType, &eurexUploadTESTradeRequestPacket::isHedgeTypeValid> (d, HedgeType, packet);
    eti::setInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getPartyIDSettlementLocation, &eurexUploadTESTradeRequestPacket::isPartyIDSettlementLocationValid> (d, PartyIDSettlementLocation, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTradeReportID, &eurexUploadTESTradeRequestPacket::isTradeReportIDValid> (d, TradeReportID, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getTradeReportText, &eurexUploadTESTradeRequestPacket::isTradeReportTextValid> (d, TradeReportText, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingSecurityID, &eurexUploadTESTradeRequestPacket::isUnderlyingSecurityIDValid> (d, UnderlyingSecurityID, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingSecurityDesc, &eurexUploadTESTradeRequestPacket::isUnderlyingSecurityDescValid> (d, UnderlyingSecurityDesc, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingCurrency, &eurexUploadTESTradeRequestPacket::isUnderlyingCurrencyValid> (d, UnderlyingCurrency, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getUnderlyingIssuer, &eurexUploadTESTradeRequestPacket::isUnderlyingIssuerValid> (d, UnderlyingIssuer, packet);
    eti::setString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::getPad4, &eurexUploadTESTradeRequestPacket::isPad4Valid> (d, Pad4, packet);
    const vector<eurexSideAllocExtGrpCompPacket>& vSideAllocExtGrp = packet.getSideAllocExtGrp ();
    for (size_t i = 0; i < vSideAllocExtGrp.size (); i++)
    {
        cdr c;
        getSideAllocExtGrpComp (c, vSideAllocExtGrp[i]);
        d.appendArray (SideAllocExtGrp, c);
    }
    const vector<eurexTrdInstrmntLegGrpCompPacket>& vTrdInstrmntLegGrp = packet.getTrdInstrmntLegGrp ();
    for (size_t i = 0; i < vTrdInstrmntLegGrp.size (); i++)
    {
        cdr c;
        getTrdInstrmntLegGrpComp (c, vTrdInstrmntLegGrp[i]);
        d.appendArray (TrdInstrmntLegGrp, c);
    }
    const vector<eurexInstrumentEventGrpCompPacket>& vInstrumentEventGrp = packet.getInstrumentEventGrp ();
    for (size_t i = 0; i < vInstrumentEventGrp.size (); i++)
    {
        cdr c;
        getInstrumentEventGrpComp (c, vInstrumentEventGrp[i]);
        d.appendArray (InstrumentEventGrp, c);
    }
    const vector<eurexInstrumentAttributeGrpCompPacket>& vInstrumentAttributeGrp = packet.getInstrumentAttributeGrp ();
    for (size_t i = 0; i < vInstrumentAttributeGrp.size (); i++)
    {
        cdr c;
        getInstrumentAttributeGrpComp (c, vInstrumentAttributeGrp[i]);
        d.appendArray (InstrumentAttributeGrp, c);
    }
    getUnderlyingStipGrpComp (d, packet.getUnderlyingStipGrp ());
    const vector<eurexSRQSRelatedTradeIDGrpCompPacket>& vSRQSRelatedTradeIDGrp = packet.getSRQSRelatedTradeIDGrp ();
    for (size_t i = 0; i < vSRQSRelatedTradeIDGrp.size (); i++)
    {
        cdr c;
        getSRQSRelatedTradeIDGrpComp (c, vSRQSRelatedTradeIDGrp[i]);
        d.appendArray (SRQSRelatedTradeIDGrp, c);
    }
}

void
eurexCodec::getUserLoginRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexUserLoginRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize UserLoginRequest");
    d.setString (MessageName, "UserLoginRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexUserLoginRequestPacket, &eurexUserLoginRequestPacket::getUsername, &eurexUserLoginRequestPacket::isUsernameValid> (d, Username, packet);
    eti::setString<eurexUserLoginRequestPacket, &eurexUserLoginRequestPacket::getPassword, &eurexUserLoginRequestPacket::isPasswordValid> (d, Password, packet);
    eti::setString<eurexUserLoginRequestPacket, &eurexUserLoginRequestPacket::getPad4, &eurexUserLoginRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getUserLoginResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexUserLoginResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize UserLoginResponse");
    d.setString (MessageName, "UserLoginResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
}

void
eurexCodec::getUserLogoutRequest (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexUserLogoutRequestPacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize UserLogoutRequest");
    d.setString (MessageName, "UserLogoutRequest");
    getMessageHeaderInComp (d, packet.getMessageHeaderIn ());
    getRequestHeaderComp (d, packet.getRequestHeader ());
    eti::setInteger<int32_t, eurexUserLogoutRequestPacket, &eurexUserLogoutRequestPacket::getUsername, &eurexUserLogoutRequestPacket::isUsernameValid> (d, Username, packet);
    eti::setString<eurexUserLogoutRequestPacket, &eurexUserLogoutRequestPacket::getPad4, &eurexUserLogoutRequestPacket::isPad4Valid> (d, Pad4, packet);
}

void
eurexCodec::getUserLogoutResponse (cdr &d, const void *buf, size_t len, size_t& used)
{
    eurexUserLogoutResponsePacket packet;
    codecState state = packet.deserialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot deserialize UserLogoutResponse");
    d.setString (MessageName, "UserLogoutResponse");
    getMessageHeaderOutComp (d, packet.getMessageHeaderOut ());
    getResponseHeaderComp (d, packet.getResponseHeader ());
}


static void
putInstrmtLegGrpComp (const cdr &d, eurexInstrmtLegGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::setLegSecurityID, &eurexInstrmtLegGrpCompPacket::resetLegSecurityID> (d, LegSecurityID, packet);
    eti::getDouble<eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::setLegPrice, &eurexInstrmtLegGrpCompPacket::resetLegPrice> (d, LegPrice, packet);
    eti::getInteger<int32_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::setLegSymbol, &eurexInstrmtLegGrpCompPacket::resetLegSymbol> (d, LegSymbol, packet);
    eti::getInteger<int32_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::setLegRatioQty, &eurexInstrmtLegGrpCompPacket::resetLegRatioQty> (d, LegRatioQty, packet);
    eti::getInteger<int8_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::setLegSide, &eurexInstrmtLegGrpCompPacket::resetLegSide> (d, LegSide, packet);
    eti::getInteger<int8_t, eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::setLegSecurityType, &eurexInstrmtLegGrpCompPacket::resetLegSecurityType> (d, LegSecurityType, packet);
    eti::getString<eurexInstrmtLegGrpCompPacket, &eurexInstrmtLegGrpCompPacket::setPad6, &eurexInstrmtLegGrpCompPacket::resetPad6> (d, Pad6, packet);
}

static void
putResponseHeaderComp (const cdr &d, eurexResponseHeaderCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::setRequestTime, &eurexResponseHeaderCompPacket::resetRequestTime> (d, RequestTime, packet);
    eti::getInteger<uint64_t, eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::setSendingTime, &eurexResponseHeaderCompPacket::resetSendingTime> (d, SendingTime, packet);
    eti::getInteger<uint32_t, eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::setMsgSeqNum, &eurexResponseHeaderCompPacket::resetMsgSeqNum> (d, MsgSeqNum, packet);
    eti::getString<eurexResponseHeaderCompPacket, &eurexResponseHeaderCompPacket::setPad4, &eurexResponseHeaderCompPacket::resetPad4> (d, Pad4, packet);
}

static void
putOrderBookItemGrpComp (const cdr &d, eurexOrderBookItemGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setSecurityID, &eurexOrderBookItemGrpCompPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setBestBidPx, &eurexOrderBookItemGrpCompPacket::resetBestBidPx> (d, BestBidPx, packet);
    eti::getDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setBestBidSize, &eurexOrderBookItemGrpCompPacket::resetBestBidSize> (d, BestBidSize, packet);
    eti::getDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setBestOfferPx, &eurexOrderBookItemGrpCompPacket::resetBestOfferPx> (d, BestOfferPx, packet);
    eti::getDouble<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setBestOfferSize, &eurexOrderBookItemGrpCompPacket::resetBestOfferSize> (d, BestOfferSize, packet);
    eti::getInteger<int8_t, eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setMDBookType, &eurexOrderBookItemGrpCompPacket::resetMDBookType> (d, MDBookType, packet);
    eti::getInteger<int8_t, eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setMDSubBookType, &eurexOrderBookItemGrpCompPacket::resetMDSubBookType> (d, MDSubBookType, packet);
    eti::getString<eurexOrderBookItemGrpCompPacket, &eurexOrderBookItemGrpCompPacket::setPad6, &eurexOrderBookItemGrpCompPacket::resetPad6> (d, Pad6, packet);
}

static void
putQuotReqLegsGrpComp (const cdr &d, eurexQuotReqLegsGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::setLegSecurityID, &eurexQuotReqLegsGrpCompPacket::resetLegSecurityID> (d, LegSecurityID, packet);
    eti::getInteger<int32_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::setLegRatioQty, &eurexQuotReqLegsGrpCompPacket::resetLegRatioQty> (d, LegRatioQty, packet);
    eti::getInteger<int32_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::setLegSymbol, &eurexQuotReqLegsGrpCompPacket::resetLegSymbol> (d, LegSymbol, packet);
    eti::getInteger<int8_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::setLegSecurityType, &eurexQuotReqLegsGrpCompPacket::resetLegSecurityType> (d, LegSecurityType, packet);
    eti::getInteger<int8_t, eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::setLegSide, &eurexQuotReqLegsGrpCompPacket::resetLegSide> (d, LegSide, packet);
    eti::getString<eurexQuotReqLegsGrpCompPacket, &eurexQuotReqLegsGrpCompPacket::setPad6, &eurexQuotReqLegsGrpCompPacket::resetPad6> (d, Pad6, packet);
}

static void
putRiskLimitQtyGrpComp (const cdr &d, eurexRiskLimitQtyGrpCompPacket& packet)
{
    eti::getDouble<eurexRiskLimitQtyGrpCompPacket, &eurexRiskLimitQtyGrpCompPacket::setRiskLimitQty, &eurexRiskLimitQtyGrpCompPacket::resetRiskLimitQty> (d, RiskLimitQty, packet);
    eti::getInteger<int8_t, eurexRiskLimitQtyGrpCompPacket, &eurexRiskLimitQtyGrpCompPacket::setRiskLimitType, &eurexRiskLimitQtyGrpCompPacket::resetRiskLimitType> (d, RiskLimitType, packet);
    eti::getString<eurexRiskLimitQtyGrpCompPacket, &eurexRiskLimitQtyGrpCompPacket::setPad7, &eurexRiskLimitQtyGrpCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putEnrichmentRulesGrpComp (const cdr &d, eurexEnrichmentRulesGrpCompPacket& packet)
{
    eti::getInteger<int16_t, eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setEnrichmentRuleID, &eurexEnrichmentRulesGrpCompPacket::resetEnrichmentRuleID> (d, EnrichmentRuleID, packet);
    eti::getInteger<int8_t, eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setPartyIDOriginationMarket, &eurexEnrichmentRulesGrpCompPacket::resetPartyIDOriginationMarket> (d, PartyIDOriginationMarket, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setAccount, &eurexEnrichmentRulesGrpCompPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setPositionEffect, &eurexEnrichmentRulesGrpCompPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setPartyIDTakeUpTradingFirm, &eurexEnrichmentRulesGrpCompPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setPartyIDOrderOriginationFirm, &eurexEnrichmentRulesGrpCompPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setPartyIDBeneficiary, &eurexEnrichmentRulesGrpCompPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setFreeText1, &eurexEnrichmentRulesGrpCompPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setFreeText2, &eurexEnrichmentRulesGrpCompPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setFreeText3, &eurexEnrichmentRulesGrpCompPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexEnrichmentRulesGrpCompPacket, &eurexEnrichmentRulesGrpCompPacket::setPad1, &eurexEnrichmentRulesGrpCompPacket::resetPad1> (d, Pad1, packet);
}

static void
putInstrmntLegExecGrpComp (const cdr &d, eurexInstrmntLegExecGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::setLegSecurityID, &eurexInstrmntLegExecGrpCompPacket::resetLegSecurityID> (d, LegSecurityID, packet);
    eti::getDouble<eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::setLegLastPx, &eurexInstrmntLegExecGrpCompPacket::resetLegLastPx> (d, LegLastPx, packet);
    eti::getDouble<eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::setLegLastQty, &eurexInstrmntLegExecGrpCompPacket::resetLegLastQty> (d, LegLastQty, packet);
    eti::getInteger<int32_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::setLegExecID, &eurexInstrmntLegExecGrpCompPacket::resetLegExecID> (d, LegExecID, packet);
    eti::getInteger<int8_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::setLegSide, &eurexInstrmntLegExecGrpCompPacket::resetLegSide> (d, LegSide, packet);
    eti::getInteger<int8_t, eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::setFillRefID, &eurexInstrmntLegExecGrpCompPacket::resetFillRefID> (d, FillRefID, packet);
    eti::getString<eurexInstrmntLegExecGrpCompPacket, &eurexInstrmntLegExecGrpCompPacket::setPad2, &eurexInstrmntLegExecGrpCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putMMParameterGrpComp (const cdr &d, eurexMMParameterGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::setExposureDuration, &eurexMMParameterGrpCompPacket::resetExposureDuration> (d, ExposureDuration, packet);
    eti::getDouble<eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::setCumQty, &eurexMMParameterGrpCompPacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::setDelta, &eurexMMParameterGrpCompPacket::resetDelta> (d, Delta, packet);
    eti::getDouble<eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::setVega, &eurexMMParameterGrpCompPacket::resetVega> (d, Vega, packet);
    eti::getInteger<int32_t, eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::setPctCount, &eurexMMParameterGrpCompPacket::resetPctCount> (d, PctCount, packet);
    eti::getInteger<uint32_t, eurexMMParameterGrpCompPacket, &eurexMMParameterGrpCompPacket::setTargetPartyIDSessionID, &eurexMMParameterGrpCompPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
}

static void
putRBCHeaderMEComp (const cdr &d, eurexRBCHeaderMECompPacket& packet)
{
    eti::getInteger<uint64_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setTrdRegTSTimeOut, &eurexRBCHeaderMECompPacket::resetTrdRegTSTimeOut> (d, TrdRegTSTimeOut, packet);
    eti::getInteger<uint64_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setNotificationIn, &eurexRBCHeaderMECompPacket::resetNotificationIn> (d, NotificationIn, packet);
    eti::getInteger<uint64_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setSendingTime, &eurexRBCHeaderMECompPacket::resetSendingTime> (d, SendingTime, packet);
    eti::getInteger<uint32_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setApplSubID, &eurexRBCHeaderMECompPacket::resetApplSubID> (d, ApplSubID, packet);
    eti::getInteger<uint16_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setPartitionID, &eurexRBCHeaderMECompPacket::resetPartitionID> (d, PartitionID, packet);
    eti::getString<eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setApplMsgID, &eurexRBCHeaderMECompPacket::resetApplMsgID> (d, ApplMsgID, packet);
    eti::getInteger<int8_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setApplID, &eurexRBCHeaderMECompPacket::resetApplID> (d, ApplID, packet);
    eti::getInteger<int8_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setApplResendFlag, &eurexRBCHeaderMECompPacket::resetApplResendFlag> (d, ApplResendFlag, packet);
    eti::getInteger<int8_t, eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setLastFragment, &eurexRBCHeaderMECompPacket::resetLastFragment> (d, LastFragment, packet);
    eti::getString<eurexRBCHeaderMECompPacket, &eurexRBCHeaderMECompPacket::setPad7, &eurexRBCHeaderMECompPacket::resetPad7> (d, Pad7, packet);
}

static void
putNotifHeaderComp (const cdr &d, eurexNotifHeaderCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexNotifHeaderCompPacket, &eurexNotifHeaderCompPacket::setSendingTime, &eurexNotifHeaderCompPacket::resetSendingTime> (d, SendingTime, packet);
}

static void
putBasketSideAllocGrpComp (const cdr &d, eurexBasketSideAllocGrpCompPacket& packet)
{
    eti::getDouble<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setAllocQty, &eurexBasketSideAllocGrpCompPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<uint32_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setIndividualAllocID, &eurexBasketSideAllocGrpCompPacket::resetIndividualAllocID> (d, IndividualAllocID, packet);
    eti::getInteger<int16_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setPartySubIDType, &eurexBasketSideAllocGrpCompPacket::resetPartySubIDType> (d, PartySubIDType, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setSide, &eurexBasketSideAllocGrpCompPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setInstrmtMatchSideID, &eurexBasketSideAllocGrpCompPacket::resetInstrmtMatchSideID> (d, InstrmtMatchSideID, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setTradeAllocStatus, &eurexBasketSideAllocGrpCompPacket::resetTradeAllocStatus> (d, TradeAllocStatus, packet);
    eti::getString<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setPartyExecutingFirm, &eurexBasketSideAllocGrpCompPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setPartyExecutingTrader, &eurexBasketSideAllocGrpCompPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexBasketSideAllocGrpCompPacket, &eurexBasketSideAllocGrpCompPacket::setPad4, &eurexBasketSideAllocGrpCompPacket::resetPad4> (d, Pad4, packet);
}

static void
putTrdInstrmntLegGrpComp (const cdr &d, eurexTrdInstrmntLegGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexTrdInstrmntLegGrpCompPacket, &eurexTrdInstrmntLegGrpCompPacket::setLegSecurityID, &eurexTrdInstrmntLegGrpCompPacket::resetLegSecurityID> (d, LegSecurityID, packet);
    eti::getDouble<eurexTrdInstrmntLegGrpCompPacket, &eurexTrdInstrmntLegGrpCompPacket::setLegPrice, &eurexTrdInstrmntLegGrpCompPacket::resetLegPrice> (d, LegPrice, packet);
}

static void
putMessageHeaderInComp (const cdr &d, eurexMessageHeaderInCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::setBodyLen, &eurexMessageHeaderInCompPacket::resetBodyLen> (d, BodyLen, packet);
    eti::getInteger<uint16_t, eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::setTemplateID, &eurexMessageHeaderInCompPacket::resetTemplateID> (d, TemplateID, packet);
    eti::getString<eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::setNetworkMsgID, &eurexMessageHeaderInCompPacket::resetNetworkMsgID> (d, NetworkMsgID, packet);
    eti::getString<eurexMessageHeaderInCompPacket, &eurexMessageHeaderInCompPacket::setPad2, &eurexMessageHeaderInCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putRequestHeaderComp (const cdr &d, eurexRequestHeaderCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexRequestHeaderCompPacket, &eurexRequestHeaderCompPacket::setMsgSeqNum, &eurexRequestHeaderCompPacket::resetMsgSeqNum> (d, MsgSeqNum, packet);
    eti::getInteger<int32_t, eurexRequestHeaderCompPacket, &eurexRequestHeaderCompPacket::setSenderSubID, &eurexRequestHeaderCompPacket::resetSenderSubID> (d, SenderSubID, packet);
}

static void
putSideCrossLegGrpComp (const cdr &d, eurexSideCrossLegGrpCompPacket& packet)
{
    eti::getInteger<int8_t, eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::setLegInputSource, &eurexSideCrossLegGrpCompPacket::resetLegInputSource> (d, LegInputSource, packet);
    eti::getString<eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::setLegPositionEffect, &eurexSideCrossLegGrpCompPacket::resetLegPositionEffect> (d, LegPositionEffect, packet);
    eti::getString<eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::setLegAccount, &eurexSideCrossLegGrpCompPacket::resetLegAccount> (d, LegAccount, packet);
    eti::getString<eurexSideCrossLegGrpCompPacket, &eurexSideCrossLegGrpCompPacket::setPad4, &eurexSideCrossLegGrpCompPacket::resetPad4> (d, Pad4, packet);
}

static void
putTargetPartiesComp (const cdr &d, eurexTargetPartiesCompPacket& packet)
{
    eti::getInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setSideDisclosureInstruction, &eurexTargetPartiesCompPacket::resetSideDisclosureInstruction> (d, SideDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setPriceDisclosureInstruction, &eurexTargetPartiesCompPacket::resetPriceDisclosureInstruction> (d, PriceDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setLeavesQtyDisclosureInstruction, &eurexTargetPartiesCompPacket::resetLeavesQtyDisclosureInstruction> (d, LeavesQtyDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setLastPxDisclosureInstruction, &eurexTargetPartiesCompPacket::resetLastPxDisclosureInstruction> (d, LastPxDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setLastQtyDisclosureInstruction, &eurexTargetPartiesCompPacket::resetLastQtyDisclosureInstruction> (d, LastQtyDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setFreeText5DisclosureInstruction, &eurexTargetPartiesCompPacket::resetFreeText5DisclosureInstruction> (d, FreeText5DisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setQuoteInstruction, &eurexTargetPartiesCompPacket::resetQuoteInstruction> (d, QuoteInstruction, packet);
    eti::getString<eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setTargetPartyExecutingFirm, &eurexTargetPartiesCompPacket::resetTargetPartyExecutingFirm> (d, TargetPartyExecutingFirm, packet);
    eti::getString<eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setTargetPartyExecutingTrader, &eurexTargetPartiesCompPacket::resetTargetPartyExecutingTrader> (d, TargetPartyExecutingTrader, packet);
    eti::getString<eurexTargetPartiesCompPacket, &eurexTargetPartiesCompPacket::setPad6, &eurexTargetPartiesCompPacket::resetPad6> (d, Pad6, packet);
}

static void
putNotAffectedSecuritiesGrpComp (const cdr &d, eurexNotAffectedSecuritiesGrpCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexNotAffectedSecuritiesGrpCompPacket, &eurexNotAffectedSecuritiesGrpCompPacket::setNotAffectedSecurityID, &eurexNotAffectedSecuritiesGrpCompPacket::resetNotAffectedSecurityID> (d, NotAffectedSecurityID, packet);
}

static void
putSideAllocExtGrpComp (const cdr &d, eurexSideAllocExtGrpCompPacket& packet)
{
    eti::getDouble<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setAllocQty, &eurexSideAllocExtGrpCompPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<uint64_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIDClientID, &eurexSideAllocExtGrpCompPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIdInvestmentDecisionMaker, &eurexSideAllocExtGrpCompPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setExecutingTrader, &eurexSideAllocExtGrpCompPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setIndividualAllocID, &eurexSideAllocExtGrpCompPacket::resetIndividualAllocID> (d, IndividualAllocID, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyExecutingFirm, &eurexSideAllocExtGrpCompPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyExecutingTrader, &eurexSideAllocExtGrpCompPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setSide, &eurexSideAllocExtGrpCompPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setTradeAllocStatus, &eurexSideAllocExtGrpCompPacket::resetTradeAllocStatus> (d, TradeAllocStatus, packet);
    eti::getInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setTradingCapacity, &eurexSideAllocExtGrpCompPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPositionEffect, &eurexSideAllocExtGrpCompPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setOrderAttributeLiquidityProvision, &eurexSideAllocExtGrpCompPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setExecutingTraderQualifier, &eurexSideAllocExtGrpCompPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexSideAllocExtGrpCompPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setOrderAttributeRiskReduction, &eurexSideAllocExtGrpCompPacket::resetOrderAttributeRiskReduction> (d, OrderAttributeRiskReduction, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setAccount, &eurexSideAllocExtGrpCompPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIDPositionAccount, &eurexSideAllocExtGrpCompPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIDTakeUpTradingFirm, &eurexSideAllocExtGrpCompPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setFreeText1, &eurexSideAllocExtGrpCompPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setFreeText2, &eurexSideAllocExtGrpCompPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setFreeText3, &eurexSideAllocExtGrpCompPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIDOrderOriginationFirm, &eurexSideAllocExtGrpCompPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIDBeneficiary, &eurexSideAllocExtGrpCompPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPartyIDLocationID, &eurexSideAllocExtGrpCompPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setCustOrderHandlingInst, &eurexSideAllocExtGrpCompPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setComplianceText, &eurexSideAllocExtGrpCompPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexSideAllocExtGrpCompPacket, &eurexSideAllocExtGrpCompPacket::setPad7, &eurexSideAllocExtGrpCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putPartyDetailsGrpComp (const cdr &d, eurexPartyDetailsGrpCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::setPartyDetailIDExecutingTrader, &eurexPartyDetailsGrpCompPacket::resetPartyDetailIDExecutingTrader> (d, PartyDetailIDExecutingTrader, packet);
    eti::getString<eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::setPartyDetailExecutingTrader, &eurexPartyDetailsGrpCompPacket::resetPartyDetailExecutingTrader> (d, PartyDetailExecutingTrader, packet);
    eti::getInteger<int8_t, eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::setPartyDetailRoleQualifier, &eurexPartyDetailsGrpCompPacket::resetPartyDetailRoleQualifier> (d, PartyDetailRoleQualifier, packet);
    eti::getInteger<int8_t, eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::setPartyDetailStatus, &eurexPartyDetailsGrpCompPacket::resetPartyDetailStatus> (d, PartyDetailStatus, packet);
    eti::getString<eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::setPartyDetailDeskID, &eurexPartyDetailsGrpCompPacket::resetPartyDetailDeskID> (d, PartyDetailDeskID, packet);
    eti::getString<eurexPartyDetailsGrpCompPacket, &eurexPartyDetailsGrpCompPacket::setPad1, &eurexPartyDetailsGrpCompPacket::resetPad1> (d, Pad1, packet);
}

static void
putLegOrdGrpComp (const cdr &d, eurexLegOrdGrpCompPacket& packet)
{
    eti::getString<eurexLegOrdGrpCompPacket, &eurexLegOrdGrpCompPacket::setLegAccount, &eurexLegOrdGrpCompPacket::resetLegAccount> (d, LegAccount, packet);
    eti::getString<eurexLegOrdGrpCompPacket, &eurexLegOrdGrpCompPacket::setLegPositionEffect, &eurexLegOrdGrpCompPacket::resetLegPositionEffect> (d, LegPositionEffect, packet);
    eti::getString<eurexLegOrdGrpCompPacket, &eurexLegOrdGrpCompPacket::setPad5, &eurexLegOrdGrpCompPacket::resetPad5> (d, Pad5, packet);
}

static void
putNRResponseHeaderMEComp (const cdr &d, eurexNRResponseHeaderMECompPacket& packet)
{
    eti::getInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setRequestTime, &eurexNRResponseHeaderMECompPacket::resetRequestTime> (d, RequestTime, packet);
    eti::getInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setTrdRegTSTimeIn, &eurexNRResponseHeaderMECompPacket::resetTrdRegTSTimeIn> (d, TrdRegTSTimeIn, packet);
    eti::getInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setTrdRegTSTimeOut, &eurexNRResponseHeaderMECompPacket::resetTrdRegTSTimeOut> (d, TrdRegTSTimeOut, packet);
    eti::getInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setResponseIn, &eurexNRResponseHeaderMECompPacket::resetResponseIn> (d, ResponseIn, packet);
    eti::getInteger<uint64_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setSendingTime, &eurexNRResponseHeaderMECompPacket::resetSendingTime> (d, SendingTime, packet);
    eti::getInteger<uint32_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setMsgSeqNum, &eurexNRResponseHeaderMECompPacket::resetMsgSeqNum> (d, MsgSeqNum, packet);
    eti::getInteger<int8_t, eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setLastFragment, &eurexNRResponseHeaderMECompPacket::resetLastFragment> (d, LastFragment, packet);
    eti::getString<eurexNRResponseHeaderMECompPacket, &eurexNRResponseHeaderMECompPacket::setPad3, &eurexNRResponseHeaderMECompPacket::resetPad3> (d, Pad3, packet);
}

static void
putNotAffectedOrdersGrpComp (const cdr &d, eurexNotAffectedOrdersGrpCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexNotAffectedOrdersGrpCompPacket, &eurexNotAffectedOrdersGrpCompPacket::setNotAffectedOrderID, &eurexNotAffectedOrdersGrpCompPacket::resetNotAffectedOrderID> (d, NotAffectedOrderID, packet);
    eti::getInteger<uint64_t, eurexNotAffectedOrdersGrpCompPacket, &eurexNotAffectedOrdersGrpCompPacket::setNotAffOrigClOrdID, &eurexNotAffectedOrdersGrpCompPacket::resetNotAffOrigClOrdID> (d, NotAffOrigClOrdID, packet);
}

static void
putAffectedOrderRequestsGrpComp (const cdr &d, eurexAffectedOrderRequestsGrpCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexAffectedOrderRequestsGrpCompPacket, &eurexAffectedOrderRequestsGrpCompPacket::setAffectedOrderRequestID, &eurexAffectedOrderRequestsGrpCompPacket::resetAffectedOrderRequestID> (d, AffectedOrderRequestID, packet);
    eti::getString<eurexAffectedOrderRequestsGrpCompPacket, &eurexAffectedOrderRequestsGrpCompPacket::setPad4, &eurexAffectedOrderRequestsGrpCompPacket::resetPad4> (d, Pad4, packet);
}

static void
putQuoteLegExecGrpComp (const cdr &d, eurexQuoteLegExecGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::setLegSecurityID, &eurexQuoteLegExecGrpCompPacket::resetLegSecurityID> (d, LegSecurityID, packet);
    eti::getDouble<eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::setLegLastPx, &eurexQuoteLegExecGrpCompPacket::resetLegLastPx> (d, LegLastPx, packet);
    eti::getDouble<eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::setLegLastQty, &eurexQuoteLegExecGrpCompPacket::resetLegLastQty> (d, LegLastQty, packet);
    eti::getInteger<int32_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::setLegExecID, &eurexQuoteLegExecGrpCompPacket::resetLegExecID> (d, LegExecID, packet);
    eti::getInteger<int8_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::setLegSide, &eurexQuoteLegExecGrpCompPacket::resetLegSide> (d, LegSide, packet);
    eti::getInteger<int8_t, eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::setNoQuoteEventsIndex, &eurexQuoteLegExecGrpCompPacket::resetNoQuoteEventsIndex> (d, NoQuoteEventsIndex, packet);
    eti::getString<eurexQuoteLegExecGrpCompPacket, &eurexQuoteLegExecGrpCompPacket::setPad2, &eurexQuoteLegExecGrpCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putNRBCHeaderComp (const cdr &d, eurexNRBCHeaderCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::setSendingTime, &eurexNRBCHeaderCompPacket::resetSendingTime> (d, SendingTime, packet);
    eti::getInteger<uint32_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::setApplSubID, &eurexNRBCHeaderCompPacket::resetApplSubID> (d, ApplSubID, packet);
    eti::getInteger<int8_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::setApplID, &eurexNRBCHeaderCompPacket::resetApplID> (d, ApplID, packet);
    eti::getInteger<int8_t, eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::setLastFragment, &eurexNRBCHeaderCompPacket::resetLastFragment> (d, LastFragment, packet);
    eti::getString<eurexNRBCHeaderCompPacket, &eurexNRBCHeaderCompPacket::setPad2, &eurexNRBCHeaderCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putSessionsGrpComp (const cdr &d, eurexSessionsGrpCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::setPartyIDSessionID, &eurexSessionsGrpCompPacket::resetPartyIDSessionID> (d, PartyIDSessionID, packet);
    eti::getInteger<int8_t, eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::setSessionMode, &eurexSessionsGrpCompPacket::resetSessionMode> (d, SessionMode, packet);
    eti::getInteger<int8_t, eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::setSessionSubMode, &eurexSessionsGrpCompPacket::resetSessionSubMode> (d, SessionSubMode, packet);
    eti::getString<eurexSessionsGrpCompPacket, &eurexSessionsGrpCompPacket::setPad2, &eurexSessionsGrpCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putInstrumentAttributeGrpComp (const cdr &d, eurexInstrumentAttributeGrpCompPacket& packet)
{
    eti::getInteger<int8_t, eurexInstrumentAttributeGrpCompPacket, &eurexInstrumentAttributeGrpCompPacket::setInstrAttribType, &eurexInstrumentAttributeGrpCompPacket::resetInstrAttribType> (d, InstrAttribType, packet);
    eti::getString<eurexInstrumentAttributeGrpCompPacket, &eurexInstrumentAttributeGrpCompPacket::setInstrAttribValue, &eurexInstrumentAttributeGrpCompPacket::resetInstrAttribValue> (d, InstrAttribValue, packet);
    eti::getString<eurexInstrumentAttributeGrpCompPacket, &eurexInstrumentAttributeGrpCompPacket::setPad7, &eurexInstrumentAttributeGrpCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putBasketRootPartyGrpComp (const cdr &d, eurexBasketRootPartyGrpCompPacket& packet)
{
    eti::getInteger<int16_t, eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::setRootPartySubIDType, &eurexBasketRootPartyGrpCompPacket::resetRootPartySubIDType> (d, RootPartySubIDType, packet);
    eti::getString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::setRootPartyContraFirm, &eurexBasketRootPartyGrpCompPacket::resetRootPartyContraFirm> (d, RootPartyContraFirm, packet);
    eti::getString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::setRootPartyContraTrader, &eurexBasketRootPartyGrpCompPacket::resetRootPartyContraTrader> (d, RootPartyContraTrader, packet);
    eti::getString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::setBasketSideTradeReportID, &eurexBasketRootPartyGrpCompPacket::resetBasketSideTradeReportID> (d, BasketSideTradeReportID, packet);
    eti::getString<eurexBasketRootPartyGrpCompPacket, &eurexBasketRootPartyGrpCompPacket::setPad7, &eurexBasketRootPartyGrpCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putBasketSideAllocExtBCGrpComp (const cdr &d, eurexBasketSideAllocExtBCGrpCompPacket& packet)
{
    eti::getDouble<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setAllocQty, &eurexBasketSideAllocExtBCGrpCompPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<int64_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setSecurityID, &eurexBasketSideAllocExtBCGrpCompPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setLastPx, &eurexBasketSideAllocExtBCGrpCompPacket::resetLastPx> (d, LastPx, packet);
    eti::getInteger<uint64_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setTransBkdTime, &eurexBasketSideAllocExtBCGrpCompPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getDouble<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setRelatedClosePrice, &eurexBasketSideAllocExtBCGrpCompPacket::resetRelatedClosePrice> (d, RelatedClosePrice, packet);
    eti::getInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPackageID, &eurexBasketSideAllocExtBCGrpCompPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<int32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setSideMarketSegmentID, &eurexBasketSideAllocExtBCGrpCompPacket::resetSideMarketSegmentID> (d, SideMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setAllocID, &eurexBasketSideAllocExtBCGrpCompPacket::resetAllocID> (d, AllocID, packet);
    eti::getInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setNegotiationID, &eurexBasketSideAllocExtBCGrpCompPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setSRQSRelatedTradeID, &eurexBasketSideAllocExtBCGrpCompPacket::resetSRQSRelatedTradeID> (d, SRQSRelatedTradeID, packet);
    eti::getInteger<int16_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setSideTrdSubTyp, &eurexBasketSideAllocExtBCGrpCompPacket::resetSideTrdSubTyp> (d, SideTrdSubTyp, packet);
    eti::getInteger<int16_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartySubIDType, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartySubIDType> (d, PartySubIDType, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setSide, &eurexBasketSideAllocExtBCGrpCompPacket::resetSide> (d, Side, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPositionEffect, &eurexBasketSideAllocExtBCGrpCompPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setEffectOnBasket, &eurexBasketSideAllocExtBCGrpCompPacket::resetEffectOnBasket> (d, EffectOnBasket, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setTradingCapacity, &eurexBasketSideAllocExtBCGrpCompPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setTradeAllocStatus, &eurexBasketSideAllocExtBCGrpCompPacket::resetTradeAllocStatus> (d, TradeAllocStatus, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setProductComplex, &eurexBasketSideAllocExtBCGrpCompPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setTradePublishIndicator, &eurexBasketSideAllocExtBCGrpCompPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartyExecutingFirm, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartyExecutingTrader, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setAccount, &eurexBasketSideAllocExtBCGrpCompPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setFreeText1, &eurexBasketSideAllocExtBCGrpCompPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setFreeText2, &eurexBasketSideAllocExtBCGrpCompPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setFreeText3, &eurexBasketSideAllocExtBCGrpCompPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartyIDTakeUpTradingFirm, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartyIDOrderOriginationFirm, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartyIDBeneficiary, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartyIDPositionAccount, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPartyIDLocationID, &eurexBasketSideAllocExtBCGrpCompPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setCustOrderHandlingInst, &eurexBasketSideAllocExtBCGrpCompPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setComplianceText, &eurexBasketSideAllocExtBCGrpCompPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexBasketSideAllocExtBCGrpCompPacket, &eurexBasketSideAllocExtBCGrpCompPacket::setPad4, &eurexBasketSideAllocExtBCGrpCompPacket::resetPad4> (d, Pad4, packet);
}

static void
putRBCHeaderComp (const cdr &d, eurexRBCHeaderCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setSendingTime, &eurexRBCHeaderCompPacket::resetSendingTime> (d, SendingTime, packet);
    eti::getInteger<uint64_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setApplSeqNum, &eurexRBCHeaderCompPacket::resetApplSeqNum> (d, ApplSeqNum, packet);
    eti::getInteger<uint32_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setApplSubID, &eurexRBCHeaderCompPacket::resetApplSubID> (d, ApplSubID, packet);
    eti::getInteger<uint16_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setPartitionID, &eurexRBCHeaderCompPacket::resetPartitionID> (d, PartitionID, packet);
    eti::getInteger<int8_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setApplResendFlag, &eurexRBCHeaderCompPacket::resetApplResendFlag> (d, ApplResendFlag, packet);
    eti::getInteger<int8_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setApplID, &eurexRBCHeaderCompPacket::resetApplID> (d, ApplID, packet);
    eti::getInteger<int8_t, eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setLastFragment, &eurexRBCHeaderCompPacket::resetLastFragment> (d, LastFragment, packet);
    eti::getString<eurexRBCHeaderCompPacket, &eurexRBCHeaderCompPacket::setPad7, &eurexRBCHeaderCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putSideAllocGrpComp (const cdr &d, eurexSideAllocGrpCompPacket& packet)
{
    eti::getDouble<eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::setAllocQty, &eurexSideAllocGrpCompPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<uint32_t, eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::setIndividualAllocID, &eurexSideAllocGrpCompPacket::resetIndividualAllocID> (d, IndividualAllocID, packet);
    eti::getInteger<int8_t, eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::setSide, &eurexSideAllocGrpCompPacket::resetSide> (d, Side, packet);
    eti::getString<eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::setPartyExecutingFirm, &eurexSideAllocGrpCompPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSideAllocGrpCompPacket, &eurexSideAllocGrpCompPacket::setPartyExecutingTrader, &eurexSideAllocGrpCompPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
}

static void
putBasketExecGrpComp (const cdr &d, eurexBasketExecGrpCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::setPackageID, &eurexBasketExecGrpCompPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<int32_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::setSideMarketSegmentID, &eurexBasketExecGrpCompPacket::resetSideMarketSegmentID> (d, SideMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::setAllocID, &eurexBasketExecGrpCompPacket::resetAllocID> (d, AllocID, packet);
    eti::getInteger<int16_t, eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::setSideTrdSubTyp, &eurexBasketExecGrpCompPacket::resetSideTrdSubTyp> (d, SideTrdSubTyp, packet);
    eti::getString<eurexBasketExecGrpCompPacket, &eurexBasketExecGrpCompPacket::setPad2, &eurexBasketExecGrpCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putQuoteEventGrpComp (const cdr &d, eurexQuoteEventGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setSecurityID, &eurexQuoteEventGrpCompPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventPx, &eurexQuoteEventGrpCompPacket::resetQuoteEventPx> (d, QuoteEventPx, packet);
    eti::getDouble<eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventQty, &eurexQuoteEventGrpCompPacket::resetQuoteEventQty> (d, QuoteEventQty, packet);
    eti::getInteger<uint64_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteMsgID, &eurexQuoteEventGrpCompPacket::resetQuoteMsgID> (d, QuoteMsgID, packet);
    eti::getInteger<uint32_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventMatchID, &eurexQuoteEventGrpCompPacket::resetQuoteEventMatchID> (d, QuoteEventMatchID, packet);
    eti::getInteger<int32_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventExecID, &eurexQuoteEventGrpCompPacket::resetQuoteEventExecID> (d, QuoteEventExecID, packet);
    eti::getInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventType, &eurexQuoteEventGrpCompPacket::resetQuoteEventType> (d, QuoteEventType, packet);
    eti::getInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventSide, &eurexQuoteEventGrpCompPacket::resetQuoteEventSide> (d, QuoteEventSide, packet);
    eti::getInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventLiquidityInd, &eurexQuoteEventGrpCompPacket::resetQuoteEventLiquidityInd> (d, QuoteEventLiquidityInd, packet);
    eti::getInteger<int8_t, eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setQuoteEventReason, &eurexQuoteEventGrpCompPacket::resetQuoteEventReason> (d, QuoteEventReason, packet);
    eti::getString<eurexQuoteEventGrpCompPacket, &eurexQuoteEventGrpCompPacket::setPad4, &eurexQuoteEventGrpCompPacket::resetPad4> (d, Pad4, packet);
}

static void
putMessageHeaderOutComp (const cdr &d, eurexMessageHeaderOutCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexMessageHeaderOutCompPacket, &eurexMessageHeaderOutCompPacket::setBodyLen, &eurexMessageHeaderOutCompPacket::resetBodyLen> (d, BodyLen, packet);
    eti::getInteger<uint16_t, eurexMessageHeaderOutCompPacket, &eurexMessageHeaderOutCompPacket::setTemplateID, &eurexMessageHeaderOutCompPacket::resetTemplateID> (d, TemplateID, packet);
    eti::getString<eurexMessageHeaderOutCompPacket, &eurexMessageHeaderOutCompPacket::setPad2, &eurexMessageHeaderOutCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putInstrumentEventGrpComp (const cdr &d, eurexInstrumentEventGrpCompPacket& packet)
{
    eti::getInteger<int32_t, eurexInstrumentEventGrpCompPacket, &eurexInstrumentEventGrpCompPacket::setEventDate, &eurexInstrumentEventGrpCompPacket::resetEventDate> (d, EventDate, packet);
    eti::getInteger<int8_t, eurexInstrumentEventGrpCompPacket, &eurexInstrumentEventGrpCompPacket::setEventType, &eurexInstrumentEventGrpCompPacket::resetEventType> (d, EventType, packet);
    eti::getString<eurexInstrumentEventGrpCompPacket, &eurexInstrumentEventGrpCompPacket::setPad3, &eurexInstrumentEventGrpCompPacket::resetPad3> (d, Pad3, packet);
}

static void
putSRQSRelatedTradeIDGrpComp (const cdr &d, eurexSRQSRelatedTradeIDGrpCompPacket& packet)
{
    eti::getInteger<uint32_t, eurexSRQSRelatedTradeIDGrpCompPacket, &eurexSRQSRelatedTradeIDGrpCompPacket::setSRQSRelatedTradeID, &eurexSRQSRelatedTradeIDGrpCompPacket::resetSRQSRelatedTradeID> (d, SRQSRelatedTradeID, packet);
    eti::getString<eurexSRQSRelatedTradeIDGrpCompPacket, &eurexSRQSRelatedTradeIDGrpCompPacket::setPad4, &eurexSRQSRelatedTradeIDGrpCompPacket::resetPad4> (d, Pad4, packet);
}

static void
putSideAllocGrpBCComp (const cdr &d, eurexSideAllocGrpBCCompPacket& packet)
{
    eti::getDouble<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::setAllocQty, &eurexSideAllocGrpBCCompPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<uint32_t, eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::setIndividualAllocID, &eurexSideAllocGrpBCCompPacket::resetIndividualAllocID> (d, IndividualAllocID, packet);
    eti::getString<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::setPartyExecutingFirm, &eurexSideAllocGrpBCCompPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::setPartyExecutingTrader, &eurexSideAllocGrpBCCompPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getInteger<int8_t, eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::setSide, &eurexSideAllocGrpBCCompPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::setTradeAllocStatus, &eurexSideAllocGrpBCCompPacket::resetTradeAllocStatus> (d, TradeAllocStatus, packet);
    eti::getString<eurexSideAllocGrpBCCompPacket, &eurexSideAllocGrpBCCompPacket::setPad7, &eurexSideAllocGrpBCCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putBasketSideAllocExtGrpComp (const cdr &d, eurexBasketSideAllocExtGrpCompPacket& packet)
{
    eti::getDouble<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setAllocQty, &eurexBasketSideAllocExtGrpCompPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<uint64_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIDClientID, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIdInvestmentDecisionMaker, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setExecutingTrader, &eurexBasketSideAllocExtGrpCompPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPackageID, &eurexBasketSideAllocExtGrpCompPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<int32_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setSideMarketSegmentID, &eurexBasketSideAllocExtGrpCompPacket::resetSideMarketSegmentID> (d, SideMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setAllocID, &eurexBasketSideAllocExtGrpCompPacket::resetAllocID> (d, AllocID, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setSide, &eurexBasketSideAllocExtGrpCompPacket::resetSide> (d, Side, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPositionEffect, &eurexBasketSideAllocExtGrpCompPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setTradingCapacity, &eurexBasketSideAllocExtGrpCompPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setOrderAttributeLiquidityProvision, &eurexBasketSideAllocExtGrpCompPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setExecutingTraderQualifier, &eurexBasketSideAllocExtGrpCompPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setOrderAttributeRiskReduction, &eurexBasketSideAllocExtGrpCompPacket::resetOrderAttributeRiskReduction> (d, OrderAttributeRiskReduction, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyExecutingFirm, &eurexBasketSideAllocExtGrpCompPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyExecutingTrader, &eurexBasketSideAllocExtGrpCompPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setAccount, &eurexBasketSideAllocExtGrpCompPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setFreeText1, &eurexBasketSideAllocExtGrpCompPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setFreeText2, &eurexBasketSideAllocExtGrpCompPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setFreeText3, &eurexBasketSideAllocExtGrpCompPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIDTakeUpTradingFirm, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIDOrderOriginationFirm, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIDBeneficiary, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIDPositionAccount, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setPartyIDLocationID, &eurexBasketSideAllocExtGrpCompPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setCustOrderHandlingInst, &eurexBasketSideAllocExtGrpCompPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexBasketSideAllocExtGrpCompPacket, &eurexBasketSideAllocExtGrpCompPacket::setComplianceText, &eurexBasketSideAllocExtGrpCompPacket::resetComplianceText> (d, ComplianceText, packet);
}

static void
putFillsGrpComp (const cdr &d, eurexFillsGrpCompPacket& packet)
{
    eti::getDouble<eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::setFillPx, &eurexFillsGrpCompPacket::resetFillPx> (d, FillPx, packet);
    eti::getDouble<eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::setFillQty, &eurexFillsGrpCompPacket::resetFillQty> (d, FillQty, packet);
    eti::getInteger<uint32_t, eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::setFillMatchID, &eurexFillsGrpCompPacket::resetFillMatchID> (d, FillMatchID, packet);
    eti::getInteger<int32_t, eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::setFillExecID, &eurexFillsGrpCompPacket::resetFillExecID> (d, FillExecID, packet);
    eti::getInteger<int8_t, eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::setFillLiquidityInd, &eurexFillsGrpCompPacket::resetFillLiquidityInd> (d, FillLiquidityInd, packet);
    eti::getString<eurexFillsGrpCompPacket, &eurexFillsGrpCompPacket::setPad7, &eurexFillsGrpCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putInstrmtMatchSideGrpComp (const cdr &d, eurexInstrmtMatchSideGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setSecurityID, &eurexInstrmtMatchSideGrpCompPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setLastPx, &eurexInstrmtMatchSideGrpCompPacket::resetLastPx> (d, LastPx, packet);
    eti::getInteger<uint64_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setTransBkdTime, &eurexInstrmtMatchSideGrpCompPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getDouble<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setRelatedClosePrice, &eurexInstrmtMatchSideGrpCompPacket::resetRelatedClosePrice> (d, RelatedClosePrice, packet);
    eti::getInteger<uint32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setPackageID, &eurexInstrmtMatchSideGrpCompPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<int32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setSideMarketSegmentID, &eurexInstrmtMatchSideGrpCompPacket::resetSideMarketSegmentID> (d, SideMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setNegotiationID, &eurexInstrmtMatchSideGrpCompPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setSRQSRelatedTradeID, &eurexInstrmtMatchSideGrpCompPacket::resetSRQSRelatedTradeID> (d, SRQSRelatedTradeID, packet);
    eti::getInteger<int16_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setSideTrdSubTyp, &eurexInstrmtMatchSideGrpCompPacket::resetSideTrdSubTyp> (d, SideTrdSubTyp, packet);
    eti::getInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setProductComplex, &eurexInstrmtMatchSideGrpCompPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setTradePublishIndicator, &eurexInstrmtMatchSideGrpCompPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setInstrmtMatchSideID, &eurexInstrmtMatchSideGrpCompPacket::resetInstrmtMatchSideID> (d, InstrmtMatchSideID, packet);
    eti::getInteger<int8_t, eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setEffectOnBasket, &eurexInstrmtMatchSideGrpCompPacket::resetEffectOnBasket> (d, EffectOnBasket, packet);
    eti::getString<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setTradeReportText, &eurexInstrmtMatchSideGrpCompPacket::resetTradeReportText> (d, TradeReportText, packet);
    eti::getString<eurexInstrmtMatchSideGrpCompPacket, &eurexInstrmtMatchSideGrpCompPacket::setPad6, &eurexInstrmtMatchSideGrpCompPacket::resetPad6> (d, Pad6, packet);
}

static void
putUnderlyingStipGrpComp (const cdr &d, eurexUnderlyingStipGrpCompPacket& packet)
{
    eti::getString<eurexUnderlyingStipGrpCompPacket, &eurexUnderlyingStipGrpCompPacket::setUnderlyingStipValue, &eurexUnderlyingStipGrpCompPacket::resetUnderlyingStipValue> (d, UnderlyingStipValue, packet);
    eti::getString<eurexUnderlyingStipGrpCompPacket, &eurexUnderlyingStipGrpCompPacket::setUnderlyingStipType, &eurexUnderlyingStipGrpCompPacket::resetUnderlyingStipType> (d, UnderlyingStipType, packet);
    eti::getString<eurexUnderlyingStipGrpCompPacket, &eurexUnderlyingStipGrpCompPacket::setPad1, &eurexUnderlyingStipGrpCompPacket::resetPad1> (d, Pad1, packet);
}

static void
putCrossRequestAckSideGrpComp (const cdr &d, eurexCrossRequestAckSideGrpCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::setOrderID, &eurexCrossRequestAckSideGrpCompPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<int8_t, eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::setInputSource, &eurexCrossRequestAckSideGrpCompPacket::resetInputSource> (d, InputSource, packet);
    eti::getInteger<int8_t, eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::setSide, &eurexCrossRequestAckSideGrpCompPacket::resetSide> (d, Side, packet);
    eti::getString<eurexCrossRequestAckSideGrpCompPacket, &eurexCrossRequestAckSideGrpCompPacket::setPad6, &eurexCrossRequestAckSideGrpCompPacket::resetPad6> (d, Pad6, packet);
}

static void
putQuoteEntryAckGrpComp (const cdr &d, eurexQuoteEntryAckGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::setSecurityID, &eurexQuoteEntryAckGrpCompPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::setBidCxlSize, &eurexQuoteEntryAckGrpCompPacket::resetBidCxlSize> (d, BidCxlSize, packet);
    eti::getDouble<eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::setOfferCxlSize, &eurexQuoteEntryAckGrpCompPacket::resetOfferCxlSize> (d, OfferCxlSize, packet);
    eti::getInteger<int32_t, eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::setQuoteEntryRejectReason, &eurexQuoteEntryAckGrpCompPacket::resetQuoteEntryRejectReason> (d, QuoteEntryRejectReason, packet);
    eti::getInteger<int8_t, eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::setQuoteEntryStatus, &eurexQuoteEntryAckGrpCompPacket::resetQuoteEntryStatus> (d, QuoteEntryStatus, packet);
    eti::getString<eurexQuoteEntryAckGrpCompPacket, &eurexQuoteEntryAckGrpCompPacket::setPad3, &eurexQuoteEntryAckGrpCompPacket::resetPad3> (d, Pad3, packet);
}

static void
putRiskLimitsRptGrpComp (const cdr &d, eurexRiskLimitsRptGrpCompPacket& packet)
{
    eti::getDouble<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setRiskLimitQty, &eurexRiskLimitsRptGrpCompPacket::resetRiskLimitQty> (d, RiskLimitQty, packet);
    eti::getDouble<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setRiskLimitOpenQty, &eurexRiskLimitsRptGrpCompPacket::resetRiskLimitOpenQty> (d, RiskLimitOpenQty, packet);
    eti::getDouble<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setRiskLimitNetPositionQty, &eurexRiskLimitsRptGrpCompPacket::resetRiskLimitNetPositionQty> (d, RiskLimitNetPositionQty, packet);
    eti::getInteger<int8_t, eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setRiskLimitType, &eurexRiskLimitsRptGrpCompPacket::resetRiskLimitType> (d, RiskLimitType, packet);
    eti::getInteger<int8_t, eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setRiskLimitRequestingPartyRole, &eurexRiskLimitsRptGrpCompPacket::resetRiskLimitRequestingPartyRole> (d, RiskLimitRequestingPartyRole, packet);
    eti::getInteger<int8_t, eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setRiskLimitViolationIndicator, &eurexRiskLimitsRptGrpCompPacket::resetRiskLimitViolationIndicator> (d, RiskLimitViolationIndicator, packet);
    eti::getString<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setRiskLimitGroup, &eurexRiskLimitsRptGrpCompPacket::resetRiskLimitGroup> (d, RiskLimitGroup, packet);
    eti::getString<eurexRiskLimitsRptGrpCompPacket, &eurexRiskLimitsRptGrpCompPacket::setPad2, &eurexRiskLimitsRptGrpCompPacket::resetPad2> (d, Pad2, packet);
}

static void
putResponseHeaderMEComp (const cdr &d, eurexResponseHeaderMECompPacket& packet)
{
    eti::getInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setRequestTime, &eurexResponseHeaderMECompPacket::resetRequestTime> (d, RequestTime, packet);
    eti::getInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setTrdRegTSTimeIn, &eurexResponseHeaderMECompPacket::resetTrdRegTSTimeIn> (d, TrdRegTSTimeIn, packet);
    eti::getInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setTrdRegTSTimeOut, &eurexResponseHeaderMECompPacket::resetTrdRegTSTimeOut> (d, TrdRegTSTimeOut, packet);
    eti::getInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setResponseIn, &eurexResponseHeaderMECompPacket::resetResponseIn> (d, ResponseIn, packet);
    eti::getInteger<uint64_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setSendingTime, &eurexResponseHeaderMECompPacket::resetSendingTime> (d, SendingTime, packet);
    eti::getInteger<uint32_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setMsgSeqNum, &eurexResponseHeaderMECompPacket::resetMsgSeqNum> (d, MsgSeqNum, packet);
    eti::getInteger<uint16_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setPartitionID, &eurexResponseHeaderMECompPacket::resetPartitionID> (d, PartitionID, packet);
    eti::getInteger<int8_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setApplID, &eurexResponseHeaderMECompPacket::resetApplID> (d, ApplID, packet);
    eti::getString<eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setApplMsgID, &eurexResponseHeaderMECompPacket::resetApplMsgID> (d, ApplMsgID, packet);
    eti::getInteger<int8_t, eurexResponseHeaderMECompPacket, &eurexResponseHeaderMECompPacket::setLastFragment, &eurexResponseHeaderMECompPacket::resetLastFragment> (d, LastFragment, packet);
}

static void
putCrossRequestSideGrpComp (const cdr &d, eurexCrossRequestSideGrpCompPacket& packet)
{
    eti::getInteger<uint64_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIDClientID, &eurexCrossRequestSideGrpCompPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIdInvestmentDecisionMaker, &eurexCrossRequestSideGrpCompPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setExecutingTrader, &eurexCrossRequestSideGrpCompPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getDouble<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setMaximumPrice, &eurexCrossRequestSideGrpCompPacket::resetMaximumPrice> (d, MaximumPrice, packet);
    eti::getInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setInputSource, &eurexCrossRequestSideGrpCompPacket::resetInputSource> (d, InputSource, packet);
    eti::getInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setSide, &eurexCrossRequestSideGrpCompPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setTradingCapacity, &eurexCrossRequestSideGrpCompPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setExecutingTraderQualifier, &eurexCrossRequestSideGrpCompPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setOrderAttributeLiquidityProvision, &eurexCrossRequestSideGrpCompPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexCrossRequestSideGrpCompPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPositionEffect, &eurexCrossRequestSideGrpCompPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setCustOrderHandlingInst, &eurexCrossRequestSideGrpCompPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setAccount, &eurexCrossRequestSideGrpCompPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIDPositionAccount, &eurexCrossRequestSideGrpCompPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setFreeText1, &eurexCrossRequestSideGrpCompPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setFreeText2, &eurexCrossRequestSideGrpCompPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setFreeText3, &eurexCrossRequestSideGrpCompPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIDOrderOriginationFirm, &eurexCrossRequestSideGrpCompPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIDBeneficiary, &eurexCrossRequestSideGrpCompPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIDTakeUpTradingFirm, &eurexCrossRequestSideGrpCompPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setSideComplianceText, &eurexCrossRequestSideGrpCompPacket::resetSideComplianceText> (d, SideComplianceText, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPartyIDLocationID, &eurexCrossRequestSideGrpCompPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexCrossRequestSideGrpCompPacket, &eurexCrossRequestSideGrpCompPacket::setPad7, &eurexCrossRequestSideGrpCompPacket::resetPad7> (d, Pad7, packet);
}

static void
putQuoteEntryGrpComp (const cdr &d, eurexQuoteEntryGrpCompPacket& packet)
{
    eti::getInteger<int64_t, eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::setSecurityID, &eurexQuoteEntryGrpCompPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::setBidPx, &eurexQuoteEntryGrpCompPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::setBidSize, &eurexQuoteEntryGrpCompPacket::resetBidSize> (d, BidSize, packet);
    eti::getDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::setOfferPx, &eurexQuoteEntryGrpCompPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexQuoteEntryGrpCompPacket, &eurexQuoteEntryGrpCompPacket::setOfferSize, &eurexQuoteEntryGrpCompPacket::resetOfferSize> (d, OfferSize, packet);
}


void
eurexCodec::putAddComplexInstrumentRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexAddComplexInstrumentRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::setMarketSegmentID, &eurexAddComplexInstrumentRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::setSecuritySubType, &eurexAddComplexInstrumentRequestPacket::resetSecuritySubType> (d, SecuritySubType, packet);
    eti::getInteger<int8_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::setProductComplex, &eurexAddComplexInstrumentRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::setNoLegs, &eurexAddComplexInstrumentRequestPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getString<eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::setComplianceText, &eurexAddComplexInstrumentRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexAddComplexInstrumentRequestPacket, &eurexAddComplexInstrumentRequestPacket::setPad2, &eurexAddComplexInstrumentRequestPacket::resetPad2> (d, Pad2, packet);
    const cdrArray* vInstrmtLegGrp;
    bool bInstrmtLegGrp = d.getArray (InstrmtLegGrp, &vInstrmtLegGrp);
    for (size_t i = 0; bInstrmtLegGrp && i < vInstrmtLegGrp->size (); i++)
    {
        eurexInstrmtLegGrpCompPacket group;
        putInstrmtLegGrpComp ((*vInstrmtLegGrp)[i], group);
        packet.mInstrmtLegGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize AddComplexInstrumentRequest");
}

void
eurexCodec::putAddComplexInstrumentResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexAddComplexInstrumentResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getDouble<eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setLowLimitPrice, &eurexAddComplexInstrumentResponsePacket::resetLowLimitPrice> (d, LowLimitPrice, packet);
    eti::getDouble<eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setHighLimitPrice, &eurexAddComplexInstrumentResponsePacket::resetHighLimitPrice> (d, HighLimitPrice, packet);
    eti::getInteger<int64_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setSecurityID, &eurexAddComplexInstrumentResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setLastUpdateTime, &eurexAddComplexInstrumentResponsePacket::resetLastUpdateTime> (d, LastUpdateTime, packet);
    eti::getInteger<uint64_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setSecurityResponseID, &eurexAddComplexInstrumentResponsePacket::resetSecurityResponseID> (d, SecurityResponseID, packet);
    eti::getInteger<int32_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setMarketSegmentID, &eurexAddComplexInstrumentResponsePacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setNumberOfSecurities, &eurexAddComplexInstrumentResponsePacket::resetNumberOfSecurities> (d, NumberOfSecurities, packet);
    eti::getInteger<int32_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setSecuritySubType, &eurexAddComplexInstrumentResponsePacket::resetSecuritySubType> (d, SecuritySubType, packet);
    eti::getInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setMultilegModel, &eurexAddComplexInstrumentResponsePacket::resetMultilegModel> (d, MultilegModel, packet);
    eti::getInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setImpliedMarketIndicator, &eurexAddComplexInstrumentResponsePacket::resetImpliedMarketIndicator> (d, ImpliedMarketIndicator, packet);
    eti::getInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setProductComplex, &eurexAddComplexInstrumentResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexAddComplexInstrumentResponsePacket, &eurexAddComplexInstrumentResponsePacket::setNoLegs, &eurexAddComplexInstrumentResponsePacket::resetNoLegs> (d, NoLegs, packet);
    const cdrArray* vInstrmtLegGrp;
    bool bInstrmtLegGrp = d.getArray (InstrmtLegGrp, &vInstrmtLegGrp);
    for (size_t i = 0; bInstrmtLegGrp && i < vInstrmtLegGrp->size (); i++)
    {
        eurexInstrmtLegGrpCompPacket group;
        putInstrmtLegGrpComp ((*vInstrmtLegGrp)[i], group);
        packet.mInstrmtLegGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize AddComplexInstrumentResponse");
}

void
eurexCodec::putAddFlexibleInstrumentRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexAddFlexibleInstrumentRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getDouble<eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setStrikePrice, &eurexAddFlexibleInstrumentRequestPacket::resetStrikePrice> (d, StrikePrice, packet);
    eti::getInteger<int32_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setMarketSegmentID, &eurexAddFlexibleInstrumentRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setMaturityDate, &eurexAddFlexibleInstrumentRequestPacket::resetMaturityDate> (d, MaturityDate, packet);
    eti::getString<eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setSettlMethod, &eurexAddFlexibleInstrumentRequestPacket::resetSettlMethod> (d, SettlMethod, packet);
    eti::getInteger<int8_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setOptAttribute, &eurexAddFlexibleInstrumentRequestPacket::resetOptAttribute> (d, OptAttribute, packet);
    eti::getInteger<int8_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setPutOrCall, &eurexAddFlexibleInstrumentRequestPacket::resetPutOrCall> (d, PutOrCall, packet);
    eti::getInteger<int8_t, eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setExerciseStyle, &eurexAddFlexibleInstrumentRequestPacket::resetExerciseStyle> (d, ExerciseStyle, packet);
    eti::getString<eurexAddFlexibleInstrumentRequestPacket, &eurexAddFlexibleInstrumentRequestPacket::setComplianceText, &eurexAddFlexibleInstrumentRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize AddFlexibleInstrumentRequest");
}

void
eurexCodec::putAddFlexibleInstrumentResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexAddFlexibleInstrumentResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setSecurityResponseID, &eurexAddFlexibleInstrumentResponsePacket::resetSecurityResponseID> (d, SecurityResponseID, packet);
    eti::getInteger<int64_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setSecurityID, &eurexAddFlexibleInstrumentResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setStrikePrice, &eurexAddFlexibleInstrumentResponsePacket::resetStrikePrice> (d, StrikePrice, packet);
    eti::getInteger<int32_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setMarketSegmentID, &eurexAddFlexibleInstrumentResponsePacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setMaturityDate, &eurexAddFlexibleInstrumentResponsePacket::resetMaturityDate> (d, MaturityDate, packet);
    eti::getInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setProductComplex, &eurexAddFlexibleInstrumentResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getString<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setSettlMethod, &eurexAddFlexibleInstrumentResponsePacket::resetSettlMethod> (d, SettlMethod, packet);
    eti::getInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setOptAttribute, &eurexAddFlexibleInstrumentResponsePacket::resetOptAttribute> (d, OptAttribute, packet);
    eti::getInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setPutOrCall, &eurexAddFlexibleInstrumentResponsePacket::resetPutOrCall> (d, PutOrCall, packet);
    eti::getInteger<int8_t, eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setExerciseStyle, &eurexAddFlexibleInstrumentResponsePacket::resetExerciseStyle> (d, ExerciseStyle, packet);
    eti::getString<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setSymbol, &eurexAddFlexibleInstrumentResponsePacket::resetSymbol> (d, Symbol, packet);
    eti::getString<eurexAddFlexibleInstrumentResponsePacket, &eurexAddFlexibleInstrumentResponsePacket::setPad7, &eurexAddFlexibleInstrumentResponsePacket::resetPad7> (d, Pad7, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize AddFlexibleInstrumentResponse");
}

void
eurexCodec::putAmendBasketTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexAmendBasketTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setBasketTrdMatchID, &eurexAmendBasketTradeRequestPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint32_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setBasketExecID, &eurexAmendBasketTradeRequestPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int32_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setMarketSegmentID, &eurexAmendBasketTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setMaturityMonthYear, &eurexAmendBasketTradeRequestPacket::resetMaturityMonthYear> (d, MaturityMonthYear, packet);
    eti::getInteger<int16_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setTrdType, &eurexAmendBasketTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setTradeReportType, &eurexAmendBasketTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setBasketTradeReportType, &eurexAmendBasketTradeRequestPacket::resetBasketTradeReportType> (d, BasketTradeReportType, packet);
    eti::getInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setNoBasketRootPartyGrps, &eurexAmendBasketTradeRequestPacket::resetNoBasketRootPartyGrps> (d, NoBasketRootPartyGrps, packet);
    eti::getInteger<int8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setNoInstrmtMatchSides, &eurexAmendBasketTradeRequestPacket::resetNoInstrmtMatchSides> (d, NoInstrmtMatchSides, packet);
    eti::getInteger<uint8_t, eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setNoBasketSideAlloc, &eurexAmendBasketTradeRequestPacket::resetNoBasketSideAlloc> (d, NoBasketSideAlloc, packet);
    eti::getString<eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setBasketTradeReportText, &eurexAmendBasketTradeRequestPacket::resetBasketTradeReportText> (d, BasketTradeReportText, packet);
    eti::getString<eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setTradeReportID, &eurexAmendBasketTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexAmendBasketTradeRequestPacket, &eurexAmendBasketTradeRequestPacket::setPad5, &eurexAmendBasketTradeRequestPacket::resetPad5> (d, Pad5, packet);
    const cdrArray* vBasketRootPartyGrp;
    bool bBasketRootPartyGrp = d.getArray (BasketRootPartyGrp, &vBasketRootPartyGrp);
    for (size_t i = 0; bBasketRootPartyGrp && i < vBasketRootPartyGrp->size (); i++)
    {
        eurexBasketRootPartyGrpCompPacket group;
        putBasketRootPartyGrpComp ((*vBasketRootPartyGrp)[i], group);
        packet.mBasketRootPartyGrp.push_back (group);
    }
    const cdrArray* vInstrmtMatchSideGrp;
    bool bInstrmtMatchSideGrp = d.getArray (InstrmtMatchSideGrp, &vInstrmtMatchSideGrp);
    for (size_t i = 0; bInstrmtMatchSideGrp && i < vInstrmtMatchSideGrp->size (); i++)
    {
        eurexInstrmtMatchSideGrpCompPacket group;
        putInstrmtMatchSideGrpComp ((*vInstrmtMatchSideGrp)[i], group);
        packet.mInstrmtMatchSideGrp.push_back (group);
    }
    const cdrArray* vBasketSideAllocGrp;
    bool bBasketSideAllocGrp = d.getArray (BasketSideAllocGrp, &vBasketSideAllocGrp);
    for (size_t i = 0; bBasketSideAllocGrp && i < vBasketSideAllocGrp->size (); i++)
    {
        eurexBasketSideAllocGrpCompPacket group;
        putBasketSideAllocGrpComp ((*vBasketSideAllocGrp)[i], group);
        packet.mBasketSideAllocGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize AmendBasketTradeRequest");
}

void
eurexCodec::putApproveBasketTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexApproveBasketTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setBasketTrdMatchID, &eurexApproveBasketTradeRequestPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint32_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setBasketExecID, &eurexApproveBasketTradeRequestPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int32_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setMarketSegmentID, &eurexApproveBasketTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setRootPartySubIDType, &eurexApproveBasketTradeRequestPacket::resetRootPartySubIDType> (d, RootPartySubIDType, packet);
    eti::getInteger<int16_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setTrdType, &eurexApproveBasketTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setTradeReportType, &eurexApproveBasketTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<uint8_t, eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setNoBasketSideAlloc, &eurexApproveBasketTradeRequestPacket::resetNoBasketSideAlloc> (d, NoBasketSideAlloc, packet);
    eti::getString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setBasketTradeReportText, &eurexApproveBasketTradeRequestPacket::resetBasketTradeReportText> (d, BasketTradeReportText, packet);
    eti::getString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setTradeReportID, &eurexApproveBasketTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setBasketSideTradeReportID, &eurexApproveBasketTradeRequestPacket::resetBasketSideTradeReportID> (d, BasketSideTradeReportID, packet);
    eti::getString<eurexApproveBasketTradeRequestPacket, &eurexApproveBasketTradeRequestPacket::setPad6, &eurexApproveBasketTradeRequestPacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vBasketSideAllocExtGrp;
    bool bBasketSideAllocExtGrp = d.getArray (BasketSideAllocExtGrp, &vBasketSideAllocExtGrp);
    for (size_t i = 0; bBasketSideAllocExtGrp && i < vBasketSideAllocExtGrp->size (); i++)
    {
        eurexBasketSideAllocExtGrpCompPacket group;
        putBasketSideAllocExtGrpComp ((*vBasketSideAllocExtGrp)[i], group);
        packet.mBasketSideAllocExtGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ApproveBasketTradeRequest");
}

void
eurexCodec::putApproveTESTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexApproveTESTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIDClientID, &eurexApproveTESTradeRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexApproveTESTradeRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setExecutingTrader, &eurexApproveTESTradeRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getDouble<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setAllocQty, &eurexApproveTESTradeRequestPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<uint32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPackageID, &eurexApproveTESTradeRequestPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<uint32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setAllocID, &eurexApproveTESTradeRequestPacket::resetAllocID> (d, AllocID, packet);
    eti::getInteger<uint32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setTESExecID, &eurexApproveTESTradeRequestPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<int32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setMarketSegmentID, &eurexApproveTESTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setRelatedMarketSegmentID, &eurexApproveTESTradeRequestPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<int16_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setTrdType, &eurexApproveTESTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setTradingCapacity, &eurexApproveTESTradeRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setTradeReportType, &eurexApproveTESTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setSide, &eurexApproveTESTradeRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setOrderAttributeLiquidityProvision, &eurexApproveTESTradeRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexApproveTESTradeRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setExecutingTraderQualifier, &eurexApproveTESTradeRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getInteger<int8_t, eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setOrderAttributeRiskReduction, &eurexApproveTESTradeRequestPacket::resetOrderAttributeRiskReduction> (d, OrderAttributeRiskReduction, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setTradeReportID, &eurexApproveTESTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPositionEffect, &eurexApproveTESTradeRequestPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyExecutingFirm, &eurexApproveTESTradeRequestPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyExecutingTrader, &eurexApproveTESTradeRequestPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setAccount, &eurexApproveTESTradeRequestPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setFreeText1, &eurexApproveTESTradeRequestPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setFreeText2, &eurexApproveTESTradeRequestPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setFreeText3, &eurexApproveTESTradeRequestPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIDTakeUpTradingFirm, &eurexApproveTESTradeRequestPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIDPositionAccount, &eurexApproveTESTradeRequestPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIDOrderOriginationFirm, &eurexApproveTESTradeRequestPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIDBeneficiary, &eurexApproveTESTradeRequestPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPartyIDLocationID, &eurexApproveTESTradeRequestPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setCustOrderHandlingInst, &eurexApproveTESTradeRequestPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setComplianceText, &eurexApproveTESTradeRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexApproveTESTradeRequestPacket, &eurexApproveTESTradeRequestPacket::setPad1, &eurexApproveTESTradeRequestPacket::resetPad1> (d, Pad1, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ApproveTESTradeRequest");
}

void
eurexCodec::putBasketApproveBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexBasketApproveBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setBasketTrdMatchID, &eurexBasketApproveBroadcastPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint64_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setTransactTime, &eurexBasketApproveBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint32_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setBasketExecID, &eurexBasketApproveBroadcastPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int32_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setMarketSegmentID, &eurexBasketApproveBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setTrdType, &eurexBasketApproveBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setTradeReportType, &eurexBasketApproveBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setBasketTradeReportType, &eurexBasketApproveBroadcastPacket::resetBasketTradeReportType> (d, BasketTradeReportType, packet);
    eti::getString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setMessageEventSource, &eurexBasketApproveBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getInteger<uint8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setNoBasketSideAlloc, &eurexBasketApproveBroadcastPacket::resetNoBasketSideAlloc> (d, NoBasketSideAlloc, packet);
    eti::getInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setNoBasketRootPartyGrps, &eurexBasketApproveBroadcastPacket::resetNoBasketRootPartyGrps> (d, NoBasketRootPartyGrps, packet);
    eti::getInteger<int8_t, eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setPartyIDEnteringFirm, &eurexBasketApproveBroadcastPacket::resetPartyIDEnteringFirm> (d, PartyIDEnteringFirm, packet);
    eti::getString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setPartyEnteringTrader, &eurexBasketApproveBroadcastPacket::resetPartyEnteringTrader> (d, PartyEnteringTrader, packet);
    eti::getString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setBasketTradeReportText, &eurexBasketApproveBroadcastPacket::resetBasketTradeReportText> (d, BasketTradeReportText, packet);
    eti::getString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setTradeReportID, &eurexBasketApproveBroadcastPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexBasketApproveBroadcastPacket, &eurexBasketApproveBroadcastPacket::setPad2, &eurexBasketApproveBroadcastPacket::resetPad2> (d, Pad2, packet);
    const cdrArray* vBasketRootPartyGrp;
    bool bBasketRootPartyGrp = d.getArray (BasketRootPartyGrp, &vBasketRootPartyGrp);
    for (size_t i = 0; bBasketRootPartyGrp && i < vBasketRootPartyGrp->size (); i++)
    {
        eurexBasketRootPartyGrpCompPacket group;
        putBasketRootPartyGrpComp ((*vBasketRootPartyGrp)[i], group);
        packet.mBasketRootPartyGrp.push_back (group);
    }
    const cdrArray* vBasketSideAllocExtBCGrp;
    bool bBasketSideAllocExtBCGrp = d.getArray (BasketSideAllocExtBCGrp, &vBasketSideAllocExtBCGrp);
    for (size_t i = 0; bBasketSideAllocExtBCGrp && i < vBasketSideAllocExtBCGrp->size (); i++)
    {
        eurexBasketSideAllocExtBCGrpCompPacket group;
        putBasketSideAllocExtBCGrpComp ((*vBasketSideAllocExtBCGrp)[i], group);
        packet.mBasketSideAllocExtBCGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize BasketApproveBroadcast");
}

void
eurexCodec::putBasketBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexBasketBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setBasketTrdMatchID, &eurexBasketBroadcastPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint64_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setTransactTime, &eurexBasketBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint32_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setBasketExecID, &eurexBasketBroadcastPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int32_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setMarketSegmentID, &eurexBasketBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setMaturityMonthYear, &eurexBasketBroadcastPacket::resetMaturityMonthYear> (d, MaturityMonthYear, packet);
    eti::getInteger<int16_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setTrdType, &eurexBasketBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setTradeReportType, &eurexBasketBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setBasketTradeReportType, &eurexBasketBroadcastPacket::resetBasketTradeReportType> (d, BasketTradeReportType, packet);
    eti::getString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setMessageEventSource, &eurexBasketBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setNoBasketRootPartyGrpsBC, &eurexBasketBroadcastPacket::resetNoBasketRootPartyGrpsBC> (d, NoBasketRootPartyGrpsBC, packet);
    eti::getInteger<int8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setNoInstrmtMatchSides, &eurexBasketBroadcastPacket::resetNoInstrmtMatchSides> (d, NoInstrmtMatchSides, packet);
    eti::getInteger<uint8_t, eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setNoBasketSideAlloc, &eurexBasketBroadcastPacket::resetNoBasketSideAlloc> (d, NoBasketSideAlloc, packet);
    eti::getString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setBasketTradeReportText, &eurexBasketBroadcastPacket::resetBasketTradeReportText> (d, BasketTradeReportText, packet);
    eti::getString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setTradeReportID, &eurexBasketBroadcastPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexBasketBroadcastPacket, &eurexBasketBroadcastPacket::setPad4, &eurexBasketBroadcastPacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vBasketRootPartyGrp;
    bool bBasketRootPartyGrp = d.getArray (BasketRootPartyGrp, &vBasketRootPartyGrp);
    for (size_t i = 0; bBasketRootPartyGrp && i < vBasketRootPartyGrp->size (); i++)
    {
        eurexBasketRootPartyGrpCompPacket group;
        putBasketRootPartyGrpComp ((*vBasketRootPartyGrp)[i], group);
        packet.mBasketRootPartyGrp.push_back (group);
    }
    const cdrArray* vInstrmtMatchSideGrp;
    bool bInstrmtMatchSideGrp = d.getArray (InstrmtMatchSideGrp, &vInstrmtMatchSideGrp);
    for (size_t i = 0; bInstrmtMatchSideGrp && i < vInstrmtMatchSideGrp->size (); i++)
    {
        eurexInstrmtMatchSideGrpCompPacket group;
        putInstrmtMatchSideGrpComp ((*vInstrmtMatchSideGrp)[i], group);
        packet.mInstrmtMatchSideGrp.push_back (group);
    }
    const cdrArray* vBasketSideAllocGrp;
    bool bBasketSideAllocGrp = d.getArray (BasketSideAllocGrp, &vBasketSideAllocGrp);
    for (size_t i = 0; bBasketSideAllocGrp && i < vBasketSideAllocGrp->size (); i++)
    {
        eurexBasketSideAllocGrpCompPacket group;
        putBasketSideAllocGrpComp ((*vBasketSideAllocGrp)[i], group);
        packet.mBasketSideAllocGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize BasketBroadcast");
}

void
eurexCodec::putBasketDeleteBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexBasketDeleteBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setBasketTrdMatchID, &eurexBasketDeleteBroadcastPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint64_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setTransactTime, &eurexBasketDeleteBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int32_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setMarketSegmentID, &eurexBasketDeleteBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setBasketExecID, &eurexBasketDeleteBroadcastPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int16_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setTrdType, &eurexBasketDeleteBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setDeleteReason, &eurexBasketDeleteBroadcastPacket::resetDeleteReason> (d, DeleteReason, packet);
    eti::getString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setMessageEventSource, &eurexBasketDeleteBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setBasketTradeReportText, &eurexBasketDeleteBroadcastPacket::resetBasketTradeReportText> (d, BasketTradeReportText, packet);
    eti::getString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setTradeReportID, &eurexBasketDeleteBroadcastPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexBasketDeleteBroadcastPacket, &eurexBasketDeleteBroadcastPacket::setBasketSideTradeReportID, &eurexBasketDeleteBroadcastPacket::resetBasketSideTradeReportID> (d, BasketSideTradeReportID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize BasketDeleteBroadcast");
}

void
eurexCodec::putBasketExecutionBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexBasketExecutionBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setBasketTrdMatchID, &eurexBasketExecutionBroadcastPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint64_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setTransactTime, &eurexBasketExecutionBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint32_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setBasketExecID, &eurexBasketExecutionBroadcastPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int32_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setMarketSegmentID, &eurexBasketExecutionBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setTrdType, &eurexBasketExecutionBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setTradeReportType, &eurexBasketExecutionBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setNoInstrmtMatchSides, &eurexBasketExecutionBroadcastPacket::resetNoInstrmtMatchSides> (d, NoInstrmtMatchSides, packet);
    eti::getString<eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setMessageEventSource, &eurexBasketExecutionBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setBasketSideTradeReportID, &eurexBasketExecutionBroadcastPacket::resetBasketSideTradeReportID> (d, BasketSideTradeReportID, packet);
    eti::getString<eurexBasketExecutionBroadcastPacket, &eurexBasketExecutionBroadcastPacket::setPad7, &eurexBasketExecutionBroadcastPacket::resetPad7> (d, Pad7, packet);
    const cdrArray* vBasketExecGrp;
    bool bBasketExecGrp = d.getArray (BasketExecGrp, &vBasketExecGrp);
    for (size_t i = 0; bBasketExecGrp && i < vBasketExecGrp->size (); i++)
    {
        eurexBasketExecGrpCompPacket group;
        putBasketExecGrpComp ((*vBasketExecGrp)[i], group);
        packet.mBasketExecGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize BasketExecutionBroadcast");
}

void
eurexCodec::putBasketResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexBasketResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<uint32_t, eurexBasketResponsePacket, &eurexBasketResponsePacket::setBasketExecID, &eurexBasketResponsePacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getString<eurexBasketResponsePacket, &eurexBasketResponsePacket::setTradeReportID, &eurexBasketResponsePacket::resetTradeReportID> (d, TradeReportID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize BasketResponse");
}

void
eurexCodec::putBroadcastErrorNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexBroadcastErrorNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNotifHeaderComp (d, packet.mNotifHeader);
    eti::getInteger<uint32_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::setApplIDStatus, &eurexBroadcastErrorNotificationPacket::resetApplIDStatus> (d, ApplIDStatus, packet);
    eti::getInteger<uint32_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::setRefApplSubID, &eurexBroadcastErrorNotificationPacket::resetRefApplSubID> (d, RefApplSubID, packet);
    eti::getInteger<int16_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::setVarTextLen, &eurexBroadcastErrorNotificationPacket::resetVarTextLen> (d, VarTextLen, packet);
    eti::getInteger<int8_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::setRefApplID, &eurexBroadcastErrorNotificationPacket::resetRefApplID> (d, RefApplID, packet);
    eti::getInteger<int8_t, eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::setSessionStatus, &eurexBroadcastErrorNotificationPacket::resetSessionStatus> (d, SessionStatus, packet);
    eti::getString<eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::setPad4, &eurexBroadcastErrorNotificationPacket::resetPad4> (d, Pad4, packet);
    eti::getString<eurexBroadcastErrorNotificationPacket, &eurexBroadcastErrorNotificationPacket::setVarText, &eurexBroadcastErrorNotificationPacket::resetVarText> (d, VarText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize BroadcastErrorNotification");
}

void
eurexCodec::putCLIPDeletionNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexCLIPDeletionNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setOrderID, &eurexCLIPDeletionNotificationPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setExecID, &eurexCLIPDeletionNotificationPacket::resetExecID> (d, ExecID, packet);
    eti::getInteger<int64_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setSecurityID, &eurexCLIPDeletionNotificationPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setCxlQty, &eurexCLIPDeletionNotificationPacket::resetCxlQty> (d, CxlQty, packet);
    eti::getInteger<int32_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setMarketSegmentID, &eurexCLIPDeletionNotificationPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setExecRestatementReason, &eurexCLIPDeletionNotificationPacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setProductComplex, &eurexCLIPDeletionNotificationPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setSide, &eurexCLIPDeletionNotificationPacket::resetSide> (d, Side, packet);
    eti::getString<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setOrdStatus, &eurexCLIPDeletionNotificationPacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setExecType, &eurexCLIPDeletionNotificationPacket::resetExecType> (d, ExecType, packet);
    eti::getString<eurexCLIPDeletionNotificationPacket, &eurexCLIPDeletionNotificationPacket::setPad6, &eurexCLIPDeletionNotificationPacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize CLIPDeletionNotification");
}

void
eurexCodec::putCLIPExecutionNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexCLIPExecutionNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setOrderID, &eurexCLIPExecutionNotificationPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setExecID, &eurexCLIPExecutionNotificationPacket::resetExecID> (d, ExecID, packet);
    eti::getInteger<int64_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setSecurityID, &eurexCLIPExecutionNotificationPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setCxlQty, &eurexCLIPExecutionNotificationPacket::resetCxlQty> (d, CxlQty, packet);
    eti::getDouble<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setLeavesQty, &eurexCLIPExecutionNotificationPacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setCumQty, &eurexCLIPExecutionNotificationPacket::resetCumQty> (d, CumQty, packet);
    eti::getInteger<int32_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setMarketSegmentID, &eurexCLIPExecutionNotificationPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setExecRestatementReason, &eurexCLIPExecutionNotificationPacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int16_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setNoLegExecs, &eurexCLIPExecutionNotificationPacket::resetNoLegExecs> (d, NoLegExecs, packet);
    eti::getInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setProductComplex, &eurexCLIPExecutionNotificationPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setSide, &eurexCLIPExecutionNotificationPacket::resetSide> (d, Side, packet);
    eti::getString<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setOrdStatus, &eurexCLIPExecutionNotificationPacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setExecType, &eurexCLIPExecutionNotificationPacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setMatchType, &eurexCLIPExecutionNotificationPacket::resetMatchType> (d, MatchType, packet);
    eti::getInteger<int8_t, eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setNoFills, &eurexCLIPExecutionNotificationPacket::resetNoFills> (d, NoFills, packet);
    eti::getString<eurexCLIPExecutionNotificationPacket, &eurexCLIPExecutionNotificationPacket::setPad2, &eurexCLIPExecutionNotificationPacket::resetPad2> (d, Pad2, packet);
    const cdrArray* vFillsGrp;
    bool bFillsGrp = d.getArray (FillsGrp, &vFillsGrp);
    for (size_t i = 0; bFillsGrp && i < vFillsGrp->size (); i++)
    {
        eurexFillsGrpCompPacket group;
        putFillsGrpComp ((*vFillsGrp)[i], group);
        packet.mFillsGrp.push_back (group);
    }
    const cdrArray* vInstrmntLegExecGrp;
    bool bInstrmntLegExecGrp = d.getArray (InstrmntLegExecGrp, &vInstrmntLegExecGrp);
    for (size_t i = 0; bInstrmntLegExecGrp && i < vInstrmntLegExecGrp->size (); i++)
    {
        eurexInstrmntLegExecGrpCompPacket group;
        putInstrmntLegExecGrpComp ((*vInstrmntLegExecGrp)[i], group);
        packet.mInstrmntLegExecGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize CLIPExecutionNotification");
}

void
eurexCodec::putCLIPResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexCLIPResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::setExecID, &eurexCLIPResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getInteger<int64_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::setSecurityID, &eurexCLIPResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<int32_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::setMarketSegmentID, &eurexCLIPResponsePacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::setNoSides, &eurexCLIPResponsePacket::resetNoSides> (d, NoSides, packet);
    eti::getString<eurexCLIPResponsePacket, &eurexCLIPResponsePacket::setPad3, &eurexCLIPResponsePacket::resetPad3> (d, Pad3, packet);
    eti::getInteger<int32_t, eurexCLIPResponsePacket, &eurexCLIPResponsePacket::setCrossRequestID, &eurexCLIPResponsePacket::resetCrossRequestID> (d, CrossRequestID, packet);
    eti::getString<eurexCLIPResponsePacket, &eurexCLIPResponsePacket::setPad4, &eurexCLIPResponsePacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vCrossRequestAckSideGrp;
    bool bCrossRequestAckSideGrp = d.getArray (CrossRequestAckSideGrp, &vCrossRequestAckSideGrp);
    for (size_t i = 0; bCrossRequestAckSideGrp && i < vCrossRequestAckSideGrp->size (); i++)
    {
        eurexCrossRequestAckSideGrpCompPacket group;
        putCrossRequestAckSideGrpComp ((*vCrossRequestAckSideGrp)[i], group);
        packet.mCrossRequestAckSideGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize CLIPResponse");
}

void
eurexCodec::putCrossRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexCrossRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexCrossRequestPacket, &eurexCrossRequestPacket::setSecurityID, &eurexCrossRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexCrossRequestPacket, &eurexCrossRequestPacket::setOrderQty, &eurexCrossRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<int32_t, eurexCrossRequestPacket, &eurexCrossRequestPacket::setMarketSegmentID, &eurexCrossRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getString<eurexCrossRequestPacket, &eurexCrossRequestPacket::setComplianceText, &eurexCrossRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize CrossRequest");
}

void
eurexCodec::putCrossRequestResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexCrossRequestResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexCrossRequestResponsePacket, &eurexCrossRequestResponsePacket::setExecID, &eurexCrossRequestResponsePacket::resetExecID> (d, ExecID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize CrossRequestResponse");
}

void
eurexCodec::putDeleteAllOrderBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setMassActionReportID, &eurexDeleteAllOrderBroadcastPacket::resetMassActionReportID> (d, MassActionReportID, packet);
    eti::getInteger<int64_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setSecurityID, &eurexDeleteAllOrderBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setPrice, &eurexDeleteAllOrderBroadcastPacket::resetPrice> (d, Price, packet);
    eti::getInteger<int32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setMarketSegmentID, &eurexDeleteAllOrderBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setTargetPartyIDSessionID, &eurexDeleteAllOrderBroadcastPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<int32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setTargetPartyIDExecutingTrader, &eurexDeleteAllOrderBroadcastPacket::resetTargetPartyIDExecutingTrader> (d, TargetPartyIDExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setPartyIDEnteringTrader, &eurexDeleteAllOrderBroadcastPacket::resetPartyIDEnteringTrader> (d, PartyIDEnteringTrader, packet);
    eti::getInteger<int16_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setNoNotAffectedOrders, &eurexDeleteAllOrderBroadcastPacket::resetNoNotAffectedOrders> (d, NoNotAffectedOrders, packet);
    eti::getInteger<int16_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setNoAffectedOrderRequests, &eurexDeleteAllOrderBroadcastPacket::resetNoAffectedOrderRequests> (d, NoAffectedOrderRequests, packet);
    eti::getInteger<int8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setPartyIDEnteringFirm, &eurexDeleteAllOrderBroadcastPacket::resetPartyIDEnteringFirm> (d, PartyIDEnteringFirm, packet);
    eti::getInteger<uint8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setMassActionReason, &eurexDeleteAllOrderBroadcastPacket::resetMassActionReason> (d, MassActionReason, packet);
    eti::getInteger<int8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setExecInst, &eurexDeleteAllOrderBroadcastPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexDeleteAllOrderBroadcastPacket, &eurexDeleteAllOrderBroadcastPacket::setSide, &eurexDeleteAllOrderBroadcastPacket::resetSide> (d, Side, packet);
    const cdrArray* vNotAffectedOrdersGrp;
    bool bNotAffectedOrdersGrp = d.getArray (NotAffectedOrdersGrp, &vNotAffectedOrdersGrp);
    for (size_t i = 0; bNotAffectedOrdersGrp && i < vNotAffectedOrdersGrp->size (); i++)
    {
        eurexNotAffectedOrdersGrpCompPacket group;
        putNotAffectedOrdersGrpComp ((*vNotAffectedOrdersGrp)[i], group);
        packet.mNotAffectedOrdersGrp.push_back (group);
    }
    const cdrArray* vAffectedOrderRequestsGrp;
    bool bAffectedOrderRequestsGrp = d.getArray (AffectedOrderRequestsGrp, &vAffectedOrderRequestsGrp);
    for (size_t i = 0; bAffectedOrderRequestsGrp && i < vAffectedOrderRequestsGrp->size (); i++)
    {
        eurexAffectedOrderRequestsGrpCompPacket group;
        putAffectedOrderRequestsGrpComp ((*vAffectedOrderRequestsGrp)[i], group);
        packet.mAffectedOrderRequestsGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllOrderBroadcast");
}

void
eurexCodec::putDeleteAllOrderNRResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderNRResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexDeleteAllOrderNRResponsePacket, &eurexDeleteAllOrderNRResponsePacket::setMassActionReportID, &eurexDeleteAllOrderNRResponsePacket::resetMassActionReportID> (d, MassActionReportID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllOrderNRResponse");
}

void
eurexCodec::putDeleteAllOrderQuoteEventBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderQuoteEventBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::setMassActionReportID, &eurexDeleteAllOrderQuoteEventBroadcastPacket::resetMassActionReportID> (d, MassActionReportID, packet);
    eti::getInteger<int64_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::setSecurityID, &eurexDeleteAllOrderQuoteEventBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<int32_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::setMarketSegmentID, &eurexDeleteAllOrderQuoteEventBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint8_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::setMassActionReason, &eurexDeleteAllOrderQuoteEventBroadcastPacket::resetMassActionReason> (d, MassActionReason, packet);
    eti::getInteger<int8_t, eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::setExecInst, &eurexDeleteAllOrderQuoteEventBroadcastPacket::resetExecInst> (d, ExecInst, packet);
    eti::getString<eurexDeleteAllOrderQuoteEventBroadcastPacket, &eurexDeleteAllOrderQuoteEventBroadcastPacket::setPad2, &eurexDeleteAllOrderQuoteEventBroadcastPacket::resetPad2> (d, Pad2, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllOrderQuoteEventBroadcast");
}

void
eurexCodec::putDeleteAllOrderRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setSecurityID, &eurexDeleteAllOrderRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setPrice, &eurexDeleteAllOrderRequestPacket::resetPrice> (d, Price, packet);
    eti::getInteger<uint64_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexDeleteAllOrderRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setExecutingTrader, &eurexDeleteAllOrderRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setMarketSegmentID, &eurexDeleteAllOrderRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setTargetPartyIDSessionID, &eurexDeleteAllOrderRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<int32_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setTargetPartyIDExecutingTrader, &eurexDeleteAllOrderRequestPacket::resetTargetPartyIDExecutingTrader> (d, TargetPartyIDExecutingTrader, packet);
    eti::getInteger<int8_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setSide, &eurexDeleteAllOrderRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteAllOrderRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setExecutingTraderQualifier, &eurexDeleteAllOrderRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexDeleteAllOrderRequestPacket, &eurexDeleteAllOrderRequestPacket::setPad1, &eurexDeleteAllOrderRequestPacket::resetPad1> (d, Pad1, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllOrderRequest");
}

void
eurexCodec::putDeleteAllOrderResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllOrderResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderMEComp (d, packet.mResponseHeaderME);
    eti::getInteger<uint64_t, eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::setMassActionReportID, &eurexDeleteAllOrderResponsePacket::resetMassActionReportID> (d, MassActionReportID, packet);
    eti::getInteger<int16_t, eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::setNoNotAffectedOrders, &eurexDeleteAllOrderResponsePacket::resetNoNotAffectedOrders> (d, NoNotAffectedOrders, packet);
    eti::getInteger<int16_t, eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::setNoAffectedOrderRequests, &eurexDeleteAllOrderResponsePacket::resetNoAffectedOrderRequests> (d, NoAffectedOrderRequests, packet);
    eti::getString<eurexDeleteAllOrderResponsePacket, &eurexDeleteAllOrderResponsePacket::setPad4, &eurexDeleteAllOrderResponsePacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vNotAffectedOrdersGrp;
    bool bNotAffectedOrdersGrp = d.getArray (NotAffectedOrdersGrp, &vNotAffectedOrdersGrp);
    for (size_t i = 0; bNotAffectedOrdersGrp && i < vNotAffectedOrdersGrp->size (); i++)
    {
        eurexNotAffectedOrdersGrpCompPacket group;
        putNotAffectedOrdersGrpComp ((*vNotAffectedOrdersGrp)[i], group);
        packet.mNotAffectedOrdersGrp.push_back (group);
    }
    const cdrArray* vAffectedOrderRequestsGrp;
    bool bAffectedOrderRequestsGrp = d.getArray (AffectedOrderRequestsGrp, &vAffectedOrderRequestsGrp);
    for (size_t i = 0; bAffectedOrderRequestsGrp && i < vAffectedOrderRequestsGrp->size (); i++)
    {
        eurexAffectedOrderRequestsGrpCompPacket group;
        putAffectedOrderRequestsGrpComp ((*vAffectedOrderRequestsGrp)[i], group);
        packet.mAffectedOrderRequestsGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllOrderResponse");
}

void
eurexCodec::putDeleteAllQuoteBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllQuoteBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setMassActionReportID, &eurexDeleteAllQuoteBroadcastPacket::resetMassActionReportID> (d, MassActionReportID, packet);
    eti::getInteger<int64_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setSecurityID, &eurexDeleteAllQuoteBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<int32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setMarketSegmentID, &eurexDeleteAllQuoteBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setTargetPartyIDSessionID, &eurexDeleteAllQuoteBroadcastPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<uint32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setPartyIDEnteringTrader, &eurexDeleteAllQuoteBroadcastPacket::resetPartyIDEnteringTrader> (d, PartyIDEnteringTrader, packet);
    eti::getInteger<int32_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setTargetPartyIDExecutingTrader, &eurexDeleteAllQuoteBroadcastPacket::resetTargetPartyIDExecutingTrader> (d, TargetPartyIDExecutingTrader, packet);
    eti::getInteger<int16_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setNoNotAffectedSecurities, &eurexDeleteAllQuoteBroadcastPacket::resetNoNotAffectedSecurities> (d, NoNotAffectedSecurities, packet);
    eti::getInteger<uint8_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setMassActionReason, &eurexDeleteAllQuoteBroadcastPacket::resetMassActionReason> (d, MassActionReason, packet);
    eti::getInteger<int8_t, eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setPartyIDEnteringFirm, &eurexDeleteAllQuoteBroadcastPacket::resetPartyIDEnteringFirm> (d, PartyIDEnteringFirm, packet);
    eti::getString<eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setTargetPartyIDDeskID, &eurexDeleteAllQuoteBroadcastPacket::resetTargetPartyIDDeskID> (d, TargetPartyIDDeskID, packet);
    eti::getString<eurexDeleteAllQuoteBroadcastPacket, &eurexDeleteAllQuoteBroadcastPacket::setPad1, &eurexDeleteAllQuoteBroadcastPacket::resetPad1> (d, Pad1, packet);
    const cdrArray* vNotAffectedSecuritiesGrp;
    bool bNotAffectedSecuritiesGrp = d.getArray (NotAffectedSecuritiesGrp, &vNotAffectedSecuritiesGrp);
    for (size_t i = 0; bNotAffectedSecuritiesGrp && i < vNotAffectedSecuritiesGrp->size (); i++)
    {
        eurexNotAffectedSecuritiesGrpCompPacket group;
        putNotAffectedSecuritiesGrpComp ((*vNotAffectedSecuritiesGrp)[i], group);
        packet.mNotAffectedSecuritiesGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllQuoteBroadcast");
}

void
eurexCodec::putDeleteAllQuoteRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllQuoteRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexDeleteAllQuoteRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::setExecutingTrader, &eurexDeleteAllQuoteRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::setMarketSegmentID, &eurexDeleteAllQuoteRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::setTargetPartyIDSessionID, &eurexDeleteAllQuoteRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<int8_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteAllQuoteRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::setExecutingTraderQualifier, &eurexDeleteAllQuoteRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexDeleteAllQuoteRequestPacket, &eurexDeleteAllQuoteRequestPacket::setPad6, &eurexDeleteAllQuoteRequestPacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllQuoteRequest");
}

void
eurexCodec::putDeleteAllQuoteResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteAllQuoteResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexDeleteAllQuoteResponsePacket, &eurexDeleteAllQuoteResponsePacket::setMassActionReportID, &eurexDeleteAllQuoteResponsePacket::resetMassActionReportID> (d, MassActionReportID, packet);
    eti::getInteger<int16_t, eurexDeleteAllQuoteResponsePacket, &eurexDeleteAllQuoteResponsePacket::setNoNotAffectedSecurities, &eurexDeleteAllQuoteResponsePacket::resetNoNotAffectedSecurities> (d, NoNotAffectedSecurities, packet);
    eti::getString<eurexDeleteAllQuoteResponsePacket, &eurexDeleteAllQuoteResponsePacket::setPad6, &eurexDeleteAllQuoteResponsePacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vNotAffectedSecuritiesGrp;
    bool bNotAffectedSecuritiesGrp = d.getArray (NotAffectedSecuritiesGrp, &vNotAffectedSecuritiesGrp);
    for (size_t i = 0; bNotAffectedSecuritiesGrp && i < vNotAffectedSecuritiesGrp->size (); i++)
    {
        eurexNotAffectedSecuritiesGrpCompPacket group;
        putNotAffectedSecuritiesGrpComp ((*vNotAffectedSecuritiesGrp)[i], group);
        packet.mNotAffectedSecuritiesGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteAllQuoteResponse");
}

void
eurexCodec::putDeleteBasketTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteBasketTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::setBasketTrdMatchID, &eurexDeleteBasketTradeRequestPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint32_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::setBasketExecID, &eurexDeleteBasketTradeRequestPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int32_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::setMarketSegmentID, &eurexDeleteBasketTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::setTrdType, &eurexDeleteBasketTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::setTradeReportType, &eurexDeleteBasketTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getString<eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::setTradeReportID, &eurexDeleteBasketTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexDeleteBasketTradeRequestPacket, &eurexDeleteBasketTradeRequestPacket::setPad1, &eurexDeleteBasketTradeRequestPacket::resetPad1> (d, Pad1, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteBasketTradeRequest");
}

void
eurexCodec::putDeleteCLIPRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteCLIPRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setOrderID, &eurexDeleteCLIPRequestPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<int64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setSecurityID, &eurexDeleteCLIPRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexDeleteCLIPRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setExecutingTrader, &eurexDeleteCLIPRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setMarketSegmentID, &eurexDeleteCLIPRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setExecutingTraderQualifier, &eurexDeleteCLIPRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getInteger<int8_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteCLIPRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getString<eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setPad2, &eurexDeleteCLIPRequestPacket::resetPad2> (d, Pad2, packet);
    eti::getInteger<int32_t, eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setCrossRequestID, &eurexDeleteCLIPRequestPacket::resetCrossRequestID> (d, CrossRequestID, packet);
    eti::getString<eurexDeleteCLIPRequestPacket, &eurexDeleteCLIPRequestPacket::setPad4, &eurexDeleteCLIPRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteCLIPRequest");
}

void
eurexCodec::putDeleteOrderBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setOrderID, &eurexDeleteOrderBroadcastPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setClOrdID, &eurexDeleteOrderBroadcastPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setOrigClOrdID, &eurexDeleteOrderBroadcastPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setSecurityID, &eurexDeleteOrderBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setExecID, &eurexDeleteOrderBroadcastPacket::resetExecID> (d, ExecID, packet);
    eti::getDouble<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setCumQty, &eurexDeleteOrderBroadcastPacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setCxlQty, &eurexDeleteOrderBroadcastPacket::resetCxlQty> (d, CxlQty, packet);
    eti::getInteger<int32_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setMarketSegmentID, &eurexDeleteOrderBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setPartyIDEnteringTrader, &eurexDeleteOrderBroadcastPacket::resetPartyIDEnteringTrader> (d, PartyIDEnteringTrader, packet);
    eti::getInteger<uint32_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setPartyIDSessionID, &eurexDeleteOrderBroadcastPacket::resetPartyIDSessionID> (d, PartyIDSessionID, packet);
    eti::getInteger<int16_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setExecRestatementReason, &eurexDeleteOrderBroadcastPacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setPartyIDEnteringFirm, &eurexDeleteOrderBroadcastPacket::resetPartyIDEnteringFirm> (d, PartyIDEnteringFirm, packet);
    eti::getString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setOrdStatus, &eurexDeleteOrderBroadcastPacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setExecType, &eurexDeleteOrderBroadcastPacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int8_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setProductComplex, &eurexDeleteOrderBroadcastPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setSide, &eurexDeleteOrderBroadcastPacket::resetSide> (d, Side, packet);
    eti::getString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setFIXClOrdID, &eurexDeleteOrderBroadcastPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getString<eurexDeleteOrderBroadcastPacket, &eurexDeleteOrderBroadcastPacket::setPad1, &eurexDeleteOrderBroadcastPacket::resetPad1> (d, Pad1, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteOrderBroadcast");
}

void
eurexCodec::putDeleteOrderComplexRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderComplexRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setOrderID, &eurexDeleteOrderComplexRequestPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setClOrdID, &eurexDeleteOrderComplexRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setOrigClOrdID, &eurexDeleteOrderComplexRequestPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setSecurityID, &eurexDeleteOrderComplexRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexDeleteOrderComplexRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setExecutingTrader, &eurexDeleteOrderComplexRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setMarketSegmentID, &eurexDeleteOrderComplexRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setTargetPartyIDSessionID, &eurexDeleteOrderComplexRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<int8_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteOrderComplexRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setExecutingTraderQualifier, &eurexDeleteOrderComplexRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setFIXClOrdID, &eurexDeleteOrderComplexRequestPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getString<eurexDeleteOrderComplexRequestPacket, &eurexDeleteOrderComplexRequestPacket::setPad2, &eurexDeleteOrderComplexRequestPacket::resetPad2> (d, Pad2, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteOrderComplexRequest");
}

void
eurexCodec::putDeleteOrderNRResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderNRResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setOrderID, &eurexDeleteOrderNRResponsePacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setClOrdID, &eurexDeleteOrderNRResponsePacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setOrigClOrdID, &eurexDeleteOrderNRResponsePacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setSecurityID, &eurexDeleteOrderNRResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setExecID, &eurexDeleteOrderNRResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getDouble<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setCumQty, &eurexDeleteOrderNRResponsePacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setCxlQty, &eurexDeleteOrderNRResponsePacket::resetCxlQty> (d, CxlQty, packet);
    eti::getString<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setOrdStatus, &eurexDeleteOrderNRResponsePacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setExecType, &eurexDeleteOrderNRResponsePacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int16_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setExecRestatementReason, &eurexDeleteOrderNRResponsePacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setProductComplex, &eurexDeleteOrderNRResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setTransactionDelayIndicator, &eurexDeleteOrderNRResponsePacket::resetTransactionDelayIndicator> (d, TransactionDelayIndicator, packet);
    eti::getString<eurexDeleteOrderNRResponsePacket, &eurexDeleteOrderNRResponsePacket::setPad2, &eurexDeleteOrderNRResponsePacket::resetPad2> (d, Pad2, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteOrderNRResponse");
}

void
eurexCodec::putDeleteOrderResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderMEComp (d, packet.mResponseHeaderME);
    eti::getInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setOrderID, &eurexDeleteOrderResponsePacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setClOrdID, &eurexDeleteOrderResponsePacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setOrigClOrdID, &eurexDeleteOrderResponsePacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setSecurityID, &eurexDeleteOrderResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setExecID, &eurexDeleteOrderResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getDouble<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setCumQty, &eurexDeleteOrderResponsePacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setCxlQty, &eurexDeleteOrderResponsePacket::resetCxlQty> (d, CxlQty, packet);
    eti::getString<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setOrdStatus, &eurexDeleteOrderResponsePacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setExecType, &eurexDeleteOrderResponsePacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int16_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setExecRestatementReason, &eurexDeleteOrderResponsePacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setProductComplex, &eurexDeleteOrderResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setTransactionDelayIndicator, &eurexDeleteOrderResponsePacket::resetTransactionDelayIndicator> (d, TransactionDelayIndicator, packet);
    eti::getString<eurexDeleteOrderResponsePacket, &eurexDeleteOrderResponsePacket::setPad2, &eurexDeleteOrderResponsePacket::resetPad2> (d, Pad2, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteOrderResponse");
}

void
eurexCodec::putDeleteOrderSingleRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteOrderSingleRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setOrderID, &eurexDeleteOrderSingleRequestPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setClOrdID, &eurexDeleteOrderSingleRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setOrigClOrdID, &eurexDeleteOrderSingleRequestPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexDeleteOrderSingleRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setExecutingTrader, &eurexDeleteOrderSingleRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setMarketSegmentID, &eurexDeleteOrderSingleRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setSimpleSecurityID, &eurexDeleteOrderSingleRequestPacket::resetSimpleSecurityID> (d, SimpleSecurityID, packet);
    eti::getInteger<uint32_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setTargetPartyIDSessionID, &eurexDeleteOrderSingleRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<int8_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexDeleteOrderSingleRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setExecutingTraderQualifier, &eurexDeleteOrderSingleRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setFIXClOrdID, &eurexDeleteOrderSingleRequestPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getString<eurexDeleteOrderSingleRequestPacket, &eurexDeleteOrderSingleRequestPacket::setPad6, &eurexDeleteOrderSingleRequestPacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteOrderSingleRequest");
}

void
eurexCodec::putDeleteTESTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexDeleteTESTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setPackageID, &eurexDeleteTESTradeRequestPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<int32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setMarketSegmentID, &eurexDeleteTESTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setTESExecID, &eurexDeleteTESTradeRequestPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<int32_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setRelatedMarketSegmentID, &eurexDeleteTESTradeRequestPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<int16_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setTrdType, &eurexDeleteTESTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setTradeReportType, &eurexDeleteTESTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getString<eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setTradeReportID, &eurexDeleteTESTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexDeleteTESTradeRequestPacket, &eurexDeleteTESTradeRequestPacket::setPad1, &eurexDeleteTESTradeRequestPacket::resetPad1> (d, Pad1, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize DeleteTESTradeRequest");
}

void
eurexCodec::putEnterBasketTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexEnterBasketTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setMarketSegmentID, &eurexEnterBasketTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setMaturityMonthYear, &eurexEnterBasketTradeRequestPacket::resetMaturityMonthYear> (d, MaturityMonthYear, packet);
    eti::getInteger<int16_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setTrdType, &eurexEnterBasketTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setTradeReportType, &eurexEnterBasketTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setBasketTradeReportType, &eurexEnterBasketTradeRequestPacket::resetBasketTradeReportType> (d, BasketTradeReportType, packet);
    eti::getInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setNoBasketRootPartyGrps, &eurexEnterBasketTradeRequestPacket::resetNoBasketRootPartyGrps> (d, NoBasketRootPartyGrps, packet);
    eti::getInteger<int8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setNoInstrmtMatchSides, &eurexEnterBasketTradeRequestPacket::resetNoInstrmtMatchSides> (d, NoInstrmtMatchSides, packet);
    eti::getInteger<uint8_t, eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setNoBasketSideAlloc, &eurexEnterBasketTradeRequestPacket::resetNoBasketSideAlloc> (d, NoBasketSideAlloc, packet);
    eti::getString<eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setBasketTradeReportText, &eurexEnterBasketTradeRequestPacket::resetBasketTradeReportText> (d, BasketTradeReportText, packet);
    eti::getString<eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setTradeReportID, &eurexEnterBasketTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexEnterBasketTradeRequestPacket, &eurexEnterBasketTradeRequestPacket::setPad1, &eurexEnterBasketTradeRequestPacket::resetPad1> (d, Pad1, packet);
    const cdrArray* vBasketRootPartyGrp;
    bool bBasketRootPartyGrp = d.getArray (BasketRootPartyGrp, &vBasketRootPartyGrp);
    for (size_t i = 0; bBasketRootPartyGrp && i < vBasketRootPartyGrp->size (); i++)
    {
        eurexBasketRootPartyGrpCompPacket group;
        putBasketRootPartyGrpComp ((*vBasketRootPartyGrp)[i], group);
        packet.mBasketRootPartyGrp.push_back (group);
    }
    const cdrArray* vInstrmtMatchSideGrp;
    bool bInstrmtMatchSideGrp = d.getArray (InstrmtMatchSideGrp, &vInstrmtMatchSideGrp);
    for (size_t i = 0; bInstrmtMatchSideGrp && i < vInstrmtMatchSideGrp->size (); i++)
    {
        eurexInstrmtMatchSideGrpCompPacket group;
        putInstrmtMatchSideGrpComp ((*vInstrmtMatchSideGrp)[i], group);
        packet.mInstrmtMatchSideGrp.push_back (group);
    }
    const cdrArray* vBasketSideAllocGrp;
    bool bBasketSideAllocGrp = d.getArray (BasketSideAllocGrp, &vBasketSideAllocGrp);
    for (size_t i = 0; bBasketSideAllocGrp && i < vBasketSideAllocGrp->size (); i++)
    {
        eurexBasketSideAllocGrpCompPacket group;
        putBasketSideAllocGrpComp ((*vBasketSideAllocGrp)[i], group);
        packet.mBasketSideAllocGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize EnterBasketTradeRequest");
}

void
eurexCodec::putEnterCLIPRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexEnterCLIPRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setSecurityID, &eurexEnterCLIPRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setPrice, &eurexEnterCLIPRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setOrderQty, &eurexEnterCLIPRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<int32_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setMarketSegmentID, &eurexEnterCLIPRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setCrossID, &eurexEnterCLIPRequestPacket::resetCrossID> (d, CrossID, packet);
    eti::getInteger<int32_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setCrossRequestID, &eurexEnterCLIPRequestPacket::resetCrossRequestID> (d, CrossRequestID, packet);
    eti::getInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setNoSides, &eurexEnterCLIPRequestPacket::resetNoSides> (d, NoSides, packet);
    eti::getInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setNoCrossLegs, &eurexEnterCLIPRequestPacket::resetNoCrossLegs> (d, NoCrossLegs, packet);
    eti::getInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setSideDisclosureInstruction, &eurexEnterCLIPRequestPacket::resetSideDisclosureInstruction> (d, SideDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setPriceDisclosureInstruction, &eurexEnterCLIPRequestPacket::resetPriceDisclosureInstruction> (d, PriceDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setOrderQtyDisclosureInstruction, &eurexEnterCLIPRequestPacket::resetOrderQtyDisclosureInstruction> (d, OrderQtyDisclosureInstruction, packet);
    eti::getString<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setRootPartyContraFirm, &eurexEnterCLIPRequestPacket::resetRootPartyContraFirm> (d, RootPartyContraFirm, packet);
    eti::getString<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setRootPartyContraTrader, &eurexEnterCLIPRequestPacket::resetRootPartyContraTrader> (d, RootPartyContraTrader, packet);
    eti::getString<eurexEnterCLIPRequestPacket, &eurexEnterCLIPRequestPacket::setPad4, &eurexEnterCLIPRequestPacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vCrossRequestSideGrp;
    bool bCrossRequestSideGrp = d.getArray (CrossRequestSideGrp, &vCrossRequestSideGrp);
    for (size_t i = 0; bCrossRequestSideGrp && i < vCrossRequestSideGrp->size (); i++)
    {
        eurexCrossRequestSideGrpCompPacket group;
        putCrossRequestSideGrpComp ((*vCrossRequestSideGrp)[i], group);
        packet.mCrossRequestSideGrp.push_back (group);
    }
    const cdrArray* vSideCrossLegGrp;
    bool bSideCrossLegGrp = d.getArray (SideCrossLegGrp, &vSideCrossLegGrp);
    for (size_t i = 0; bSideCrossLegGrp && i < vSideCrossLegGrp->size (); i++)
    {
        eurexSideCrossLegGrpCompPacket group;
        putSideCrossLegGrpComp ((*vSideCrossLegGrp)[i], group);
        packet.mSideCrossLegGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize EnterCLIPRequest");
}

void
eurexCodec::putEnterTESTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexEnterTESTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setSecurityID, &eurexEnterTESTradeRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setLastPx, &eurexEnterTESTradeRequestPacket::resetLastPx> (d, LastPx, packet);
    eti::getInteger<uint64_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setTransBkdTime, &eurexEnterTESTradeRequestPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingPx, &eurexEnterTESTradeRequestPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setRelatedClosePrice, &eurexEnterTESTradeRequestPacket::resetRelatedClosePrice> (d, RelatedClosePrice, packet);
    eti::getDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setRelatedTradeQuantity, &eurexEnterTESTradeRequestPacket::resetRelatedTradeQuantity> (d, RelatedTradeQuantity, packet);
    eti::getDouble<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingQty, &eurexEnterTESTradeRequestPacket::resetUnderlyingQty> (d, UnderlyingQty, packet);
    eti::getInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setMarketSegmentID, &eurexEnterTESTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingSettlementDate, &eurexEnterTESTradeRequestPacket::resetUnderlyingSettlementDate> (d, UnderlyingSettlementDate, packet);
    eti::getInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingMaturityDate, &eurexEnterTESTradeRequestPacket::resetUnderlyingMaturityDate> (d, UnderlyingMaturityDate, packet);
    eti::getInteger<uint32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setRelatedTradeID, &eurexEnterTESTradeRequestPacket::resetRelatedTradeID> (d, RelatedTradeID, packet);
    eti::getInteger<int32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setRelatedMarketSegmentID, &eurexEnterTESTradeRequestPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setNegotiationID, &eurexEnterTESTradeRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setNoSRQSRelatedTradeIDs, &eurexEnterTESTradeRequestPacket::resetNoSRQSRelatedTradeIDs> (d, NoSRQSRelatedTradeIDs, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setPad1, &eurexEnterTESTradeRequestPacket::resetPad1> (d, Pad1, packet);
    eti::getInteger<int16_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setTrdType, &eurexEnterTESTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setProductComplex, &eurexEnterTESTradeRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setTradeReportType, &eurexEnterTESTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setTradePublishIndicator, &eurexEnterTESTradeRequestPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setNoSideAllocs, &eurexEnterTESTradeRequestPacket::resetNoSideAllocs> (d, NoSideAllocs, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setNoEvents, &eurexEnterTESTradeRequestPacket::resetNoEvents> (d, NoEvents, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setNoLegs, &eurexEnterTESTradeRequestPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setNoInstrAttrib, &eurexEnterTESTradeRequestPacket::resetNoInstrAttrib> (d, NoInstrAttrib, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setNoUnderlyingStips, &eurexEnterTESTradeRequestPacket::resetNoUnderlyingStips> (d, NoUnderlyingStips, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setPartyIDSettlementLocation, &eurexEnterTESTradeRequestPacket::resetPartyIDSettlementLocation> (d, PartyIDSettlementLocation, packet);
    eti::getInteger<int8_t, eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setHedgeType, &eurexEnterTESTradeRequestPacket::resetHedgeType> (d, HedgeType, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setTradeReportText, &eurexEnterTESTradeRequestPacket::resetTradeReportText> (d, TradeReportText, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setTradeReportID, &eurexEnterTESTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingSecurityID, &eurexEnterTESTradeRequestPacket::resetUnderlyingSecurityID> (d, UnderlyingSecurityID, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingSecurityDesc, &eurexEnterTESTradeRequestPacket::resetUnderlyingSecurityDesc> (d, UnderlyingSecurityDesc, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingCurrency, &eurexEnterTESTradeRequestPacket::resetUnderlyingCurrency> (d, UnderlyingCurrency, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setUnderlyingIssuer, &eurexEnterTESTradeRequestPacket::resetUnderlyingIssuer> (d, UnderlyingIssuer, packet);
    eti::getString<eurexEnterTESTradeRequestPacket, &eurexEnterTESTradeRequestPacket::setPad7, &eurexEnterTESTradeRequestPacket::resetPad7> (d, Pad7, packet);
    const cdrArray* vSideAllocGrp;
    bool bSideAllocGrp = d.getArray (SideAllocGrp, &vSideAllocGrp);
    for (size_t i = 0; bSideAllocGrp && i < vSideAllocGrp->size (); i++)
    {
        eurexSideAllocGrpCompPacket group;
        putSideAllocGrpComp ((*vSideAllocGrp)[i], group);
        packet.mSideAllocGrp.push_back (group);
    }
    const cdrArray* vTrdInstrmntLegGrp;
    bool bTrdInstrmntLegGrp = d.getArray (TrdInstrmntLegGrp, &vTrdInstrmntLegGrp);
    for (size_t i = 0; bTrdInstrmntLegGrp && i < vTrdInstrmntLegGrp->size (); i++)
    {
        eurexTrdInstrmntLegGrpCompPacket group;
        putTrdInstrmntLegGrpComp ((*vTrdInstrmntLegGrp)[i], group);
        packet.mTrdInstrmntLegGrp.push_back (group);
    }
    const cdrArray* vInstrumentEventGrp;
    bool bInstrumentEventGrp = d.getArray (InstrumentEventGrp, &vInstrumentEventGrp);
    for (size_t i = 0; bInstrumentEventGrp && i < vInstrumentEventGrp->size (); i++)
    {
        eurexInstrumentEventGrpCompPacket group;
        putInstrumentEventGrpComp ((*vInstrumentEventGrp)[i], group);
        packet.mInstrumentEventGrp.push_back (group);
    }
    const cdrArray* vInstrumentAttributeGrp;
    bool bInstrumentAttributeGrp = d.getArray (InstrumentAttributeGrp, &vInstrumentAttributeGrp);
    for (size_t i = 0; bInstrumentAttributeGrp && i < vInstrumentAttributeGrp->size (); i++)
    {
        eurexInstrumentAttributeGrpCompPacket group;
        putInstrumentAttributeGrpComp ((*vInstrumentAttributeGrp)[i], group);
        packet.mInstrumentAttributeGrp.push_back (group);
    }
    putUnderlyingStipGrpComp (d, packet.mUnderlyingStipGrp);
    const cdrArray* vSRQSRelatedTradeIDGrp;
    bool bSRQSRelatedTradeIDGrp = d.getArray (SRQSRelatedTradeIDGrp, &vSRQSRelatedTradeIDGrp);
    for (size_t i = 0; bSRQSRelatedTradeIDGrp && i < vSRQSRelatedTradeIDGrp->size (); i++)
    {
        eurexSRQSRelatedTradeIDGrpCompPacket group;
        putSRQSRelatedTradeIDGrpComp ((*vSRQSRelatedTradeIDGrp)[i], group);
        packet.mSRQSRelatedTradeIDGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize EnterTESTradeRequest");
}

void
eurexCodec::putForcedLogoutNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexForcedLogoutNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNotifHeaderComp (d, packet.mNotifHeader);
    eti::getInteger<int16_t, eurexForcedLogoutNotificationPacket, &eurexForcedLogoutNotificationPacket::setVarTextLen, &eurexForcedLogoutNotificationPacket::resetVarTextLen> (d, VarTextLen, packet);
    eti::getString<eurexForcedLogoutNotificationPacket, &eurexForcedLogoutNotificationPacket::setPad6, &eurexForcedLogoutNotificationPacket::resetPad6> (d, Pad6, packet);
    eti::getString<eurexForcedLogoutNotificationPacket, &eurexForcedLogoutNotificationPacket::setVarText, &eurexForcedLogoutNotificationPacket::resetVarText> (d, VarText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ForcedLogoutNotification");
}

void
eurexCodec::putForcedUserLogoutNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexForcedUserLogoutNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNotifHeaderComp (d, packet.mNotifHeader);
    eti::getInteger<int8_t, eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::setUserStatus, &eurexForcedUserLogoutNotificationPacket::resetUserStatus> (d, UserStatus, packet);
    eti::getString<eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::setPad3, &eurexForcedUserLogoutNotificationPacket::resetPad3> (d, Pad3, packet);
    eti::getInteger<int32_t, eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::setUsername, &eurexForcedUserLogoutNotificationPacket::resetUsername> (d, Username, packet);
    eti::getInteger<int16_t, eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::setVarTextLen, &eurexForcedUserLogoutNotificationPacket::resetVarTextLen> (d, VarTextLen, packet);
    eti::getString<eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::setPad6, &eurexForcedUserLogoutNotificationPacket::resetPad6> (d, Pad6, packet);
    eti::getString<eurexForcedUserLogoutNotificationPacket, &eurexForcedUserLogoutNotificationPacket::setVarText, &eurexForcedUserLogoutNotificationPacket::resetVarText> (d, VarText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ForcedUserLogoutNotification");
}

void
eurexCodec::putHeartbeat (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexHeartbeatPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize Heartbeat");
}

void
eurexCodec::putHeartbeatNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexHeartbeatNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNotifHeaderComp (d, packet.mNotifHeader);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize HeartbeatNotification");
}

void
eurexCodec::putInquireEnrichmentRuleIDListRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireEnrichmentRuleIDListRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getString<eurexInquireEnrichmentRuleIDListRequestPacket, &eurexInquireEnrichmentRuleIDListRequestPacket::setLastEntityProcessed, &eurexInquireEnrichmentRuleIDListRequestPacket::resetLastEntityProcessed> (d, LastEntityProcessed, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireEnrichmentRuleIDListRequest");
}

void
eurexCodec::putInquireEnrichmentRuleIDListResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireEnrichmentRuleIDListResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getString<eurexInquireEnrichmentRuleIDListResponsePacket, &eurexInquireEnrichmentRuleIDListResponsePacket::setLastEntityProcessed, &eurexInquireEnrichmentRuleIDListResponsePacket::resetLastEntityProcessed> (d, LastEntityProcessed, packet);
    eti::getInteger<int16_t, eurexInquireEnrichmentRuleIDListResponsePacket, &eurexInquireEnrichmentRuleIDListResponsePacket::setNoEnrichmentRules, &eurexInquireEnrichmentRuleIDListResponsePacket::resetNoEnrichmentRules> (d, NoEnrichmentRules, packet);
    eti::getString<eurexInquireEnrichmentRuleIDListResponsePacket, &eurexInquireEnrichmentRuleIDListResponsePacket::setPad6, &eurexInquireEnrichmentRuleIDListResponsePacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vEnrichmentRulesGrp;
    bool bEnrichmentRulesGrp = d.getArray (EnrichmentRulesGrp, &vEnrichmentRulesGrp);
    for (size_t i = 0; bEnrichmentRulesGrp && i < vEnrichmentRulesGrp->size (); i++)
    {
        eurexEnrichmentRulesGrpCompPacket group;
        putEnrichmentRulesGrpComp ((*vEnrichmentRulesGrp)[i], group);
        packet.mEnrichmentRulesGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireEnrichmentRuleIDListResponse");
}

void
eurexCodec::putInquireMMParameterRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireMMParameterRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexInquireMMParameterRequestPacket, &eurexInquireMMParameterRequestPacket::setMarketSegmentID, &eurexInquireMMParameterRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexInquireMMParameterRequestPacket, &eurexInquireMMParameterRequestPacket::setTargetPartyIDSessionID, &eurexInquireMMParameterRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireMMParameterRequest");
}

void
eurexCodec::putInquireMMParameterResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireMMParameterResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::setMMParameterReportID, &eurexInquireMMParameterResponsePacket::resetMMParameterReportID> (d, MMParameterReportID, packet);
    eti::getInteger<int32_t, eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::setMarketSegmentID, &eurexInquireMMParameterResponsePacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::setNoMMParameters, &eurexInquireMMParameterResponsePacket::resetNoMMParameters> (d, NoMMParameters, packet);
    eti::getString<eurexInquireMMParameterResponsePacket, &eurexInquireMMParameterResponsePacket::setPad3, &eurexInquireMMParameterResponsePacket::resetPad3> (d, Pad3, packet);
    const cdrArray* vMMParameterGrp;
    bool bMMParameterGrp = d.getArray (MMParameterGrp, &vMMParameterGrp);
    for (size_t i = 0; bMMParameterGrp && i < vMMParameterGrp->size (); i++)
    {
        eurexMMParameterGrpCompPacket group;
        putMMParameterGrpComp ((*vMMParameterGrp)[i], group);
        packet.mMMParameterGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireMMParameterResponse");
}

void
eurexCodec::putInquirePreTradeRiskLimitsRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquirePreTradeRiskLimitsRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::setMarketSegmentID, &eurexInquirePreTradeRiskLimitsRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::setRiskLimitPlatform, &eurexInquirePreTradeRiskLimitsRequestPacket::resetRiskLimitPlatform> (d, RiskLimitPlatform, packet);
    eti::getString<eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::setPartyExecutingUnit, &eurexInquirePreTradeRiskLimitsRequestPacket::resetPartyExecutingUnit> (d, PartyExecutingUnit, packet);
    eti::getString<eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::setRiskLimitGroup, &eurexInquirePreTradeRiskLimitsRequestPacket::resetRiskLimitGroup> (d, RiskLimitGroup, packet);
    eti::getString<eurexInquirePreTradeRiskLimitsRequestPacket, &eurexInquirePreTradeRiskLimitsRequestPacket::setPad3, &eurexInquirePreTradeRiskLimitsRequestPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquirePreTradeRiskLimitsRequest");
}

void
eurexCodec::putInquireSessionListRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireSessionListRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireSessionListRequest");
}

void
eurexCodec::putInquireSessionListResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireSessionListResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<int16_t, eurexInquireSessionListResponsePacket, &eurexInquireSessionListResponsePacket::setNoSessions, &eurexInquireSessionListResponsePacket::resetNoSessions> (d, NoSessions, packet);
    eti::getString<eurexInquireSessionListResponsePacket, &eurexInquireSessionListResponsePacket::setPad6, &eurexInquireSessionListResponsePacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vSessionsGrp;
    bool bSessionsGrp = d.getArray (SessionsGrp, &vSessionsGrp);
    for (size_t i = 0; bSessionsGrp && i < vSessionsGrp->size (); i++)
    {
        eurexSessionsGrpCompPacket group;
        putSessionsGrpComp ((*vSessionsGrp)[i], group);
        packet.mSessionsGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireSessionListResponse");
}

void
eurexCodec::putInquireUserRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireUserRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getString<eurexInquireUserRequestPacket, &eurexInquireUserRequestPacket::setLastEntityProcessed, &eurexInquireUserRequestPacket::resetLastEntityProcessed> (d, LastEntityProcessed, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireUserRequest");
}

void
eurexCodec::putInquireUserResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexInquireUserResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getString<eurexInquireUserResponsePacket, &eurexInquireUserResponsePacket::setLastEntityProcessed, &eurexInquireUserResponsePacket::resetLastEntityProcessed> (d, LastEntityProcessed, packet);
    eti::getInteger<int16_t, eurexInquireUserResponsePacket, &eurexInquireUserResponsePacket::setNoPartyDetails, &eurexInquireUserResponsePacket::resetNoPartyDetails> (d, NoPartyDetails, packet);
    eti::getString<eurexInquireUserResponsePacket, &eurexInquireUserResponsePacket::setPad6, &eurexInquireUserResponsePacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vPartyDetailsGrp;
    bool bPartyDetailsGrp = d.getArray (PartyDetailsGrp, &vPartyDetailsGrp);
    for (size_t i = 0; bPartyDetailsGrp && i < vPartyDetailsGrp->size (); i++)
    {
        eurexPartyDetailsGrpCompPacket group;
        putPartyDetailsGrpComp ((*vPartyDetailsGrp)[i], group);
        packet.mPartyDetailsGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize InquireUserResponse");
}

void
eurexCodec::putLegalNotificationBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexLegalNotificationBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::setTransactTime, &eurexLegalNotificationBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int16_t, eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::setVarTextLen, &eurexLegalNotificationBroadcastPacket::resetVarTextLen> (d, VarTextLen, packet);
    eti::getInteger<int8_t, eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::setUserStatus, &eurexLegalNotificationBroadcastPacket::resetUserStatus> (d, UserStatus, packet);
    eti::getString<eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::setPad5, &eurexLegalNotificationBroadcastPacket::resetPad5> (d, Pad5, packet);
    eti::getString<eurexLegalNotificationBroadcastPacket, &eurexLegalNotificationBroadcastPacket::setVarText, &eurexLegalNotificationBroadcastPacket::resetVarText> (d, VarText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize LegalNotificationBroadcast");
}

void
eurexCodec::putLogonRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexLogonRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint32_t, eurexLogonRequestPacket, &eurexLogonRequestPacket::setHeartBtInt, &eurexLogonRequestPacket::resetHeartBtInt> (d, HeartBtInt, packet);
    eti::getInteger<uint32_t, eurexLogonRequestPacket, &eurexLogonRequestPacket::setPartyIDSessionID, &eurexLogonRequestPacket::resetPartyIDSessionID> (d, PartyIDSessionID, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setDefaultCstmApplVerID, &eurexLogonRequestPacket::resetDefaultCstmApplVerID> (d, DefaultCstmApplVerID, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setPassword, &eurexLogonRequestPacket::resetPassword> (d, Password, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setApplUsageOrders, &eurexLogonRequestPacket::resetApplUsageOrders> (d, ApplUsageOrders, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setApplUsageQuotes, &eurexLogonRequestPacket::resetApplUsageQuotes> (d, ApplUsageQuotes, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setOrderRoutingIndicator, &eurexLogonRequestPacket::resetOrderRoutingIndicator> (d, OrderRoutingIndicator, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setFIXEngineName, &eurexLogonRequestPacket::resetFIXEngineName> (d, FIXEngineName, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setFIXEngineVersion, &eurexLogonRequestPacket::resetFIXEngineVersion> (d, FIXEngineVersion, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setFIXEngineVendor, &eurexLogonRequestPacket::resetFIXEngineVendor> (d, FIXEngineVendor, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setApplicationSystemName, &eurexLogonRequestPacket::resetApplicationSystemName> (d, ApplicationSystemName, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setApplicationSystemVersion, &eurexLogonRequestPacket::resetApplicationSystemVersion> (d, ApplicationSystemVersion, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setApplicationSystemVendor, &eurexLogonRequestPacket::resetApplicationSystemVendor> (d, ApplicationSystemVendor, packet);
    eti::getString<eurexLogonRequestPacket, &eurexLogonRequestPacket::setPad3, &eurexLogonRequestPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize LogonRequest");
}

void
eurexCodec::putLogonResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexLogonResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<int64_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::setThrottleTimeInterval, &eurexLogonResponsePacket::resetThrottleTimeInterval> (d, ThrottleTimeInterval, packet);
    eti::getInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::setThrottleNoMsgs, &eurexLogonResponsePacket::resetThrottleNoMsgs> (d, ThrottleNoMsgs, packet);
    eti::getInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::setThrottleDisconnectLimit, &eurexLogonResponsePacket::resetThrottleDisconnectLimit> (d, ThrottleDisconnectLimit, packet);
    eti::getInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::setHeartBtInt, &eurexLogonResponsePacket::resetHeartBtInt> (d, HeartBtInt, packet);
    eti::getInteger<uint32_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::setSessionInstanceID, &eurexLogonResponsePacket::resetSessionInstanceID> (d, SessionInstanceID, packet);
    eti::getInteger<int16_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::setMarketID, &eurexLogonResponsePacket::resetMarketID> (d, MarketID, packet);
    eti::getInteger<int8_t, eurexLogonResponsePacket, &eurexLogonResponsePacket::setTradSesMode, &eurexLogonResponsePacket::resetTradSesMode> (d, TradSesMode, packet);
    eti::getString<eurexLogonResponsePacket, &eurexLogonResponsePacket::setDefaultCstmApplVerID, &eurexLogonResponsePacket::resetDefaultCstmApplVerID> (d, DefaultCstmApplVerID, packet);
    eti::getString<eurexLogonResponsePacket, &eurexLogonResponsePacket::setDefaultCstmApplVerSubID, &eurexLogonResponsePacket::resetDefaultCstmApplVerSubID> (d, DefaultCstmApplVerSubID, packet);
    eti::getString<eurexLogonResponsePacket, &eurexLogonResponsePacket::setPad2, &eurexLogonResponsePacket::resetPad2> (d, Pad2, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize LogonResponse");
}

void
eurexCodec::putLogoutRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexLogoutRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize LogoutRequest");
}

void
eurexCodec::putLogoutResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexLogoutResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize LogoutResponse");
}

void
eurexCodec::putMMParameterDefinitionRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexMMParameterDefinitionRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setExposureDuration, &eurexMMParameterDefinitionRequestPacket::resetExposureDuration> (d, ExposureDuration, packet);
    eti::getDouble<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setCumQty, &eurexMMParameterDefinitionRequestPacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setDelta, &eurexMMParameterDefinitionRequestPacket::resetDelta> (d, Delta, packet);
    eti::getDouble<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setVega, &eurexMMParameterDefinitionRequestPacket::resetVega> (d, Vega, packet);
    eti::getInteger<int32_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setMarketSegmentID, &eurexMMParameterDefinitionRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setTargetPartyIDSessionID, &eurexMMParameterDefinitionRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<int32_t, eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setPctCount, &eurexMMParameterDefinitionRequestPacket::resetPctCount> (d, PctCount, packet);
    eti::getString<eurexMMParameterDefinitionRequestPacket, &eurexMMParameterDefinitionRequestPacket::setPad4, &eurexMMParameterDefinitionRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize MMParameterDefinitionRequest");
}

void
eurexCodec::putMMParameterDefinitionResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexMMParameterDefinitionResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexMMParameterDefinitionResponsePacket, &eurexMMParameterDefinitionResponsePacket::setExecID, &eurexMMParameterDefinitionResponsePacket::resetExecID> (d, ExecID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize MMParameterDefinitionResponse");
}

void
eurexCodec::putMassQuoteRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexMassQuoteRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setQuoteID, &eurexMassQuoteRequestPacket::resetQuoteID> (d, QuoteID, packet);
    eti::getInteger<uint64_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexMassQuoteRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setExecutingTrader, &eurexMassQuoteRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setMarketSegmentID, &eurexMassQuoteRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setMatchInstCrossID, &eurexMassQuoteRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<int16_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setEnrichmentRuleID, &eurexMassQuoteRequestPacket::resetEnrichmentRuleID> (d, EnrichmentRuleID, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setPriceValidityCheckType, &eurexMassQuoteRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setValueCheckTypeValue, &eurexMassQuoteRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setQuoteSizeType, &eurexMassQuoteRequestPacket::resetQuoteSizeType> (d, QuoteSizeType, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setQuoteType, &eurexMassQuoteRequestPacket::resetQuoteType> (d, QuoteType, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setOrderAttributeLiquidityProvision, &eurexMassQuoteRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setNoQuoteEntries, &eurexMassQuoteRequestPacket::resetNoQuoteEntries> (d, NoQuoteEntries, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexMassQuoteRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setExecutingTraderQualifier, &eurexMassQuoteRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexMassQuoteRequestPacket, &eurexMassQuoteRequestPacket::setPad6, &eurexMassQuoteRequestPacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vQuoteEntryGrp;
    bool bQuoteEntryGrp = d.getArray (QuoteEntryGrp, &vQuoteEntryGrp);
    for (size_t i = 0; bQuoteEntryGrp && i < vQuoteEntryGrp->size (); i++)
    {
        eurexQuoteEntryGrpCompPacket group;
        putQuoteEntryGrpComp ((*vQuoteEntryGrp)[i], group);
        packet.mQuoteEntryGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize MassQuoteRequest");
}

void
eurexCodec::putMassQuoteResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexMassQuoteResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::setQuoteID, &eurexMassQuoteResponsePacket::resetQuoteID> (d, QuoteID, packet);
    eti::getInteger<uint64_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::setQuoteResponseID, &eurexMassQuoteResponsePacket::resetQuoteResponseID> (d, QuoteResponseID, packet);
    eti::getInteger<int32_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::setMarketSegmentID, &eurexMassQuoteResponsePacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::setNoQuoteEntries, &eurexMassQuoteResponsePacket::resetNoQuoteEntries> (d, NoQuoteEntries, packet);
    eti::getString<eurexMassQuoteResponsePacket, &eurexMassQuoteResponsePacket::setPad3, &eurexMassQuoteResponsePacket::resetPad3> (d, Pad3, packet);
    const cdrArray* vQuoteEntryAckGrp;
    bool bQuoteEntryAckGrp = d.getArray (QuoteEntryAckGrp, &vQuoteEntryAckGrp);
    for (size_t i = 0; bQuoteEntryAckGrp && i < vQuoteEntryAckGrp->size (); i++)
    {
        eurexQuoteEntryAckGrpCompPacket group;
        putQuoteEntryAckGrpComp ((*vQuoteEntryAckGrp)[i], group);
        packet.mQuoteEntryAckGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize MassQuoteResponse");
}

void
eurexCodec::putModifyBasketTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyBasketTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setBasketTrdMatchID, &eurexModifyBasketTradeRequestPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint32_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setBasketExecID, &eurexModifyBasketTradeRequestPacket::resetBasketExecID> (d, BasketExecID, packet);
    eti::getInteger<int32_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setMarketSegmentID, &eurexModifyBasketTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setMaturityMonthYear, &eurexModifyBasketTradeRequestPacket::resetMaturityMonthYear> (d, MaturityMonthYear, packet);
    eti::getInteger<int16_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setTrdType, &eurexModifyBasketTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setTradeReportType, &eurexModifyBasketTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setNoBasketRootPartyGrps, &eurexModifyBasketTradeRequestPacket::resetNoBasketRootPartyGrps> (d, NoBasketRootPartyGrps, packet);
    eti::getInteger<int8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setNoInstrmtMatchSides, &eurexModifyBasketTradeRequestPacket::resetNoInstrmtMatchSides> (d, NoInstrmtMatchSides, packet);
    eti::getInteger<uint8_t, eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setNoBasketSideAlloc, &eurexModifyBasketTradeRequestPacket::resetNoBasketSideAlloc> (d, NoBasketSideAlloc, packet);
    eti::getString<eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setBasketTradeReportText, &eurexModifyBasketTradeRequestPacket::resetBasketTradeReportText> (d, BasketTradeReportText, packet);
    eti::getString<eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setTradeReportID, &eurexModifyBasketTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexModifyBasketTradeRequestPacket, &eurexModifyBasketTradeRequestPacket::setPad6, &eurexModifyBasketTradeRequestPacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vBasketRootPartyGrp;
    bool bBasketRootPartyGrp = d.getArray (BasketRootPartyGrp, &vBasketRootPartyGrp);
    for (size_t i = 0; bBasketRootPartyGrp && i < vBasketRootPartyGrp->size (); i++)
    {
        eurexBasketRootPartyGrpCompPacket group;
        putBasketRootPartyGrpComp ((*vBasketRootPartyGrp)[i], group);
        packet.mBasketRootPartyGrp.push_back (group);
    }
    const cdrArray* vInstrmtMatchSideGrp;
    bool bInstrmtMatchSideGrp = d.getArray (InstrmtMatchSideGrp, &vInstrmtMatchSideGrp);
    for (size_t i = 0; bInstrmtMatchSideGrp && i < vInstrmtMatchSideGrp->size (); i++)
    {
        eurexInstrmtMatchSideGrpCompPacket group;
        putInstrmtMatchSideGrpComp ((*vInstrmtMatchSideGrp)[i], group);
        packet.mInstrmtMatchSideGrp.push_back (group);
    }
    const cdrArray* vBasketSideAllocGrp;
    bool bBasketSideAllocGrp = d.getArray (BasketSideAllocGrp, &vBasketSideAllocGrp);
    for (size_t i = 0; bBasketSideAllocGrp && i < vBasketSideAllocGrp->size (); i++)
    {
        eurexBasketSideAllocGrpCompPacket group;
        putBasketSideAllocGrpComp ((*vBasketSideAllocGrp)[i], group);
        packet.mBasketSideAllocGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyBasketTradeRequest");
}

void
eurexCodec::putModifyOrderComplexRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyOrderComplexRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setOrderID, &eurexModifyOrderComplexRequestPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setClOrdID, &eurexModifyOrderComplexRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setOrigClOrdID, &eurexModifyOrderComplexRequestPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setSecurityID, &eurexModifyOrderComplexRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPrice, &eurexModifyOrderComplexRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setOrderQty, &eurexModifyOrderComplexRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIDClientID, &eurexModifyOrderComplexRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexModifyOrderComplexRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setExecutingTrader, &eurexModifyOrderComplexRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setMarketSegmentID, &eurexModifyOrderComplexRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setExpireDate, &eurexModifyOrderComplexRequestPacket::resetExpireDate> (d, ExpireDate, packet);
    eti::getInteger<uint32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setMatchInstCrossID, &eurexModifyOrderComplexRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<uint32_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setTargetPartyIDSessionID, &eurexModifyOrderComplexRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIDTakeUpTradingFirm, &eurexModifyOrderComplexRequestPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIDOrderOriginationFirm, &eurexModifyOrderComplexRequestPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIDBeneficiary, &eurexModifyOrderComplexRequestPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setApplSeqIndicator, &eurexModifyOrderComplexRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setProductComplex, &eurexModifyOrderComplexRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setSide, &eurexModifyOrderComplexRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setOrdType, &eurexModifyOrderComplexRequestPacket::resetOrdType> (d, OrdType, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPriceValidityCheckType, &eurexModifyOrderComplexRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setValueCheckTypeValue, &eurexModifyOrderComplexRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setOrderAttributeLiquidityProvision, &eurexModifyOrderComplexRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setExecInst, &eurexModifyOrderComplexRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setTimeInForce, &eurexModifyOrderComplexRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setTradingCapacity, &eurexModifyOrderComplexRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setOwnershipIndicator, &eurexModifyOrderComplexRequestPacket::resetOwnershipIndicator> (d, OwnershipIndicator, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderComplexRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setExecutingTraderQualifier, &eurexModifyOrderComplexRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIDLocationID, &eurexModifyOrderComplexRequestPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setCustOrderHandlingInst, &eurexModifyOrderComplexRequestPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setComplianceText, &eurexModifyOrderComplexRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPartyIDPositionAccount, &eurexModifyOrderComplexRequestPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setFreeText1, &eurexModifyOrderComplexRequestPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setFreeText2, &eurexModifyOrderComplexRequestPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setFreeText3, &eurexModifyOrderComplexRequestPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setFIXClOrdID, &eurexModifyOrderComplexRequestPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setNoLegs, &eurexModifyOrderComplexRequestPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getString<eurexModifyOrderComplexRequestPacket, &eurexModifyOrderComplexRequestPacket::setPad6, &eurexModifyOrderComplexRequestPacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vLegOrdGrp;
    bool bLegOrdGrp = d.getArray (LegOrdGrp, &vLegOrdGrp);
    for (size_t i = 0; bLegOrdGrp && i < vLegOrdGrp->size (); i++)
    {
        eurexLegOrdGrpCompPacket group;
        putLegOrdGrpComp ((*vLegOrdGrp)[i], group);
        packet.mLegOrdGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyOrderComplexRequest");
}

void
eurexCodec::putModifyOrderComplexShortRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyOrderComplexShortRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setClOrdID, &eurexModifyOrderComplexShortRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setOrigClOrdID, &eurexModifyOrderComplexShortRequestPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setSecurityID, &eurexModifyOrderComplexShortRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setPrice, &eurexModifyOrderComplexShortRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setOrderQty, &eurexModifyOrderComplexShortRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setPartyIDClientID, &eurexModifyOrderComplexShortRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexModifyOrderComplexShortRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setExecutingTrader, &eurexModifyOrderComplexShortRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setMarketSegmentID, &eurexModifyOrderComplexShortRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setMatchInstCrossID, &eurexModifyOrderComplexShortRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<int16_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setEnrichmentRuleID, &eurexModifyOrderComplexShortRequestPacket::resetEnrichmentRuleID> (d, EnrichmentRuleID, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setApplSeqIndicator, &eurexModifyOrderComplexShortRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setProductComplex, &eurexModifyOrderComplexShortRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setSide, &eurexModifyOrderComplexShortRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setPriceValidityCheckType, &eurexModifyOrderComplexShortRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setValueCheckTypeValue, &eurexModifyOrderComplexShortRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setOrderAttributeLiquidityProvision, &eurexModifyOrderComplexShortRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setExecInst, &eurexModifyOrderComplexShortRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setTimeInForce, &eurexModifyOrderComplexShortRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setTradingCapacity, &eurexModifyOrderComplexShortRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderComplexShortRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setExecutingTraderQualifier, &eurexModifyOrderComplexShortRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexModifyOrderComplexShortRequestPacket, &eurexModifyOrderComplexShortRequestPacket::setPad3, &eurexModifyOrderComplexShortRequestPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyOrderComplexShortRequest");
}

void
eurexCodec::putModifyOrderNRResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyOrderNRResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setOrderID, &eurexModifyOrderNRResponsePacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setClOrdID, &eurexModifyOrderNRResponsePacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setOrigClOrdID, &eurexModifyOrderNRResponsePacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setSecurityID, &eurexModifyOrderNRResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setExecID, &eurexModifyOrderNRResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getDouble<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setLeavesQty, &eurexModifyOrderNRResponsePacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setCumQty, &eurexModifyOrderNRResponsePacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setCxlQty, &eurexModifyOrderNRResponsePacket::resetCxlQty> (d, CxlQty, packet);
    eti::getString<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setOrdStatus, &eurexModifyOrderNRResponsePacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setExecType, &eurexModifyOrderNRResponsePacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int16_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setExecRestatementReason, &eurexModifyOrderNRResponsePacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setCrossedIndicator, &eurexModifyOrderNRResponsePacket::resetCrossedIndicator> (d, CrossedIndicator, packet);
    eti::getInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setProductComplex, &eurexModifyOrderNRResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setTriggered, &eurexModifyOrderNRResponsePacket::resetTriggered> (d, Triggered, packet);
    eti::getInteger<int8_t, eurexModifyOrderNRResponsePacket, &eurexModifyOrderNRResponsePacket::setTransactionDelayIndicator, &eurexModifyOrderNRResponsePacket::resetTransactionDelayIndicator> (d, TransactionDelayIndicator, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyOrderNRResponse");
}

void
eurexCodec::putModifyOrderResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyOrderResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderMEComp (d, packet.mResponseHeaderME);
    eti::getInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setOrderID, &eurexModifyOrderResponsePacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setClOrdID, &eurexModifyOrderResponsePacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setOrigClOrdID, &eurexModifyOrderResponsePacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setSecurityID, &eurexModifyOrderResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setExecID, &eurexModifyOrderResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getDouble<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setLeavesQty, &eurexModifyOrderResponsePacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setCumQty, &eurexModifyOrderResponsePacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setCxlQty, &eurexModifyOrderResponsePacket::resetCxlQty> (d, CxlQty, packet);
    eti::getInteger<uint64_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setTrdRegTSTimePriority, &eurexModifyOrderResponsePacket::resetTrdRegTSTimePriority> (d, TrdRegTSTimePriority, packet);
    eti::getString<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setOrdStatus, &eurexModifyOrderResponsePacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setExecType, &eurexModifyOrderResponsePacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int16_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setExecRestatementReason, &eurexModifyOrderResponsePacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setCrossedIndicator, &eurexModifyOrderResponsePacket::resetCrossedIndicator> (d, CrossedIndicator, packet);
    eti::getInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setProductComplex, &eurexModifyOrderResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setTriggered, &eurexModifyOrderResponsePacket::resetTriggered> (d, Triggered, packet);
    eti::getInteger<int8_t, eurexModifyOrderResponsePacket, &eurexModifyOrderResponsePacket::setTransactionDelayIndicator, &eurexModifyOrderResponsePacket::resetTransactionDelayIndicator> (d, TransactionDelayIndicator, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyOrderResponse");
}

void
eurexCodec::putModifyOrderSingleRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyOrderSingleRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setOrderID, &eurexModifyOrderSingleRequestPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setClOrdID, &eurexModifyOrderSingleRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setOrigClOrdID, &eurexModifyOrderSingleRequestPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getDouble<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPrice, &eurexModifyOrderSingleRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setOrderQty, &eurexModifyOrderSingleRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getDouble<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setStopPx, &eurexModifyOrderSingleRequestPacket::resetStopPx> (d, StopPx, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIDClientID, &eurexModifyOrderSingleRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexModifyOrderSingleRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setExecutingTrader, &eurexModifyOrderSingleRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setExpireDate, &eurexModifyOrderSingleRequestPacket::resetExpireDate> (d, ExpireDate, packet);
    eti::getInteger<int32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setMarketSegmentID, &eurexModifyOrderSingleRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setSimpleSecurityID, &eurexModifyOrderSingleRequestPacket::resetSimpleSecurityID> (d, SimpleSecurityID, packet);
    eti::getInteger<uint32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setMatchInstCrossID, &eurexModifyOrderSingleRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<uint32_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setTargetPartyIDSessionID, &eurexModifyOrderSingleRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIDTakeUpTradingFirm, &eurexModifyOrderSingleRequestPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIDOrderOriginationFirm, &eurexModifyOrderSingleRequestPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIDBeneficiary, &eurexModifyOrderSingleRequestPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setApplSeqIndicator, &eurexModifyOrderSingleRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setSide, &eurexModifyOrderSingleRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setOrdType, &eurexModifyOrderSingleRequestPacket::resetOrdType> (d, OrdType, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPriceValidityCheckType, &eurexModifyOrderSingleRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setValueCheckTypeValue, &eurexModifyOrderSingleRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setOrderAttributeLiquidityProvision, &eurexModifyOrderSingleRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setTimeInForce, &eurexModifyOrderSingleRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setExecInst, &eurexModifyOrderSingleRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setTradingSessionSubID, &eurexModifyOrderSingleRequestPacket::resetTradingSessionSubID> (d, TradingSessionSubID, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setTradingCapacity, &eurexModifyOrderSingleRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderSingleRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setExecutingTraderQualifier, &eurexModifyOrderSingleRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setAccount, &eurexModifyOrderSingleRequestPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIDPositionAccount, &eurexModifyOrderSingleRequestPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPositionEffect, &eurexModifyOrderSingleRequestPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setOwnershipIndicator, &eurexModifyOrderSingleRequestPacket::resetOwnershipIndicator> (d, OwnershipIndicator, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setPartyIDLocationID, &eurexModifyOrderSingleRequestPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setCustOrderHandlingInst, &eurexModifyOrderSingleRequestPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setComplianceText, &eurexModifyOrderSingleRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setFreeText1, &eurexModifyOrderSingleRequestPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setFreeText2, &eurexModifyOrderSingleRequestPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setFreeText3, &eurexModifyOrderSingleRequestPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexModifyOrderSingleRequestPacket, &eurexModifyOrderSingleRequestPacket::setFIXClOrdID, &eurexModifyOrderSingleRequestPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyOrderSingleRequest");
}

void
eurexCodec::putModifyOrderSingleShortRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyOrderSingleShortRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setClOrdID, &eurexModifyOrderSingleShortRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setOrigClOrdID, &eurexModifyOrderSingleShortRequestPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getDouble<eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setPrice, &eurexModifyOrderSingleShortRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setOrderQty, &eurexModifyOrderSingleShortRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setPartyIDClientID, &eurexModifyOrderSingleShortRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexModifyOrderSingleShortRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setExecutingTrader, &eurexModifyOrderSingleShortRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setSimpleSecurityID, &eurexModifyOrderSingleShortRequestPacket::resetSimpleSecurityID> (d, SimpleSecurityID, packet);
    eti::getInteger<uint32_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setMatchInstCrossID, &eurexModifyOrderSingleShortRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<int16_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setEnrichmentRuleID, &eurexModifyOrderSingleShortRequestPacket::resetEnrichmentRuleID> (d, EnrichmentRuleID, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setSide, &eurexModifyOrderSingleShortRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setPriceValidityCheckType, &eurexModifyOrderSingleShortRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setValueCheckTypeValue, &eurexModifyOrderSingleShortRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setOrderAttributeLiquidityProvision, &eurexModifyOrderSingleShortRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setTimeInForce, &eurexModifyOrderSingleShortRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setApplSeqIndicator, &eurexModifyOrderSingleShortRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setExecInst, &eurexModifyOrderSingleShortRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setTradingCapacity, &eurexModifyOrderSingleShortRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexModifyOrderSingleShortRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setExecutingTraderQualifier, &eurexModifyOrderSingleShortRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexModifyOrderSingleShortRequestPacket, &eurexModifyOrderSingleShortRequestPacket::setPad4, &eurexModifyOrderSingleShortRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyOrderSingleShortRequest");
}

void
eurexCodec::putModifyTESTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexModifyTESTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getDouble<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setLastPx, &eurexModifyTESTradeRequestPacket::resetLastPx> (d, LastPx, packet);
    eti::getInteger<uint64_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setTransBkdTime, &eurexModifyTESTradeRequestPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getInteger<int32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setMarketSegmentID, &eurexModifyTESTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setPackageID, &eurexModifyTESTradeRequestPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<uint32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setTESExecID, &eurexModifyTESTradeRequestPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<int32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setRelatedMarketSegmentID, &eurexModifyTESTradeRequestPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setNegotiationID, &eurexModifyTESTradeRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setNoSRQSRelatedTradeIDs, &eurexModifyTESTradeRequestPacket::resetNoSRQSRelatedTradeIDs> (d, NoSRQSRelatedTradeIDs, packet);
    eti::getString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setPad1, &eurexModifyTESTradeRequestPacket::resetPad1> (d, Pad1, packet);
    eti::getInteger<int16_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setTrdType, &eurexModifyTESTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setTradeReportType, &eurexModifyTESTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setTradePublishIndicator, &eurexModifyTESTradeRequestPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setNoSideAllocs, &eurexModifyTESTradeRequestPacket::resetNoSideAllocs> (d, NoSideAllocs, packet);
    eti::getInteger<int8_t, eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setNoLegs, &eurexModifyTESTradeRequestPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setTradeReportText, &eurexModifyTESTradeRequestPacket::resetTradeReportText> (d, TradeReportText, packet);
    eti::getString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setTradeReportID, &eurexModifyTESTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexModifyTESTradeRequestPacket, &eurexModifyTESTradeRequestPacket::setPad4, &eurexModifyTESTradeRequestPacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vSideAllocGrp;
    bool bSideAllocGrp = d.getArray (SideAllocGrp, &vSideAllocGrp);
    for (size_t i = 0; bSideAllocGrp && i < vSideAllocGrp->size (); i++)
    {
        eurexSideAllocGrpCompPacket group;
        putSideAllocGrpComp ((*vSideAllocGrp)[i], group);
        packet.mSideAllocGrp.push_back (group);
    }
    const cdrArray* vTrdInstrmntLegGrp;
    bool bTrdInstrmntLegGrp = d.getArray (TrdInstrmntLegGrp, &vTrdInstrmntLegGrp);
    for (size_t i = 0; bTrdInstrmntLegGrp && i < vTrdInstrmntLegGrp->size (); i++)
    {
        eurexTrdInstrmntLegGrpCompPacket group;
        putTrdInstrmntLegGrpComp ((*vTrdInstrmntLegGrp)[i], group);
        packet.mTrdInstrmntLegGrp.push_back (group);
    }
    const cdrArray* vSRQSRelatedTradeIDGrp;
    bool bSRQSRelatedTradeIDGrp = d.getArray (SRQSRelatedTradeIDGrp, &vSRQSRelatedTradeIDGrp);
    for (size_t i = 0; bSRQSRelatedTradeIDGrp && i < vSRQSRelatedTradeIDGrp->size (); i++)
    {
        eurexSRQSRelatedTradeIDGrpCompPacket group;
        putSRQSRelatedTradeIDGrpComp ((*vSRQSRelatedTradeIDGrp)[i], group);
        packet.mSRQSRelatedTradeIDGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ModifyTESTradeRequest");
}

void
eurexCodec::putNewOrderComplexRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexNewOrderComplexRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setClOrdID, &eurexNewOrderComplexRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<int64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setSecurityID, &eurexNewOrderComplexRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPrice, &eurexNewOrderComplexRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setOrderQty, &eurexNewOrderComplexRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIDClientID, &eurexNewOrderComplexRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexNewOrderComplexRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setExecutingTrader, &eurexNewOrderComplexRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setMarketSegmentID, &eurexNewOrderComplexRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setExpireDate, &eurexNewOrderComplexRequestPacket::resetExpireDate> (d, ExpireDate, packet);
    eti::getInteger<uint32_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setMatchInstCrossID, &eurexNewOrderComplexRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIDTakeUpTradingFirm, &eurexNewOrderComplexRequestPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIDOrderOriginationFirm, &eurexNewOrderComplexRequestPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIDBeneficiary, &eurexNewOrderComplexRequestPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setApplSeqIndicator, &eurexNewOrderComplexRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setProductComplex, &eurexNewOrderComplexRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setSide, &eurexNewOrderComplexRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setOrdType, &eurexNewOrderComplexRequestPacket::resetOrdType> (d, OrdType, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPriceValidityCheckType, &eurexNewOrderComplexRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setValueCheckTypeValue, &eurexNewOrderComplexRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setOrderAttributeLiquidityProvision, &eurexNewOrderComplexRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setOrderAttributeRiskReduction, &eurexNewOrderComplexRequestPacket::resetOrderAttributeRiskReduction> (d, OrderAttributeRiskReduction, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setExecInst, &eurexNewOrderComplexRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setTimeInForce, &eurexNewOrderComplexRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setTradingCapacity, &eurexNewOrderComplexRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderComplexRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setExecutingTraderQualifier, &eurexNewOrderComplexRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIDLocationID, &eurexNewOrderComplexRequestPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setComplianceText, &eurexNewOrderComplexRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setCustOrderHandlingInst, &eurexNewOrderComplexRequestPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPartyIDPositionAccount, &eurexNewOrderComplexRequestPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setFreeText1, &eurexNewOrderComplexRequestPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setFreeText2, &eurexNewOrderComplexRequestPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setFreeText3, &eurexNewOrderComplexRequestPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setFIXClOrdID, &eurexNewOrderComplexRequestPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setNoLegs, &eurexNewOrderComplexRequestPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getString<eurexNewOrderComplexRequestPacket, &eurexNewOrderComplexRequestPacket::setPad2, &eurexNewOrderComplexRequestPacket::resetPad2> (d, Pad2, packet);
    const cdrArray* vLegOrdGrp;
    bool bLegOrdGrp = d.getArray (LegOrdGrp, &vLegOrdGrp);
    for (size_t i = 0; bLegOrdGrp && i < vLegOrdGrp->size (); i++)
    {
        eurexLegOrdGrpCompPacket group;
        putLegOrdGrpComp ((*vLegOrdGrp)[i], group);
        packet.mLegOrdGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize NewOrderComplexRequest");
}

void
eurexCodec::putNewOrderComplexShortRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexNewOrderComplexShortRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setSecurityID, &eurexNewOrderComplexShortRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setPrice, &eurexNewOrderComplexShortRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setOrderQty, &eurexNewOrderComplexShortRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setClOrdID, &eurexNewOrderComplexShortRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setPartyIDClientID, &eurexNewOrderComplexShortRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexNewOrderComplexShortRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setExecutingTrader, &eurexNewOrderComplexShortRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setMarketSegmentID, &eurexNewOrderComplexShortRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setMatchInstCrossID, &eurexNewOrderComplexShortRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<int16_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setEnrichmentRuleID, &eurexNewOrderComplexShortRequestPacket::resetEnrichmentRuleID> (d, EnrichmentRuleID, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setApplSeqIndicator, &eurexNewOrderComplexShortRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setProductComplex, &eurexNewOrderComplexShortRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setSide, &eurexNewOrderComplexShortRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setPriceValidityCheckType, &eurexNewOrderComplexShortRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setValueCheckTypeValue, &eurexNewOrderComplexShortRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setOrderAttributeLiquidityProvision, &eurexNewOrderComplexShortRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setExecInst, &eurexNewOrderComplexShortRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setTimeInForce, &eurexNewOrderComplexShortRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setTradingCapacity, &eurexNewOrderComplexShortRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderComplexShortRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setExecutingTraderQualifier, &eurexNewOrderComplexShortRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexNewOrderComplexShortRequestPacket, &eurexNewOrderComplexShortRequestPacket::setPad3, &eurexNewOrderComplexShortRequestPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize NewOrderComplexShortRequest");
}

void
eurexCodec::putNewOrderNRResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexNewOrderNRResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setOrderID, &eurexNewOrderNRResponsePacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setClOrdID, &eurexNewOrderNRResponsePacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<int64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setSecurityID, &eurexNewOrderNRResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setExecID, &eurexNewOrderNRResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getString<eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setOrdStatus, &eurexNewOrderNRResponsePacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setExecType, &eurexNewOrderNRResponsePacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int16_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setExecRestatementReason, &eurexNewOrderNRResponsePacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setCrossedIndicator, &eurexNewOrderNRResponsePacket::resetCrossedIndicator> (d, CrossedIndicator, packet);
    eti::getInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setProductComplex, &eurexNewOrderNRResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setTriggered, &eurexNewOrderNRResponsePacket::resetTriggered> (d, Triggered, packet);
    eti::getInteger<int8_t, eurexNewOrderNRResponsePacket, &eurexNewOrderNRResponsePacket::setTransactionDelayIndicator, &eurexNewOrderNRResponsePacket::resetTransactionDelayIndicator> (d, TransactionDelayIndicator, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize NewOrderNRResponse");
}

void
eurexCodec::putNewOrderResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexNewOrderResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderMEComp (d, packet.mResponseHeaderME);
    eti::getInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setOrderID, &eurexNewOrderResponsePacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setClOrdID, &eurexNewOrderResponsePacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<int64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setSecurityID, &eurexNewOrderResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setExecID, &eurexNewOrderResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setTrdRegTSEntryTime, &eurexNewOrderResponsePacket::resetTrdRegTSEntryTime> (d, TrdRegTSEntryTime, packet);
    eti::getInteger<uint64_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setTrdRegTSTimePriority, &eurexNewOrderResponsePacket::resetTrdRegTSTimePriority> (d, TrdRegTSTimePriority, packet);
    eti::getString<eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setOrdStatus, &eurexNewOrderResponsePacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setExecType, &eurexNewOrderResponsePacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int16_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setExecRestatementReason, &eurexNewOrderResponsePacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setCrossedIndicator, &eurexNewOrderResponsePacket::resetCrossedIndicator> (d, CrossedIndicator, packet);
    eti::getInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setProductComplex, &eurexNewOrderResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setTriggered, &eurexNewOrderResponsePacket::resetTriggered> (d, Triggered, packet);
    eti::getInteger<int8_t, eurexNewOrderResponsePacket, &eurexNewOrderResponsePacket::setTransactionDelayIndicator, &eurexNewOrderResponsePacket::resetTransactionDelayIndicator> (d, TransactionDelayIndicator, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize NewOrderResponse");
}

void
eurexCodec::putNewOrderSingleRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexNewOrderSingleRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getDouble<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPrice, &eurexNewOrderSingleRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setOrderQty, &eurexNewOrderSingleRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getDouble<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setStopPx, &eurexNewOrderSingleRequestPacket::resetStopPx> (d, StopPx, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setClOrdID, &eurexNewOrderSingleRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIDClientID, &eurexNewOrderSingleRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexNewOrderSingleRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setExecutingTrader, &eurexNewOrderSingleRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setExpireDate, &eurexNewOrderSingleRequestPacket::resetExpireDate> (d, ExpireDate, packet);
    eti::getInteger<int32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setMarketSegmentID, &eurexNewOrderSingleRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setSimpleSecurityID, &eurexNewOrderSingleRequestPacket::resetSimpleSecurityID> (d, SimpleSecurityID, packet);
    eti::getInteger<uint32_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setMatchInstCrossID, &eurexNewOrderSingleRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIDTakeUpTradingFirm, &eurexNewOrderSingleRequestPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIDOrderOriginationFirm, &eurexNewOrderSingleRequestPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIDBeneficiary, &eurexNewOrderSingleRequestPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setApplSeqIndicator, &eurexNewOrderSingleRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setSide, &eurexNewOrderSingleRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setOrdType, &eurexNewOrderSingleRequestPacket::resetOrdType> (d, OrdType, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPriceValidityCheckType, &eurexNewOrderSingleRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setValueCheckTypeValue, &eurexNewOrderSingleRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setOrderAttributeLiquidityProvision, &eurexNewOrderSingleRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setOrderAttributeRiskReduction, &eurexNewOrderSingleRequestPacket::resetOrderAttributeRiskReduction> (d, OrderAttributeRiskReduction, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setTimeInForce, &eurexNewOrderSingleRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setExecInst, &eurexNewOrderSingleRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setTradingSessionSubID, &eurexNewOrderSingleRequestPacket::resetTradingSessionSubID> (d, TradingSessionSubID, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setTradingCapacity, &eurexNewOrderSingleRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderSingleRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setExecutingTraderQualifier, &eurexNewOrderSingleRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setAccount, &eurexNewOrderSingleRequestPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIDPositionAccount, &eurexNewOrderSingleRequestPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPositionEffect, &eurexNewOrderSingleRequestPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPartyIDLocationID, &eurexNewOrderSingleRequestPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setCustOrderHandlingInst, &eurexNewOrderSingleRequestPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setComplianceText, &eurexNewOrderSingleRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setFreeText1, &eurexNewOrderSingleRequestPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setFreeText2, &eurexNewOrderSingleRequestPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setFreeText3, &eurexNewOrderSingleRequestPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setFIXClOrdID, &eurexNewOrderSingleRequestPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getString<eurexNewOrderSingleRequestPacket, &eurexNewOrderSingleRequestPacket::setPad4, &eurexNewOrderSingleRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize NewOrderSingleRequest");
}

void
eurexCodec::putNewOrderSingleShortRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexNewOrderSingleShortRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getDouble<eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setPrice, &eurexNewOrderSingleShortRequestPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setOrderQty, &eurexNewOrderSingleShortRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setClOrdID, &eurexNewOrderSingleShortRequestPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setPartyIDClientID, &eurexNewOrderSingleShortRequestPacket::resetPartyIDClientID> (d, PartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexNewOrderSingleShortRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setExecutingTrader, &eurexNewOrderSingleShortRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setSimpleSecurityID, &eurexNewOrderSingleShortRequestPacket::resetSimpleSecurityID> (d, SimpleSecurityID, packet);
    eti::getInteger<uint32_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setMatchInstCrossID, &eurexNewOrderSingleShortRequestPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<int16_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setEnrichmentRuleID, &eurexNewOrderSingleShortRequestPacket::resetEnrichmentRuleID> (d, EnrichmentRuleID, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setSide, &eurexNewOrderSingleShortRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setApplSeqIndicator, &eurexNewOrderSingleShortRequestPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setPriceValidityCheckType, &eurexNewOrderSingleShortRequestPacket::resetPriceValidityCheckType> (d, PriceValidityCheckType, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setValueCheckTypeValue, &eurexNewOrderSingleShortRequestPacket::resetValueCheckTypeValue> (d, ValueCheckTypeValue, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setOrderAttributeLiquidityProvision, &eurexNewOrderSingleShortRequestPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setTimeInForce, &eurexNewOrderSingleShortRequestPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setExecInst, &eurexNewOrderSingleShortRequestPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setTradingCapacity, &eurexNewOrderSingleShortRequestPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexNewOrderSingleShortRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setExecutingTraderQualifier, &eurexNewOrderSingleShortRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexNewOrderSingleShortRequestPacket, &eurexNewOrderSingleShortRequestPacket::setPad4, &eurexNewOrderSingleShortRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize NewOrderSingleShortRequest");
}

void
eurexCodec::putNewsBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexNewsBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::setOrigTime, &eurexNewsBroadcastPacket::resetOrigTime> (d, OrigTime, packet);
    eti::getInteger<int16_t, eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::setVarTextLen, &eurexNewsBroadcastPacket::resetVarTextLen> (d, VarTextLen, packet);
    eti::getString<eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::setHeadline, &eurexNewsBroadcastPacket::resetHeadline> (d, Headline, packet);
    eti::getString<eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::setPad6, &eurexNewsBroadcastPacket::resetPad6> (d, Pad6, packet);
    eti::getString<eurexNewsBroadcastPacket, &eurexNewsBroadcastPacket::setVarText, &eurexNewsBroadcastPacket::resetVarText> (d, VarText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize NewsBroadcast");
}

void
eurexCodec::putOrderExecNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexOrderExecNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setOrderID, &eurexOrderExecNotificationPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setClOrdID, &eurexOrderExecNotificationPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setOrigClOrdID, &eurexOrderExecNotificationPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setSecurityID, &eurexOrderExecNotificationPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setExecID, &eurexOrderExecNotificationPacket::resetExecID> (d, ExecID, packet);
    eti::getDouble<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setLeavesQty, &eurexOrderExecNotificationPacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setCumQty, &eurexOrderExecNotificationPacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setCxlQty, &eurexOrderExecNotificationPacket::resetCxlQty> (d, CxlQty, packet);
    eti::getInteger<int32_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setMarketSegmentID, &eurexOrderExecNotificationPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setNoLegExecs, &eurexOrderExecNotificationPacket::resetNoLegExecs> (d, NoLegExecs, packet);
    eti::getInteger<int16_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setExecRestatementReason, &eurexOrderExecNotificationPacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setSide, &eurexOrderExecNotificationPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setProductComplex, &eurexOrderExecNotificationPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setOrdStatus, &eurexOrderExecNotificationPacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setExecType, &eurexOrderExecNotificationPacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setTriggered, &eurexOrderExecNotificationPacket::resetTriggered> (d, Triggered, packet);
    eti::getInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setCrossedIndicator, &eurexOrderExecNotificationPacket::resetCrossedIndicator> (d, CrossedIndicator, packet);
    eti::getString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setFIXClOrdID, &eurexOrderExecNotificationPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getInteger<int8_t, eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setNoFills, &eurexOrderExecNotificationPacket::resetNoFills> (d, NoFills, packet);
    eti::getString<eurexOrderExecNotificationPacket, &eurexOrderExecNotificationPacket::setPad5, &eurexOrderExecNotificationPacket::resetPad5> (d, Pad5, packet);
    const cdrArray* vFillsGrp;
    bool bFillsGrp = d.getArray (FillsGrp, &vFillsGrp);
    for (size_t i = 0; bFillsGrp && i < vFillsGrp->size (); i++)
    {
        eurexFillsGrpCompPacket group;
        putFillsGrpComp ((*vFillsGrp)[i], group);
        packet.mFillsGrp.push_back (group);
    }
    const cdrArray* vInstrmntLegExecGrp;
    bool bInstrmntLegExecGrp = d.getArray (InstrmntLegExecGrp, &vInstrmntLegExecGrp);
    for (size_t i = 0; bInstrmntLegExecGrp && i < vInstrmntLegExecGrp->size (); i++)
    {
        eurexInstrmntLegExecGrpCompPacket group;
        putInstrmntLegExecGrpComp ((*vInstrmntLegExecGrp)[i], group);
        packet.mInstrmntLegExecGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize OrderExecNotification");
}

void
eurexCodec::putOrderExecReportBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexOrderExecReportBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setOrderID, &eurexOrderExecReportBroadcastPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setClOrdID, &eurexOrderExecReportBroadcastPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setOrigClOrdID, &eurexOrderExecReportBroadcastPacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setSecurityID, &eurexOrderExecReportBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setExecID, &eurexOrderExecReportBroadcastPacket::resetExecID> (d, ExecID, packet);
    eti::getInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setTrdRegTSEntryTime, &eurexOrderExecReportBroadcastPacket::resetTrdRegTSEntryTime> (d, TrdRegTSEntryTime, packet);
    eti::getInteger<uint64_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setTrdRegTSTimePriority, &eurexOrderExecReportBroadcastPacket::resetTrdRegTSTimePriority> (d, TrdRegTSTimePriority, packet);
    eti::getDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPrice, &eurexOrderExecReportBroadcastPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setLeavesQty, &eurexOrderExecReportBroadcastPacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setCumQty, &eurexOrderExecReportBroadcastPacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setCxlQty, &eurexOrderExecReportBroadcastPacket::resetCxlQty> (d, CxlQty, packet);
    eti::getDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setOrderQty, &eurexOrderExecReportBroadcastPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getDouble<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setStopPx, &eurexOrderExecReportBroadcastPacket::resetStopPx> (d, StopPx, packet);
    eti::getInteger<int32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setMarketSegmentID, &eurexOrderExecReportBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setExpireDate, &eurexOrderExecReportBroadcastPacket::resetExpireDate> (d, ExpireDate, packet);
    eti::getInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setMatchInstCrossID, &eurexOrderExecReportBroadcastPacket::resetMatchInstCrossID> (d, MatchInstCrossID, packet);
    eti::getInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDExecutingUnit, &eurexOrderExecReportBroadcastPacket::resetPartyIDExecutingUnit> (d, PartyIDExecutingUnit, packet);
    eti::getInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDSessionID, &eurexOrderExecReportBroadcastPacket::resetPartyIDSessionID> (d, PartyIDSessionID, packet);
    eti::getInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDExecutingTrader, &eurexOrderExecReportBroadcastPacket::resetPartyIDExecutingTrader> (d, PartyIDExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDEnteringTrader, &eurexOrderExecReportBroadcastPacket::resetPartyIDEnteringTrader> (d, PartyIDEnteringTrader, packet);
    eti::getInteger<int16_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setNoLegExecs, &eurexOrderExecReportBroadcastPacket::resetNoLegExecs> (d, NoLegExecs, packet);
    eti::getInteger<int16_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setExecRestatementReason, &eurexOrderExecReportBroadcastPacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDEnteringFirm, &eurexOrderExecReportBroadcastPacket::resetPartyIDEnteringFirm> (d, PartyIDEnteringFirm, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setProductComplex, &eurexOrderExecReportBroadcastPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setOrdStatus, &eurexOrderExecReportBroadcastPacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setExecType, &eurexOrderExecReportBroadcastPacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setSide, &eurexOrderExecReportBroadcastPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setOrdType, &eurexOrderExecReportBroadcastPacket::resetOrdType> (d, OrdType, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setTradingCapacity, &eurexOrderExecReportBroadcastPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setTimeInForce, &eurexOrderExecReportBroadcastPacket::resetTimeInForce> (d, TimeInForce, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setExecInst, &eurexOrderExecReportBroadcastPacket::resetExecInst> (d, ExecInst, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setTradingSessionSubID, &eurexOrderExecReportBroadcastPacket::resetTradingSessionSubID> (d, TradingSessionSubID, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setApplSeqIndicator, &eurexOrderExecReportBroadcastPacket::resetApplSeqIndicator> (d, ApplSeqIndicator, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setAccount, &eurexOrderExecReportBroadcastPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDPositionAccount, &eurexOrderExecReportBroadcastPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPositionEffect, &eurexOrderExecReportBroadcastPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDTakeUpTradingFirm, &eurexOrderExecReportBroadcastPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDOrderOriginationFirm, &eurexOrderExecReportBroadcastPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDBeneficiary, &eurexOrderExecReportBroadcastPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPartyIDLocationID, &eurexOrderExecReportBroadcastPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setCustOrderHandlingInst, &eurexOrderExecReportBroadcastPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setComplianceText, &eurexOrderExecReportBroadcastPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setFreeText1, &eurexOrderExecReportBroadcastPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setFreeText2, &eurexOrderExecReportBroadcastPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setFreeText3, &eurexOrderExecReportBroadcastPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setFIXClOrdID, &eurexOrderExecReportBroadcastPacket::resetFIXClOrdID> (d, FIXClOrdID, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setNoFills, &eurexOrderExecReportBroadcastPacket::resetNoFills> (d, NoFills, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setNoLegs, &eurexOrderExecReportBroadcastPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setTriggered, &eurexOrderExecReportBroadcastPacket::resetTriggered> (d, Triggered, packet);
    eti::getInteger<int8_t, eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setCrossedIndicator, &eurexOrderExecReportBroadcastPacket::resetCrossedIndicator> (d, CrossedIndicator, packet);
    eti::getString<eurexOrderExecReportBroadcastPacket, &eurexOrderExecReportBroadcastPacket::setPad2, &eurexOrderExecReportBroadcastPacket::resetPad2> (d, Pad2, packet);
    const cdrArray* vLegOrdGrp;
    bool bLegOrdGrp = d.getArray (LegOrdGrp, &vLegOrdGrp);
    for (size_t i = 0; bLegOrdGrp && i < vLegOrdGrp->size (); i++)
    {
        eurexLegOrdGrpCompPacket group;
        putLegOrdGrpComp ((*vLegOrdGrp)[i], group);
        packet.mLegOrdGrp.push_back (group);
    }
    const cdrArray* vFillsGrp;
    bool bFillsGrp = d.getArray (FillsGrp, &vFillsGrp);
    for (size_t i = 0; bFillsGrp && i < vFillsGrp->size (); i++)
    {
        eurexFillsGrpCompPacket group;
        putFillsGrpComp ((*vFillsGrp)[i], group);
        packet.mFillsGrp.push_back (group);
    }
    const cdrArray* vInstrmntLegExecGrp;
    bool bInstrmntLegExecGrp = d.getArray (InstrmntLegExecGrp, &vInstrmntLegExecGrp);
    for (size_t i = 0; bInstrmntLegExecGrp && i < vInstrmntLegExecGrp->size (); i++)
    {
        eurexInstrmntLegExecGrpCompPacket group;
        putInstrmntLegExecGrpComp ((*vInstrmntLegExecGrp)[i], group);
        packet.mInstrmntLegExecGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize OrderExecReportBroadcast");
}

void
eurexCodec::putOrderExecResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexOrderExecResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderMEComp (d, packet.mResponseHeaderME);
    eti::getInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setOrderID, &eurexOrderExecResponsePacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setClOrdID, &eurexOrderExecResponsePacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setOrigClOrdID, &eurexOrderExecResponsePacket::resetOrigClOrdID> (d, OrigClOrdID, packet);
    eti::getInteger<int64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setSecurityID, &eurexOrderExecResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setExecID, &eurexOrderExecResponsePacket::resetExecID> (d, ExecID, packet);
    eti::getInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setTrdRegTSEntryTime, &eurexOrderExecResponsePacket::resetTrdRegTSEntryTime> (d, TrdRegTSEntryTime, packet);
    eti::getInteger<uint64_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setTrdRegTSTimePriority, &eurexOrderExecResponsePacket::resetTrdRegTSTimePriority> (d, TrdRegTSTimePriority, packet);
    eti::getDouble<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setLeavesQty, &eurexOrderExecResponsePacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setCumQty, &eurexOrderExecResponsePacket::resetCumQty> (d, CumQty, packet);
    eti::getDouble<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setCxlQty, &eurexOrderExecResponsePacket::resetCxlQty> (d, CxlQty, packet);
    eti::getInteger<int32_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setMarketSegmentID, &eurexOrderExecResponsePacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setNoLegExecs, &eurexOrderExecResponsePacket::resetNoLegExecs> (d, NoLegExecs, packet);
    eti::getInteger<int16_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setExecRestatementReason, &eurexOrderExecResponsePacket::resetExecRestatementReason> (d, ExecRestatementReason, packet);
    eti::getInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setSide, &eurexOrderExecResponsePacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setProductComplex, &eurexOrderExecResponsePacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getString<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setOrdStatus, &eurexOrderExecResponsePacket::resetOrdStatus> (d, OrdStatus, packet);
    eti::getString<eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setExecType, &eurexOrderExecResponsePacket::resetExecType> (d, ExecType, packet);
    eti::getInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setTriggered, &eurexOrderExecResponsePacket::resetTriggered> (d, Triggered, packet);
    eti::getInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setCrossedIndicator, &eurexOrderExecResponsePacket::resetCrossedIndicator> (d, CrossedIndicator, packet);
    eti::getInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setTransactionDelayIndicator, &eurexOrderExecResponsePacket::resetTransactionDelayIndicator> (d, TransactionDelayIndicator, packet);
    eti::getInteger<int8_t, eurexOrderExecResponsePacket, &eurexOrderExecResponsePacket::setNoFills, &eurexOrderExecResponsePacket::resetNoFills> (d, NoFills, packet);
    const cdrArray* vFillsGrp;
    bool bFillsGrp = d.getArray (FillsGrp, &vFillsGrp);
    for (size_t i = 0; bFillsGrp && i < vFillsGrp->size (); i++)
    {
        eurexFillsGrpCompPacket group;
        putFillsGrpComp ((*vFillsGrp)[i], group);
        packet.mFillsGrp.push_back (group);
    }
    const cdrArray* vInstrmntLegExecGrp;
    bool bInstrmntLegExecGrp = d.getArray (InstrmntLegExecGrp, &vInstrmntLegExecGrp);
    for (size_t i = 0; bInstrmntLegExecGrp && i < vInstrmntLegExecGrp->size (); i++)
    {
        eurexInstrmntLegExecGrpCompPacket group;
        putInstrmntLegExecGrpComp ((*vInstrmntLegExecGrp)[i], group);
        packet.mInstrmntLegExecGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize OrderExecResponse");
}

void
eurexCodec::putPartyActionReport (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexPartyActionReportPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setTransactTime, &eurexPartyActionReportPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setTradeDate, &eurexPartyActionReportPacket::resetTradeDate> (d, TradeDate, packet);
    eti::getInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setRequestingPartyIDExecutingTrader, &eurexPartyActionReportPacket::resetRequestingPartyIDExecutingTrader> (d, RequestingPartyIDExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setPartyIDExecutingUnit, &eurexPartyActionReportPacket::resetPartyIDExecutingUnit> (d, PartyIDExecutingUnit, packet);
    eti::getInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setPartyIDExecutingTrader, &eurexPartyActionReportPacket::resetPartyIDExecutingTrader> (d, PartyIDExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setRequestingPartyIDExecutingSystem, &eurexPartyActionReportPacket::resetRequestingPartyIDExecutingSystem> (d, RequestingPartyIDExecutingSystem, packet);
    eti::getInteger<int16_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setMarketID, &eurexPartyActionReportPacket::resetMarketID> (d, MarketID, packet);
    eti::getInteger<int8_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setPartyActionType, &eurexPartyActionReportPacket::resetPartyActionType> (d, PartyActionType, packet);
    eti::getInteger<int8_t, eurexPartyActionReportPacket, &eurexPartyActionReportPacket::setRequestingPartyIDEnteringFirm, &eurexPartyActionReportPacket::resetRequestingPartyIDEnteringFirm> (d, RequestingPartyIDEnteringFirm, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize PartyActionReport");
}

void
eurexCodec::putPartyEntitlementsUpdateReport (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexPartyEntitlementsUpdateReportPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setTransactTime, &eurexPartyEntitlementsUpdateReportPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int32_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setTradeDate, &eurexPartyEntitlementsUpdateReportPacket::resetTradeDate> (d, TradeDate, packet);
    eti::getInteger<uint32_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setPartyDetailIDExecutingUnit, &eurexPartyEntitlementsUpdateReportPacket::resetPartyDetailIDExecutingUnit> (d, PartyDetailIDExecutingUnit, packet);
    eti::getInteger<uint32_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setRequestingPartyIDExecutingSystem, &eurexPartyEntitlementsUpdateReportPacket::resetRequestingPartyIDExecutingSystem> (d, RequestingPartyIDExecutingSystem, packet);
    eti::getInteger<int16_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setMarketID, &eurexPartyEntitlementsUpdateReportPacket::resetMarketID> (d, MarketID, packet);
    eti::getString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setListUpdateAction, &eurexPartyEntitlementsUpdateReportPacket::resetListUpdateAction> (d, ListUpdateAction, packet);
    eti::getString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setRequestingPartyEnteringFirm, &eurexPartyEntitlementsUpdateReportPacket::resetRequestingPartyEnteringFirm> (d, RequestingPartyEnteringFirm, packet);
    eti::getString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setRequestingPartyClearingFirm, &eurexPartyEntitlementsUpdateReportPacket::resetRequestingPartyClearingFirm> (d, RequestingPartyClearingFirm, packet);
    eti::getInteger<int8_t, eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setPartyDetailStatus, &eurexPartyEntitlementsUpdateReportPacket::resetPartyDetailStatus> (d, PartyDetailStatus, packet);
    eti::getString<eurexPartyEntitlementsUpdateReportPacket, &eurexPartyEntitlementsUpdateReportPacket::setPad6, &eurexPartyEntitlementsUpdateReportPacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize PartyEntitlementsUpdateReport");
}

void
eurexCodec::putPreTradeRiskLimitResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexPreTradeRiskLimitResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::setRiskLimitReportID, &eurexPreTradeRiskLimitResponsePacket::resetRiskLimitReportID> (d, RiskLimitReportID, packet);
    eti::getInteger<int32_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::setMarketSegmentID, &eurexPreTradeRiskLimitResponsePacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::setNoRiskLimits, &eurexPreTradeRiskLimitResponsePacket::resetNoRiskLimits> (d, NoRiskLimits, packet);
    eti::getInteger<int8_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::setPartyDetailStatus, &eurexPreTradeRiskLimitResponsePacket::resetPartyDetailStatus> (d, PartyDetailStatus, packet);
    eti::getInteger<int8_t, eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::setRiskLimitPlatform, &eurexPreTradeRiskLimitResponsePacket::resetRiskLimitPlatform> (d, RiskLimitPlatform, packet);
    eti::getString<eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::setPartyDetailExecutingUnit, &eurexPreTradeRiskLimitResponsePacket::resetPartyDetailExecutingUnit> (d, PartyDetailExecutingUnit, packet);
    eti::getString<eurexPreTradeRiskLimitResponsePacket, &eurexPreTradeRiskLimitResponsePacket::setPad4, &eurexPreTradeRiskLimitResponsePacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vRiskLimitsRptGrp;
    bool bRiskLimitsRptGrp = d.getArray (RiskLimitsRptGrp, &vRiskLimitsRptGrp);
    for (size_t i = 0; bRiskLimitsRptGrp && i < vRiskLimitsRptGrp->size (); i++)
    {
        eurexRiskLimitsRptGrpCompPacket group;
        putRiskLimitsRptGrpComp ((*vRiskLimitsRptGrp)[i], group);
        packet.mRiskLimitsRptGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize PreTradeRiskLimitResponse");
}

void
eurexCodec::putPreTradeRiskLimitsDefinitionRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexPreTradeRiskLimitsDefinitionRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::setMarketSegmentID, &eurexPreTradeRiskLimitsDefinitionRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::setRiskLimitPlatform, &eurexPreTradeRiskLimitsDefinitionRequestPacket::resetRiskLimitPlatform> (d, RiskLimitPlatform, packet);
    eti::getInteger<int8_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::setNoRiskLimitsQty, &eurexPreTradeRiskLimitsDefinitionRequestPacket::resetNoRiskLimitsQty> (d, NoRiskLimitsQty, packet);
    eti::getInteger<int8_t, eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::setPartyDetailStatus, &eurexPreTradeRiskLimitsDefinitionRequestPacket::resetPartyDetailStatus> (d, PartyDetailStatus, packet);
    eti::getString<eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::setRiskLimitGroup, &eurexPreTradeRiskLimitsDefinitionRequestPacket::resetRiskLimitGroup> (d, RiskLimitGroup, packet);
    eti::getString<eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::setPartyDetailExecutingUnit, &eurexPreTradeRiskLimitsDefinitionRequestPacket::resetPartyDetailExecutingUnit> (d, PartyDetailExecutingUnit, packet);
    eti::getString<eurexPreTradeRiskLimitsDefinitionRequestPacket, &eurexPreTradeRiskLimitsDefinitionRequestPacket::setPad1, &eurexPreTradeRiskLimitsDefinitionRequestPacket::resetPad1> (d, Pad1, packet);
    const cdrArray* vRiskLimitQtyGrp;
    bool bRiskLimitQtyGrp = d.getArray (RiskLimitQtyGrp, &vRiskLimitQtyGrp);
    for (size_t i = 0; bRiskLimitQtyGrp && i < vRiskLimitQtyGrp->size (); i++)
    {
        eurexRiskLimitQtyGrpCompPacket group;
        putRiskLimitQtyGrpComp ((*vRiskLimitQtyGrp)[i], group);
        packet.mRiskLimitQtyGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize PreTradeRiskLimitsDefinitionRequest");
}

void
eurexCodec::putQuoteActivationNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexQuoteActivationNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setMassActionReportID, &eurexQuoteActivationNotificationPacket::resetMassActionReportID> (d, MassActionReportID, packet);
    eti::getInteger<int32_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setMarketSegmentID, &eurexQuoteActivationNotificationPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setPartyIDEnteringTrader, &eurexQuoteActivationNotificationPacket::resetPartyIDEnteringTrader> (d, PartyIDEnteringTrader, packet);
    eti::getInteger<int16_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setNoNotAffectedSecurities, &eurexQuoteActivationNotificationPacket::resetNoNotAffectedSecurities> (d, NoNotAffectedSecurities, packet);
    eti::getInteger<int8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setPartyIDEnteringFirm, &eurexQuoteActivationNotificationPacket::resetPartyIDEnteringFirm> (d, PartyIDEnteringFirm, packet);
    eti::getInteger<int8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setMassActionType, &eurexQuoteActivationNotificationPacket::resetMassActionType> (d, MassActionType, packet);
    eti::getInteger<int8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setMassActionSubType, &eurexQuoteActivationNotificationPacket::resetMassActionSubType> (d, MassActionSubType, packet);
    eti::getInteger<uint8_t, eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setMassActionReason, &eurexQuoteActivationNotificationPacket::resetMassActionReason> (d, MassActionReason, packet);
    eti::getString<eurexQuoteActivationNotificationPacket, &eurexQuoteActivationNotificationPacket::setPad2, &eurexQuoteActivationNotificationPacket::resetPad2> (d, Pad2, packet);
    const cdrArray* vNotAffectedSecuritiesGrp;
    bool bNotAffectedSecuritiesGrp = d.getArray (NotAffectedSecuritiesGrp, &vNotAffectedSecuritiesGrp);
    for (size_t i = 0; bNotAffectedSecuritiesGrp && i < vNotAffectedSecuritiesGrp->size (); i++)
    {
        eurexNotAffectedSecuritiesGrpCompPacket group;
        putNotAffectedSecuritiesGrpComp ((*vNotAffectedSecuritiesGrp)[i], group);
        packet.mNotAffectedSecuritiesGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize QuoteActivationNotification");
}

void
eurexCodec::putQuoteActivationRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexQuoteActivationRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setPartyIdInvestmentDecisionMaker, &eurexQuoteActivationRequestPacket::resetPartyIdInvestmentDecisionMaker> (d, PartyIdInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setExecutingTrader, &eurexQuoteActivationRequestPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<int32_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setMarketSegmentID, &eurexQuoteActivationRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setTargetPartyIDSessionID, &eurexQuoteActivationRequestPacket::resetTargetPartyIDSessionID> (d, TargetPartyIDSessionID, packet);
    eti::getInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setMassActionType, &eurexQuoteActivationRequestPacket::resetMassActionType> (d, MassActionType, packet);
    eti::getInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setMassActionSubType, &eurexQuoteActivationRequestPacket::resetMassActionSubType> (d, MassActionSubType, packet);
    eti::getInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setPartyIdInvestmentDecisionMakerQualifier, &eurexQuoteActivationRequestPacket::resetPartyIdInvestmentDecisionMakerQualifier> (d, PartyIdInvestmentDecisionMakerQualifier, packet);
    eti::getInteger<int8_t, eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setExecutingTraderQualifier, &eurexQuoteActivationRequestPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getString<eurexQuoteActivationRequestPacket, &eurexQuoteActivationRequestPacket::setPad4, &eurexQuoteActivationRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize QuoteActivationRequest");
}

void
eurexCodec::putQuoteActivationResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexQuoteActivationResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexQuoteActivationResponsePacket, &eurexQuoteActivationResponsePacket::setMassActionReportID, &eurexQuoteActivationResponsePacket::resetMassActionReportID> (d, MassActionReportID, packet);
    eti::getInteger<int16_t, eurexQuoteActivationResponsePacket, &eurexQuoteActivationResponsePacket::setNoNotAffectedSecurities, &eurexQuoteActivationResponsePacket::resetNoNotAffectedSecurities> (d, NoNotAffectedSecurities, packet);
    eti::getString<eurexQuoteActivationResponsePacket, &eurexQuoteActivationResponsePacket::setPad6, &eurexQuoteActivationResponsePacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vNotAffectedSecuritiesGrp;
    bool bNotAffectedSecuritiesGrp = d.getArray (NotAffectedSecuritiesGrp, &vNotAffectedSecuritiesGrp);
    for (size_t i = 0; bNotAffectedSecuritiesGrp && i < vNotAffectedSecuritiesGrp->size (); i++)
    {
        eurexNotAffectedSecuritiesGrpCompPacket group;
        putNotAffectedSecuritiesGrpComp ((*vNotAffectedSecuritiesGrp)[i], group);
        packet.mNotAffectedSecuritiesGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize QuoteActivationResponse");
}

void
eurexCodec::putQuoteExecutionReport (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexQuoteExecutionReportPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<uint64_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::setExecID, &eurexQuoteExecutionReportPacket::resetExecID> (d, ExecID, packet);
    eti::getInteger<int32_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::setMarketSegmentID, &eurexQuoteExecutionReportPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int16_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::setNoLegExecs, &eurexQuoteExecutionReportPacket::resetNoLegExecs> (d, NoLegExecs, packet);
    eti::getInteger<int8_t, eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::setNoQuoteEvents, &eurexQuoteExecutionReportPacket::resetNoQuoteEvents> (d, NoQuoteEvents, packet);
    eti::getString<eurexQuoteExecutionReportPacket, &eurexQuoteExecutionReportPacket::setPad1, &eurexQuoteExecutionReportPacket::resetPad1> (d, Pad1, packet);
    const cdrArray* vQuoteEventGrp;
    bool bQuoteEventGrp = d.getArray (QuoteEventGrp, &vQuoteEventGrp);
    for (size_t i = 0; bQuoteEventGrp && i < vQuoteEventGrp->size (); i++)
    {
        eurexQuoteEventGrpCompPacket group;
        putQuoteEventGrpComp ((*vQuoteEventGrp)[i], group);
        packet.mQuoteEventGrp.push_back (group);
    }
    const cdrArray* vQuoteLegExecGrp;
    bool bQuoteLegExecGrp = d.getArray (QuoteLegExecGrp, &vQuoteLegExecGrp);
    for (size_t i = 0; bQuoteLegExecGrp && i < vQuoteLegExecGrp->size (); i++)
    {
        eurexQuoteLegExecGrpCompPacket group;
        putQuoteLegExecGrpComp ((*vQuoteLegExecGrp)[i], group);
        packet.mQuoteLegExecGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize QuoteExecutionReport");
}

void
eurexCodec::putRFQRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRFQRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexRFQRequestPacket, &eurexRFQRequestPacket::setSecurityID, &eurexRFQRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexRFQRequestPacket, &eurexRFQRequestPacket::setOrderQty, &eurexRFQRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<int32_t, eurexRFQRequestPacket, &eurexRFQRequestPacket::setMarketSegmentID, &eurexRFQRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int8_t, eurexRFQRequestPacket, &eurexRFQRequestPacket::setSide, &eurexRFQRequestPacket::resetSide> (d, Side, packet);
    eti::getString<eurexRFQRequestPacket, &eurexRFQRequestPacket::setComplianceText, &eurexRFQRequestPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexRFQRequestPacket, &eurexRFQRequestPacket::setPad7, &eurexRFQRequestPacket::resetPad7> (d, Pad7, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize RFQRequest");
}

void
eurexCodec::putRFQResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRFQResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint64_t, eurexRFQResponsePacket, &eurexRFQResponsePacket::setExecID, &eurexRFQResponsePacket::resetExecID> (d, ExecID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize RFQResponse");
}

void
eurexCodec::putReject (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRejectPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRResponseHeaderMEComp (d, packet.mNRResponseHeaderME);
    eti::getInteger<uint32_t, eurexRejectPacket, &eurexRejectPacket::setSessionRejectReason, &eurexRejectPacket::resetSessionRejectReason> (d, SessionRejectReason, packet);
    eti::getInteger<int16_t, eurexRejectPacket, &eurexRejectPacket::setVarTextLen, &eurexRejectPacket::resetVarTextLen> (d, VarTextLen, packet);
    eti::getInteger<int8_t, eurexRejectPacket, &eurexRejectPacket::setSessionStatus, &eurexRejectPacket::resetSessionStatus> (d, SessionStatus, packet);
    eti::getString<eurexRejectPacket, &eurexRejectPacket::setPad1, &eurexRejectPacket::resetPad1> (d, Pad1, packet);
    eti::getString<eurexRejectPacket, &eurexRejectPacket::setVarText, &eurexRejectPacket::resetVarText> (d, VarText, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize Reject");
}

void
eurexCodec::putRetransmitMEMessageRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRetransmitMEMessageRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint32_t, eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::setSubscriptionScope, &eurexRetransmitMEMessageRequestPacket::resetSubscriptionScope> (d, SubscriptionScope, packet);
    eti::getInteger<uint16_t, eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::setPartitionID, &eurexRetransmitMEMessageRequestPacket::resetPartitionID> (d, PartitionID, packet);
    eti::getInteger<int8_t, eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::setRefApplID, &eurexRetransmitMEMessageRequestPacket::resetRefApplID> (d, RefApplID, packet);
    eti::getString<eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::setApplBegMsgID, &eurexRetransmitMEMessageRequestPacket::resetApplBegMsgID> (d, ApplBegMsgID, packet);
    eti::getString<eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::setApplEndMsgID, &eurexRetransmitMEMessageRequestPacket::resetApplEndMsgID> (d, ApplEndMsgID, packet);
    eti::getString<eurexRetransmitMEMessageRequestPacket, &eurexRetransmitMEMessageRequestPacket::setPad1, &eurexRetransmitMEMessageRequestPacket::resetPad1> (d, Pad1, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize RetransmitMEMessageRequest");
}

void
eurexCodec::putRetransmitMEMessageResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRetransmitMEMessageResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<uint16_t, eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::setApplTotalMessageCount, &eurexRetransmitMEMessageResponsePacket::resetApplTotalMessageCount> (d, ApplTotalMessageCount, packet);
    eti::getString<eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::setApplEndMsgID, &eurexRetransmitMEMessageResponsePacket::resetApplEndMsgID> (d, ApplEndMsgID, packet);
    eti::getString<eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::setRefApplLastMsgID, &eurexRetransmitMEMessageResponsePacket::resetRefApplLastMsgID> (d, RefApplLastMsgID, packet);
    eti::getString<eurexRetransmitMEMessageResponsePacket, &eurexRetransmitMEMessageResponsePacket::setPad6, &eurexRetransmitMEMessageResponsePacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize RetransmitMEMessageResponse");
}

void
eurexCodec::putRetransmitRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRetransmitRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::setApplBegSeqNum, &eurexRetransmitRequestPacket::resetApplBegSeqNum> (d, ApplBegSeqNum, packet);
    eti::getInteger<uint64_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::setApplEndSeqNum, &eurexRetransmitRequestPacket::resetApplEndSeqNum> (d, ApplEndSeqNum, packet);
    eti::getInteger<uint16_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::setPartitionID, &eurexRetransmitRequestPacket::resetPartitionID> (d, PartitionID, packet);
    eti::getInteger<int8_t, eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::setRefApplID, &eurexRetransmitRequestPacket::resetRefApplID> (d, RefApplID, packet);
    eti::getString<eurexRetransmitRequestPacket, &eurexRetransmitRequestPacket::setPad5, &eurexRetransmitRequestPacket::resetPad5> (d, Pad5, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize RetransmitRequest");
}

void
eurexCodec::putRetransmitResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRetransmitResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<uint64_t, eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::setApplEndSeqNum, &eurexRetransmitResponsePacket::resetApplEndSeqNum> (d, ApplEndSeqNum, packet);
    eti::getInteger<uint64_t, eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::setRefApplLastSeqNum, &eurexRetransmitResponsePacket::resetRefApplLastSeqNum> (d, RefApplLastSeqNum, packet);
    eti::getInteger<uint16_t, eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::setApplTotalMessageCount, &eurexRetransmitResponsePacket::resetApplTotalMessageCount> (d, ApplTotalMessageCount, packet);
    eti::getString<eurexRetransmitResponsePacket, &eurexRetransmitResponsePacket::setPad6, &eurexRetransmitResponsePacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize RetransmitResponse");
}

void
eurexCodec::putRiskNotificationBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexRiskNotificationBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setTransactTime, &eurexRiskNotificationBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int32_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setTradeDate, &eurexRiskNotificationBroadcastPacket::resetTradeDate> (d, TradeDate, packet);
    eti::getInteger<uint32_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setPartyDetailIDExecutingUnit, &eurexRiskNotificationBroadcastPacket::resetPartyDetailIDExecutingUnit> (d, PartyDetailIDExecutingUnit, packet);
    eti::getInteger<uint32_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setRequestingPartyIDExecutingSystem, &eurexRiskNotificationBroadcastPacket::resetRequestingPartyIDExecutingSystem> (d, RequestingPartyIDExecutingSystem, packet);
    eti::getInteger<int16_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setMarketID, &eurexRiskNotificationBroadcastPacket::resetMarketID> (d, MarketID, packet);
    eti::getString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setListUpdateAction, &eurexRiskNotificationBroadcastPacket::resetListUpdateAction> (d, ListUpdateAction, packet);
    eti::getInteger<int8_t, eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setRiskLimitAction, &eurexRiskNotificationBroadcastPacket::resetRiskLimitAction> (d, RiskLimitAction, packet);
    eti::getString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setRequestingPartyEnteringFirm, &eurexRiskNotificationBroadcastPacket::resetRequestingPartyEnteringFirm> (d, RequestingPartyEnteringFirm, packet);
    eti::getString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setRequestingPartyClearingFirm, &eurexRiskNotificationBroadcastPacket::resetRequestingPartyClearingFirm> (d, RequestingPartyClearingFirm, packet);
    eti::getString<eurexRiskNotificationBroadcastPacket, &eurexRiskNotificationBroadcastPacket::setPad6, &eurexRiskNotificationBroadcastPacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize RiskNotificationBroadcast");
}

void
eurexCodec::putSRQSCreateDealNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSCreateDealNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setTransactTime, &eurexSRQSCreateDealNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setLastPx, &eurexSRQSCreateDealNotificationPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setLastQty, &eurexSRQSCreateDealNotificationPacket::resetLastQty> (d, LastQty, packet);
    eti::getInteger<uint64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setQuoteID, &eurexSRQSCreateDealNotificationPacket::resetQuoteID> (d, QuoteID, packet);
    eti::getInteger<int64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setSecurityID, &eurexSRQSCreateDealNotificationPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setExpireTime, &eurexSRQSCreateDealNotificationPacket::resetExpireTime> (d, ExpireTime, packet);
    eti::getDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setUnderlyingPx, &eurexSRQSCreateDealNotificationPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setUnderlyingDeltaPercentage, &eurexSRQSCreateDealNotificationPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setUnderlyingEffectiveDeltaPercentage, &eurexSRQSCreateDealNotificationPacket::resetUnderlyingEffectiveDeltaPercentage> (d, UnderlyingEffectiveDeltaPercentage, packet);
    eti::getDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setUnderlyingQty, &eurexSRQSCreateDealNotificationPacket::resetUnderlyingQty> (d, UnderlyingQty, packet);
    eti::getDouble<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setUnderlyingPriceStipValue, &eurexSRQSCreateDealNotificationPacket::resetUnderlyingPriceStipValue> (d, UnderlyingPriceStipValue, packet);
    eti::getInteger<uint32_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setNegotiationID, &eurexSRQSCreateDealNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setTradeID, &eurexSRQSCreateDealNotificationPacket::resetTradeID> (d, TradeID, packet);
    eti::getInteger<uint32_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setOrigTradeID, &eurexSRQSCreateDealNotificationPacket::resetOrigTradeID> (d, OrigTradeID, packet);
    eti::getInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setTrdRptStatus, &eurexSRQSCreateDealNotificationPacket::resetTrdRptStatus> (d, TrdRptStatus, packet);
    eti::getInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setTradeReportType, &eurexSRQSCreateDealNotificationPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setMessageEventSource, &eurexSRQSCreateDealNotificationPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setSide, &eurexSRQSCreateDealNotificationPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setNoOrderBookItems, &eurexSRQSCreateDealNotificationPacket::resetNoOrderBookItems> (d, NoOrderBookItems, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setRootPartyExecutingFirm, &eurexSRQSCreateDealNotificationPacket::resetRootPartyExecutingFirm> (d, RootPartyExecutingFirm, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setRootPartyExecutingTrader, &eurexSRQSCreateDealNotificationPacket::resetRootPartyExecutingTrader> (d, RootPartyExecutingTrader, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setRootPartyEnteringTrader, &eurexSRQSCreateDealNotificationPacket::resetRootPartyEnteringTrader> (d, RootPartyEnteringTrader, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setTargetPartyExecutingFirm, &eurexSRQSCreateDealNotificationPacket::resetTargetPartyExecutingFirm> (d, TargetPartyExecutingFirm, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setTargetPartyExecutingTrader, &eurexSRQSCreateDealNotificationPacket::resetTargetPartyExecutingTrader> (d, TargetPartyExecutingTrader, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setFirmTradeID, &eurexSRQSCreateDealNotificationPacket::resetFirmTradeID> (d, FirmTradeID, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setFirmNegotiationID, &eurexSRQSCreateDealNotificationPacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setFreeText1, &eurexSRQSCreateDealNotificationPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setFreeText5, &eurexSRQSCreateDealNotificationPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSCreateDealNotificationPacket, &eurexSRQSCreateDealNotificationPacket::setPad3, &eurexSRQSCreateDealNotificationPacket::resetPad3> (d, Pad3, packet);
    const cdrArray* vOrderBookItemGrp;
    bool bOrderBookItemGrp = d.getArray (OrderBookItemGrp, &vOrderBookItemGrp);
    for (size_t i = 0; bOrderBookItemGrp && i < vOrderBookItemGrp->size (); i++)
    {
        eurexOrderBookItemGrpCompPacket group;
        putOrderBookItemGrpComp ((*vOrderBookItemGrp)[i], group);
        packet.mOrderBookItemGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSCreateDealNotification");
}

void
eurexCodec::putSRQSDealNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSDealNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setTransactTime, &eurexSRQSDealNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setUnderlyingPriceStipValue, &eurexSRQSDealNotificationPacket::resetUnderlyingPriceStipValue> (d, UnderlyingPriceStipValue, packet);
    eti::getDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setUnderlyingPx, &eurexSRQSDealNotificationPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setLastPx, &eurexSRQSDealNotificationPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setLastQty, &eurexSRQSDealNotificationPacket::resetLastQty> (d, LastQty, packet);
    eti::getInteger<uint32_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setNegotiationID, &eurexSRQSDealNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setTradeID, &eurexSRQSDealNotificationPacket::resetTradeID> (d, TradeID, packet);
    eti::getInteger<int8_t, eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setTrdRptStatus, &eurexSRQSDealNotificationPacket::resetTrdRptStatus> (d, TrdRptStatus, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setMessageEventSource, &eurexSRQSDealNotificationPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setRootPartyExecutingFirm, &eurexSRQSDealNotificationPacket::resetRootPartyExecutingFirm> (d, RootPartyExecutingFirm, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setRootPartyExecutingTrader, &eurexSRQSDealNotificationPacket::resetRootPartyExecutingTrader> (d, RootPartyExecutingTrader, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setRootPartyEnteringTrader, &eurexSRQSDealNotificationPacket::resetRootPartyEnteringTrader> (d, RootPartyEnteringTrader, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setTargetPartyExecutingFirm, &eurexSRQSDealNotificationPacket::resetTargetPartyExecutingFirm> (d, TargetPartyExecutingFirm, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setTargetPartyExecutingTrader, &eurexSRQSDealNotificationPacket::resetTargetPartyExecutingTrader> (d, TargetPartyExecutingTrader, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setTargetPartyEnteringTrader, &eurexSRQSDealNotificationPacket::resetTargetPartyEnteringTrader> (d, TargetPartyEnteringTrader, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setFirmTradeID, &eurexSRQSDealNotificationPacket::resetFirmTradeID> (d, FirmTradeID, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setFirmNegotiationID, &eurexSRQSDealNotificationPacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSDealNotificationPacket, &eurexSRQSDealNotificationPacket::setFreeText5, &eurexSRQSDealNotificationPacket::resetFreeText5> (d, FreeText5, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSDealNotification");
}

void
eurexCodec::putSRQSDealResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSDealResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<int64_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setSecurityID, &eurexSRQSDealResponsePacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<uint64_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setQuoteID, &eurexSRQSDealResponsePacket::resetQuoteID> (d, QuoteID, packet);
    eti::getInteger<uint32_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setNegotiationID, &eurexSRQSDealResponsePacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setTradeID, &eurexSRQSDealResponsePacket::resetTradeID> (d, TradeID, packet);
    eti::getInteger<uint32_t, eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setSecondaryTradeID, &eurexSRQSDealResponsePacket::resetSecondaryTradeID> (d, SecondaryTradeID, packet);
    eti::getString<eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setFirmTradeID, &eurexSRQSDealResponsePacket::resetFirmTradeID> (d, FirmTradeID, packet);
    eti::getString<eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setFirmNegotiationID, &eurexSRQSDealResponsePacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSDealResponsePacket, &eurexSRQSDealResponsePacket::setPad4, &eurexSRQSDealResponsePacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSDealResponse");
}

void
eurexCodec::putSRQSEnterQuoteRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSEnterQuoteRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setBidPx, &eurexSRQSEnterQuoteRequestPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setOfferPx, &eurexSRQSEnterQuoteRequestPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setUnderlyingPx, &eurexSRQSEnterQuoteRequestPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setUnderlyingDeltaPercentage, &eurexSRQSEnterQuoteRequestPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setBidSize, &eurexSRQSEnterQuoteRequestPacket::resetBidSize> (d, BidSize, packet);
    eti::getDouble<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setOfferSize, &eurexSRQSEnterQuoteRequestPacket::resetOfferSize> (d, OfferSize, packet);
    eti::getInteger<int32_t, eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setMarketSegmentID, &eurexSRQSEnterQuoteRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setNegotiationID, &eurexSRQSEnterQuoteRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setValueCheckTypeQuantity, &eurexSRQSEnterQuoteRequestPacket::resetValueCheckTypeQuantity> (d, ValueCheckTypeQuantity, packet);
    eti::getString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setPartyExecutingFirm, &eurexSRQSEnterQuoteRequestPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setPartyExecutingTrader, &eurexSRQSEnterQuoteRequestPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setFreeText1, &eurexSRQSEnterQuoteRequestPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setFreeText5, &eurexSRQSEnterQuoteRequestPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSEnterQuoteRequestPacket, &eurexSRQSEnterQuoteRequestPacket::setPad4, &eurexSRQSEnterQuoteRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSEnterQuoteRequest");
}

void
eurexCodec::putSRQSHitQuoteRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSHitQuoteRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint64_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setQuoteID, &eurexSRQSHitQuoteRequestPacket::resetQuoteID> (d, QuoteID, packet);
    eti::getDouble<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setOrderQty, &eurexSRQSHitQuoteRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<uint64_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setValidUntilTime, &eurexSRQSHitQuoteRequestPacket::resetValidUntilTime> (d, ValidUntilTime, packet);
    eti::getDouble<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setUnderlyingQty, &eurexSRQSHitQuoteRequestPacket::resetUnderlyingQty> (d, UnderlyingQty, packet);
    eti::getDouble<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setUnderlyingPriceStipValue, &eurexSRQSHitQuoteRequestPacket::resetUnderlyingPriceStipValue> (d, UnderlyingPriceStipValue, packet);
    eti::getInteger<int32_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setMarketSegmentID, &eurexSRQSHitQuoteRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setNegotiationID, &eurexSRQSHitQuoteRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setSide, &eurexSRQSHitQuoteRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setValueCheckTypeQuantity, &eurexSRQSHitQuoteRequestPacket::resetValueCheckTypeQuantity> (d, ValueCheckTypeQuantity, packet);
    eti::getString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setPartyExecutingFirm, &eurexSRQSHitQuoteRequestPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setPartyExecutingTrader, &eurexSRQSHitQuoteRequestPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setFirmTradeID, &eurexSRQSHitQuoteRequestPacket::resetFirmTradeID> (d, FirmTradeID, packet);
    eti::getString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setFreeText1, &eurexSRQSHitQuoteRequestPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setFreeText5, &eurexSRQSHitQuoteRequestPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSHitQuoteRequestPacket, &eurexSRQSHitQuoteRequestPacket::setPad7, &eurexSRQSHitQuoteRequestPacket::resetPad7> (d, Pad7, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSHitQuoteRequest");
}

void
eurexCodec::putSRQSNegotiationNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSNegotiationNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setTransactTime, &eurexSRQSNegotiationNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setQuoteRefPrice, &eurexSRQSNegotiationNotificationPacket::resetQuoteRefPrice> (d, QuoteRefPrice, packet);
    eti::getDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setUnderlyingDeltaPercentage, &eurexSRQSNegotiationNotificationPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setBidPx, &eurexSRQSNegotiationNotificationPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setOfferPx, &eurexSRQSNegotiationNotificationPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setLastPx, &eurexSRQSNegotiationNotificationPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setLeavesQty, &eurexSRQSNegotiationNotificationPacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setLastQty, &eurexSRQSNegotiationNotificationPacket::resetLastQty> (d, LastQty, packet);
    eti::getInteger<uint32_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setNegotiationID, &eurexSRQSNegotiationNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setNumberOfRespondents, &eurexSRQSNegotiationNotificationPacket::resetNumberOfRespondents> (d, NumberOfRespondents, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setQuoteType, &eurexSRQSNegotiationNotificationPacket::resetQuoteType> (d, QuoteType, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setQuoteSubType, &eurexSRQSNegotiationNotificationPacket::resetQuoteSubType> (d, QuoteSubType, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setQuoteStatus, &eurexSRQSNegotiationNotificationPacket::resetQuoteStatus> (d, QuoteStatus, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setQuoteInstruction, &eurexSRQSNegotiationNotificationPacket::resetQuoteInstruction> (d, QuoteInstruction, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setSide, &eurexSRQSNegotiationNotificationPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setQuoteRefPriceSource, &eurexSRQSNegotiationNotificationPacket::resetQuoteRefPriceSource> (d, QuoteRefPriceSource, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setPartyExecutingFirm, &eurexSRQSNegotiationNotificationPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setPartyExecutingTrader, &eurexSRQSNegotiationNotificationPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setPartyEnteringTrader, &eurexSRQSNegotiationNotificationPacket::resetPartyEnteringTrader> (d, PartyEnteringTrader, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setTargetPartyExecutingFirm, &eurexSRQSNegotiationNotificationPacket::resetTargetPartyExecutingFirm> (d, TargetPartyExecutingFirm, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setTargetPartyExecutingTrader, &eurexSRQSNegotiationNotificationPacket::resetTargetPartyExecutingTrader> (d, TargetPartyExecutingTrader, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setFirmNegotiationID, &eurexSRQSNegotiationNotificationPacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setFreeText5, &eurexSRQSNegotiationNotificationPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSNegotiationNotificationPacket, &eurexSRQSNegotiationNotificationPacket::setPad6, &eurexSRQSNegotiationNotificationPacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSNegotiationNotification");
}

void
eurexCodec::putSRQSNegotiationRequesterNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSNegotiationRequesterNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setTransactTime, &eurexSRQSNegotiationRequesterNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint64_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setTrdRegTSExecutionTime, &eurexSRQSNegotiationRequesterNotificationPacket::resetTrdRegTSExecutionTime> (d, TrdRegTSExecutionTime, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setQuoteRefPrice, &eurexSRQSNegotiationRequesterNotificationPacket::resetQuoteRefPrice> (d, QuoteRefPrice, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setUnderlyingDeltaPercentage, &eurexSRQSNegotiationRequesterNotificationPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setBidPx, &eurexSRQSNegotiationRequesterNotificationPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setOfferPx, &eurexSRQSNegotiationRequesterNotificationPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setOrderQty, &eurexSRQSNegotiationRequesterNotificationPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setLastPx, &eurexSRQSNegotiationRequesterNotificationPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setLeavesQty, &eurexSRQSNegotiationRequesterNotificationPacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setLastQty, &eurexSRQSNegotiationRequesterNotificationPacket::resetLastQty> (d, LastQty, packet);
    eti::getInteger<uint32_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setNegotiationID, &eurexSRQSNegotiationRequesterNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setNumberOfRespondents, &eurexSRQSNegotiationRequesterNotificationPacket::resetNumberOfRespondents> (d, NumberOfRespondents, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setQuoteType, &eurexSRQSNegotiationRequesterNotificationPacket::resetQuoteType> (d, QuoteType, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setQuoteSubType, &eurexSRQSNegotiationRequesterNotificationPacket::resetQuoteSubType> (d, QuoteSubType, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setQuoteStatus, &eurexSRQSNegotiationRequesterNotificationPacket::resetQuoteStatus> (d, QuoteStatus, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setNoTargetPartyIDs, &eurexSRQSNegotiationRequesterNotificationPacket::resetNoTargetPartyIDs> (d, NoTargetPartyIDs, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setNumberOfRespDisclosureInstruction, &eurexSRQSNegotiationRequesterNotificationPacket::resetNumberOfRespDisclosureInstruction> (d, NumberOfRespDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setSide, &eurexSRQSNegotiationRequesterNotificationPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setQuoteRefPriceSource, &eurexSRQSNegotiationRequesterNotificationPacket::resetQuoteRefPriceSource> (d, QuoteRefPriceSource, packet);
    eti::getString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setPartyExecutingFirm, &eurexSRQSNegotiationRequesterNotificationPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setPartyExecutingTrader, &eurexSRQSNegotiationRequesterNotificationPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setPartyEnteringTrader, &eurexSRQSNegotiationRequesterNotificationPacket::resetPartyEnteringTrader> (d, PartyEnteringTrader, packet);
    eti::getString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setFirmNegotiationID, &eurexSRQSNegotiationRequesterNotificationPacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSNegotiationRequesterNotificationPacket, &eurexSRQSNegotiationRequesterNotificationPacket::setFreeText5, &eurexSRQSNegotiationRequesterNotificationPacket::resetFreeText5> (d, FreeText5, packet);
    const cdrArray* vTargetParties;
    bool bTargetParties = d.getArray (TargetParties, &vTargetParties);
    for (size_t i = 0; bTargetParties && i < vTargetParties->size (); i++)
    {
        eurexTargetPartiesCompPacket group;
        putTargetPartiesComp ((*vTargetParties)[i], group);
        packet.mTargetParties.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSNegotiationRequesterNotification");
}

void
eurexCodec::putSRQSNegotiationStatusNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSNegotiationStatusNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::setTransactTime, &eurexSRQSNegotiationStatusNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint32_t, eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::setNegotiationID, &eurexSRQSNegotiationStatusNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::setQuoteStatus, &eurexSRQSNegotiationStatusNotificationPacket::resetQuoteStatus> (d, QuoteStatus, packet);
    eti::getString<eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::setFirmNegotiationID, &eurexSRQSNegotiationStatusNotificationPacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSNegotiationStatusNotificationPacket, &eurexSRQSNegotiationStatusNotificationPacket::setPad7, &eurexSRQSNegotiationStatusNotificationPacket::resetPad7> (d, Pad7, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSNegotiationStatusNotification");
}

void
eurexCodec::putSRQSOpenNegotiationNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSOpenNegotiationNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setTransactTime, &eurexSRQSOpenNegotiationNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint64_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setNegotiationStartTime, &eurexSRQSOpenNegotiationNotificationPacket::resetNegotiationStartTime> (d, NegotiationStartTime, packet);
    eti::getInteger<int64_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setSecurityID, &eurexSRQSOpenNegotiationNotificationPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setBidPx, &eurexSRQSOpenNegotiationNotificationPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setOfferPx, &eurexSRQSOpenNegotiationNotificationPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setLeavesQty, &eurexSRQSOpenNegotiationNotificationPacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setLastQty, &eurexSRQSOpenNegotiationNotificationPacket::resetLastQty> (d, LastQty, packet);
    eti::getDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setLastPx, &eurexSRQSOpenNegotiationNotificationPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setQuoteRefPrice, &eurexSRQSOpenNegotiationNotificationPacket::resetQuoteRefPrice> (d, QuoteRefPrice, packet);
    eti::getDouble<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setUnderlyingDeltaPercentage, &eurexSRQSOpenNegotiationNotificationPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getInteger<uint32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setNegotiationID, &eurexSRQSOpenNegotiationNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setMarketSegmentID, &eurexSRQSOpenNegotiationNotificationPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setSecuritySubType, &eurexSRQSOpenNegotiationNotificationPacket::resetSecuritySubType> (d, SecuritySubType, packet);
    eti::getInteger<uint32_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setNumberOfRespondents, &eurexSRQSOpenNegotiationNotificationPacket::resetNumberOfRespondents> (d, NumberOfRespondents, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setQuoteType, &eurexSRQSOpenNegotiationNotificationPacket::resetQuoteType> (d, QuoteType, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setQuoteSubType, &eurexSRQSOpenNegotiationNotificationPacket::resetQuoteSubType> (d, QuoteSubType, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setQuoteStatus, &eurexSRQSOpenNegotiationNotificationPacket::resetQuoteStatus> (d, QuoteStatus, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setNoLegs, &eurexSRQSOpenNegotiationNotificationPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setSide, &eurexSRQSOpenNegotiationNotificationPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setQuoteRefPriceSource, &eurexSRQSOpenNegotiationNotificationPacket::resetQuoteRefPriceSource> (d, QuoteRefPriceSource, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setTradeUnderlying, &eurexSRQSOpenNegotiationNotificationPacket::resetTradeUnderlying> (d, TradeUnderlying, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setProductComplex, &eurexSRQSOpenNegotiationNotificationPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setNegotiateUnderlying, &eurexSRQSOpenNegotiationNotificationPacket::resetNegotiateUnderlying> (d, NegotiateUnderlying, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setPartyExecutingFirm, &eurexSRQSOpenNegotiationNotificationPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setPartyExecutingTrader, &eurexSRQSOpenNegotiationNotificationPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setPartyEnteringTrader, &eurexSRQSOpenNegotiationNotificationPacket::resetPartyEnteringTrader> (d, PartyEnteringTrader, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setTargetPartyExecutingFirm, &eurexSRQSOpenNegotiationNotificationPacket::resetTargetPartyExecutingFirm> (d, TargetPartyExecutingFirm, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setTargetPartyExecutingTrader, &eurexSRQSOpenNegotiationNotificationPacket::resetTargetPartyExecutingTrader> (d, TargetPartyExecutingTrader, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setFirmNegotiationID, &eurexSRQSOpenNegotiationNotificationPacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setFreeText5, &eurexSRQSOpenNegotiationNotificationPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSOpenNegotiationNotificationPacket, &eurexSRQSOpenNegotiationNotificationPacket::setPad3, &eurexSRQSOpenNegotiationNotificationPacket::resetPad3> (d, Pad3, packet);
    const cdrArray* vQuotReqLegsGrp;
    bool bQuotReqLegsGrp = d.getArray (QuotReqLegsGrp, &vQuotReqLegsGrp);
    for (size_t i = 0; bQuotReqLegsGrp && i < vQuotReqLegsGrp->size (); i++)
    {
        eurexQuotReqLegsGrpCompPacket group;
        putQuotReqLegsGrpComp ((*vQuotReqLegsGrp)[i], group);
        packet.mQuotReqLegsGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSOpenNegotiationNotification");
}

void
eurexCodec::putSRQSOpenNegotiationRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSOpenNegotiationRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setSecurityID, &eurexSRQSOpenNegotiationRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setBidPx, &eurexSRQSOpenNegotiationRequestPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setOfferPx, &eurexSRQSOpenNegotiationRequestPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setOrderQty, &eurexSRQSOpenNegotiationRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setQuoteRefPrice, &eurexSRQSOpenNegotiationRequestPacket::resetQuoteRefPrice> (d, QuoteRefPrice, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setUnderlyingDeltaPercentage, &eurexSRQSOpenNegotiationRequestPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getInteger<int32_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setMarketSegmentID, &eurexSRQSOpenNegotiationRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setSecuritySubType, &eurexSRQSOpenNegotiationRequestPacket::resetSecuritySubType> (d, SecuritySubType, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setQuoteType, &eurexSRQSOpenNegotiationRequestPacket::resetQuoteType> (d, QuoteType, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setQuoteSubType, &eurexSRQSOpenNegotiationRequestPacket::resetQuoteSubType> (d, QuoteSubType, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setNoLegs, &eurexSRQSOpenNegotiationRequestPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setNoTargetPartyIDs, &eurexSRQSOpenNegotiationRequestPacket::resetNoTargetPartyIDs> (d, NoTargetPartyIDs, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setNumberOfRespDisclosureInstruction, &eurexSRQSOpenNegotiationRequestPacket::resetNumberOfRespDisclosureInstruction> (d, NumberOfRespDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setSide, &eurexSRQSOpenNegotiationRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setQuoteRefPriceSource, &eurexSRQSOpenNegotiationRequestPacket::resetQuoteRefPriceSource> (d, QuoteRefPriceSource, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setTradeUnderlying, &eurexSRQSOpenNegotiationRequestPacket::resetTradeUnderlying> (d, TradeUnderlying, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setNegotiateUnderlying, &eurexSRQSOpenNegotiationRequestPacket::resetNegotiateUnderlying> (d, NegotiateUnderlying, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setProductComplex, &eurexSRQSOpenNegotiationRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setPartyExecutingFirm, &eurexSRQSOpenNegotiationRequestPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setPartyExecutingTrader, &eurexSRQSOpenNegotiationRequestPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setFreeText5, &eurexSRQSOpenNegotiationRequestPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setQuoteReqID, &eurexSRQSOpenNegotiationRequestPacket::resetQuoteReqID> (d, QuoteReqID, packet);
    eti::getString<eurexSRQSOpenNegotiationRequestPacket, &eurexSRQSOpenNegotiationRequestPacket::setPad3, &eurexSRQSOpenNegotiationRequestPacket::resetPad3> (d, Pad3, packet);
    const cdrArray* vQuotReqLegsGrp;
    bool bQuotReqLegsGrp = d.getArray (QuotReqLegsGrp, &vQuotReqLegsGrp);
    for (size_t i = 0; bQuotReqLegsGrp && i < vQuotReqLegsGrp->size (); i++)
    {
        eurexQuotReqLegsGrpCompPacket group;
        putQuotReqLegsGrpComp ((*vQuotReqLegsGrp)[i], group);
        packet.mQuotReqLegsGrp.push_back (group);
    }
    const cdrArray* vTargetParties;
    bool bTargetParties = d.getArray (TargetParties, &vTargetParties);
    for (size_t i = 0; bTargetParties && i < vTargetParties->size (); i++)
    {
        eurexTargetPartiesCompPacket group;
        putTargetPartiesComp ((*vTargetParties)[i], group);
        packet.mTargetParties.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSOpenNegotiationRequest");
}

void
eurexCodec::putSRQSOpenNegotiationRequesterNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSOpenNegotiationRequesterNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setTransactTime, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int64_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setSecurityID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setBidPx, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setOfferPx, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setOrderQty, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setLastPx, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setLastQty, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetLastQty> (d, LastQty, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setQuoteRefPrice, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetQuoteRefPrice> (d, QuoteRefPrice, packet);
    eti::getDouble<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setUnderlyingDeltaPercentage, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getInteger<uint32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setNegotiationID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setMarketSegmentID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setSecuritySubType, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetSecuritySubType> (d, SecuritySubType, packet);
    eti::getInteger<uint32_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setNumberOfRespondents, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetNumberOfRespondents> (d, NumberOfRespondents, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setQuoteType, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetQuoteType> (d, QuoteType, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setQuoteSubType, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetQuoteSubType> (d, QuoteSubType, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setQuoteStatus, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetQuoteStatus> (d, QuoteStatus, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setNoLegs, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setNoTargetPartyIDs, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetNoTargetPartyIDs> (d, NoTargetPartyIDs, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setSide, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setQuoteRefPriceSource, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetQuoteRefPriceSource> (d, QuoteRefPriceSource, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setTradeUnderlying, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetTradeUnderlying> (d, TradeUnderlying, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setNegotiateUnderlying, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetNegotiateUnderlying> (d, NegotiateUnderlying, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setProductComplex, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setNumberOfRespDisclosureInstruction, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetNumberOfRespDisclosureInstruction> (d, NumberOfRespDisclosureInstruction, packet);
    eti::getString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setPartyExecutingFirm, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setPartyExecutingTrader, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setPartyEnteringTrader, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetPartyEnteringTrader> (d, PartyEnteringTrader, packet);
    eti::getString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setFirmNegotiationID, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetFirmNegotiationID> (d, FirmNegotiationID, packet);
    eti::getString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setFreeText5, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSOpenNegotiationRequesterNotificationPacket, &eurexSRQSOpenNegotiationRequesterNotificationPacket::setPad4, &eurexSRQSOpenNegotiationRequesterNotificationPacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vQuotReqLegsGrp;
    bool bQuotReqLegsGrp = d.getArray (QuotReqLegsGrp, &vQuotReqLegsGrp);
    for (size_t i = 0; bQuotReqLegsGrp && i < vQuotReqLegsGrp->size (); i++)
    {
        eurexQuotReqLegsGrpCompPacket group;
        putQuotReqLegsGrpComp ((*vQuotReqLegsGrp)[i], group);
        packet.mQuotReqLegsGrp.push_back (group);
    }
    const cdrArray* vTargetParties;
    bool bTargetParties = d.getArray (TargetParties, &vTargetParties);
    for (size_t i = 0; bTargetParties && i < vTargetParties->size (); i++)
    {
        eurexTargetPartiesCompPacket group;
        putTargetPartiesComp ((*vTargetParties)[i], group);
        packet.mTargetParties.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSOpenNegotiationRequesterNotification");
}

void
eurexCodec::putSRQSQuoteNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSQuoteNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setTransactTime, &eurexSRQSQuoteNotificationPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint64_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setQuoteID, &eurexSRQSQuoteNotificationPacket::resetQuoteID> (d, QuoteID, packet);
    eti::getInteger<uint64_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setSecondaryQuoteID, &eurexSRQSQuoteNotificationPacket::resetSecondaryQuoteID> (d, SecondaryQuoteID, packet);
    eti::getDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setBidPx, &eurexSRQSQuoteNotificationPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setBidSize, &eurexSRQSQuoteNotificationPacket::resetBidSize> (d, BidSize, packet);
    eti::getDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setOfferPx, &eurexSRQSQuoteNotificationPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setOfferSize, &eurexSRQSQuoteNotificationPacket::resetOfferSize> (d, OfferSize, packet);
    eti::getDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setUnderlyingPx, &eurexSRQSQuoteNotificationPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setUnderlyingDeltaPercentage, &eurexSRQSQuoteNotificationPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getInteger<uint32_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setNegotiationID, &eurexSRQSQuoteNotificationPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setQuotingStatus, &eurexSRQSQuoteNotificationPacket::resetQuotingStatus> (d, QuotingStatus, packet);
    eti::getString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setPartyExecutingFirm, &eurexSRQSQuoteNotificationPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setPartyExecutingTrader, &eurexSRQSQuoteNotificationPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setPartyEnteringTrader, &eurexSRQSQuoteNotificationPacket::resetPartyEnteringTrader> (d, PartyEnteringTrader, packet);
    eti::getString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setQuoteReqID, &eurexSRQSQuoteNotificationPacket::resetQuoteReqID> (d, QuoteReqID, packet);
    eti::getString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setFreeText1, &eurexSRQSQuoteNotificationPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setFreeText5, &eurexSRQSQuoteNotificationPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSQuoteNotificationPacket, &eurexSRQSQuoteNotificationPacket::setPad6, &eurexSRQSQuoteNotificationPacket::resetPad6> (d, Pad6, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSQuoteNotification");
}

void
eurexCodec::putSRQSQuoteResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSQuoteResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<uint64_t, eurexSRQSQuoteResponsePacket, &eurexSRQSQuoteResponsePacket::setQuoteID, &eurexSRQSQuoteResponsePacket::resetQuoteID> (d, QuoteID, packet);
    eti::getInteger<uint32_t, eurexSRQSQuoteResponsePacket, &eurexSRQSQuoteResponsePacket::setNegotiationID, &eurexSRQSQuoteResponsePacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getString<eurexSRQSQuoteResponsePacket, &eurexSRQSQuoteResponsePacket::setQuoteReqID, &eurexSRQSQuoteResponsePacket::resetQuoteReqID> (d, QuoteReqID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSQuoteResponse");
}

void
eurexCodec::putSRQSQuotingStatusRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSQuotingStatusRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::setMarketSegmentID, &eurexSRQSQuotingStatusRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::setNegotiationID, &eurexSRQSQuotingStatusRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::setQuotingStatus, &eurexSRQSQuotingStatusRequestPacket::resetQuotingStatus> (d, QuotingStatus, packet);
    eti::getString<eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::setPartyExecutingFirm, &eurexSRQSQuotingStatusRequestPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::setPartyExecutingTrader, &eurexSRQSQuotingStatusRequestPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSQuotingStatusRequestPacket, &eurexSRQSQuotingStatusRequestPacket::setFreeText5, &eurexSRQSQuotingStatusRequestPacket::resetFreeText5> (d, FreeText5, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSQuotingStatusRequest");
}

void
eurexCodec::putSRQSStatusBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSStatusBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int32_t, eurexSRQSStatusBroadcastPacket, &eurexSRQSStatusBroadcastPacket::setTradeDate, &eurexSRQSStatusBroadcastPacket::resetTradeDate> (d, TradeDate, packet);
    eti::getInteger<int8_t, eurexSRQSStatusBroadcastPacket, &eurexSRQSStatusBroadcastPacket::setTradSesEvent, &eurexSRQSStatusBroadcastPacket::resetTradSesEvent> (d, TradSesEvent, packet);
    eti::getString<eurexSRQSStatusBroadcastPacket, &eurexSRQSStatusBroadcastPacket::setPad3, &eurexSRQSStatusBroadcastPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSStatusBroadcast");
}

void
eurexCodec::putSRQSUpdateDealStatusRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSUpdateDealStatusRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getDouble<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setUnderlyingPriceStipValue, &eurexSRQSUpdateDealStatusRequestPacket::resetUnderlyingPriceStipValue> (d, UnderlyingPriceStipValue, packet);
    eti::getDouble<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setUnderlyingPx, &eurexSRQSUpdateDealStatusRequestPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setLastQty, &eurexSRQSUpdateDealStatusRequestPacket::resetLastQty> (d, LastQty, packet);
    eti::getInteger<int32_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setMarketSegmentID, &eurexSRQSUpdateDealStatusRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setNegotiationID, &eurexSRQSUpdateDealStatusRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<uint32_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setTradeID, &eurexSRQSUpdateDealStatusRequestPacket::resetTradeID> (d, TradeID, packet);
    eti::getInteger<int8_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setTradeReportType, &eurexSRQSUpdateDealStatusRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setTrdRptStatus, &eurexSRQSUpdateDealStatusRequestPacket::resetTrdRptStatus> (d, TrdRptStatus, packet);
    eti::getString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setPartyExecutingFirm, &eurexSRQSUpdateDealStatusRequestPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setPartyExecutingTrader, &eurexSRQSUpdateDealStatusRequestPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setFreeText5, &eurexSRQSUpdateDealStatusRequestPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSUpdateDealStatusRequestPacket, &eurexSRQSUpdateDealStatusRequestPacket::setPad3, &eurexSRQSUpdateDealStatusRequestPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSUpdateDealStatusRequest");
}

void
eurexCodec::putSRQSUpdateNegotiationRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSRQSUpdateNegotiationRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setQuoteRefPrice, &eurexSRQSUpdateNegotiationRequestPacket::resetQuoteRefPrice> (d, QuoteRefPrice, packet);
    eti::getDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setUnderlyingDeltaPercentage, &eurexSRQSUpdateNegotiationRequestPacket::resetUnderlyingDeltaPercentage> (d, UnderlyingDeltaPercentage, packet);
    eti::getDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setBidPx, &eurexSRQSUpdateNegotiationRequestPacket::resetBidPx> (d, BidPx, packet);
    eti::getDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setOfferPx, &eurexSRQSUpdateNegotiationRequestPacket::resetOfferPx> (d, OfferPx, packet);
    eti::getDouble<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setOrderQty, &eurexSRQSUpdateNegotiationRequestPacket::resetOrderQty> (d, OrderQty, packet);
    eti::getInteger<int32_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setMarketSegmentID, &eurexSRQSUpdateNegotiationRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setNegotiationID, &eurexSRQSUpdateNegotiationRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setNoTargetPartyIDs, &eurexSRQSUpdateNegotiationRequestPacket::resetNoTargetPartyIDs> (d, NoTargetPartyIDs, packet);
    eti::getInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setNumberOfRespDisclosureInstruction, &eurexSRQSUpdateNegotiationRequestPacket::resetNumberOfRespDisclosureInstruction> (d, NumberOfRespDisclosureInstruction, packet);
    eti::getInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setSide, &eurexSRQSUpdateNegotiationRequestPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setQuoteCancelType, &eurexSRQSUpdateNegotiationRequestPacket::resetQuoteCancelType> (d, QuoteCancelType, packet);
    eti::getInteger<int8_t, eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setQuoteRefPriceSource, &eurexSRQSUpdateNegotiationRequestPacket::resetQuoteRefPriceSource> (d, QuoteRefPriceSource, packet);
    eti::getString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setPartyExecutingFirm, &eurexSRQSUpdateNegotiationRequestPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setPartyExecutingTrader, &eurexSRQSUpdateNegotiationRequestPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setFreeText5, &eurexSRQSUpdateNegotiationRequestPacket::resetFreeText5> (d, FreeText5, packet);
    eti::getString<eurexSRQSUpdateNegotiationRequestPacket, &eurexSRQSUpdateNegotiationRequestPacket::setPad4, &eurexSRQSUpdateNegotiationRequestPacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vTargetParties;
    bool bTargetParties = d.getArray (TargetParties, &vTargetParties);
    for (size_t i = 0; bTargetParties && i < vTargetParties->size (); i++)
    {
        eurexTargetPartiesCompPacket group;
        putTargetPartiesComp ((*vTargetParties)[i], group);
        packet.mTargetParties.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SRQSUpdateNegotiationRequest");
}

void
eurexCodec::putServiceAvailabilityBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexServiceAvailabilityBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRBCHeaderComp (d, packet.mNRBCHeader);
    eti::getInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setMatchingEngineTradeDate, &eurexServiceAvailabilityBroadcastPacket::resetMatchingEngineTradeDate> (d, MatchingEngineTradeDate, packet);
    eti::getInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setTradeManagerTradeDate, &eurexServiceAvailabilityBroadcastPacket::resetTradeManagerTradeDate> (d, TradeManagerTradeDate, packet);
    eti::getInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setApplSeqTradeDate, &eurexServiceAvailabilityBroadcastPacket::resetApplSeqTradeDate> (d, ApplSeqTradeDate, packet);
    eti::getInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setT7EntryServiceTradeDate, &eurexServiceAvailabilityBroadcastPacket::resetT7EntryServiceTradeDate> (d, T7EntryServiceTradeDate, packet);
    eti::getInteger<int32_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setT7EntryServiceRtmTradeDate, &eurexServiceAvailabilityBroadcastPacket::resetT7EntryServiceRtmTradeDate> (d, T7EntryServiceRtmTradeDate, packet);
    eti::getInteger<uint16_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setPartitionID, &eurexServiceAvailabilityBroadcastPacket::resetPartitionID> (d, PartitionID, packet);
    eti::getInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setMatchingEngineStatus, &eurexServiceAvailabilityBroadcastPacket::resetMatchingEngineStatus> (d, MatchingEngineStatus, packet);
    eti::getInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setTradeManagerStatus, &eurexServiceAvailabilityBroadcastPacket::resetTradeManagerStatus> (d, TradeManagerStatus, packet);
    eti::getInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setApplSeqStatus, &eurexServiceAvailabilityBroadcastPacket::resetApplSeqStatus> (d, ApplSeqStatus, packet);
    eti::getInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setT7EntryServiceStatus, &eurexServiceAvailabilityBroadcastPacket::resetT7EntryServiceStatus> (d, T7EntryServiceStatus, packet);
    eti::getInteger<int8_t, eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setT7EntryServiceRtmStatus, &eurexServiceAvailabilityBroadcastPacket::resetT7EntryServiceRtmStatus> (d, T7EntryServiceRtmStatus, packet);
    eti::getString<eurexServiceAvailabilityBroadcastPacket, &eurexServiceAvailabilityBroadcastPacket::setPad5, &eurexServiceAvailabilityBroadcastPacket::resetPad5> (d, Pad5, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ServiceAvailabilityBroadcast");
}

void
eurexCodec::putServiceAvailabilityMarketBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexServiceAvailabilityMarketBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNRBCHeaderComp (d, packet.mNRBCHeader);
    eti::getInteger<int32_t, eurexServiceAvailabilityMarketBroadcastPacket, &eurexServiceAvailabilityMarketBroadcastPacket::setSelectiveRequestForQuoteServiceTradeDate, &eurexServiceAvailabilityMarketBroadcastPacket::resetSelectiveRequestForQuoteServiceTradeDate> (d, SelectiveRequestForQuoteServiceTradeDate, packet);
    eti::getInteger<int8_t, eurexServiceAvailabilityMarketBroadcastPacket, &eurexServiceAvailabilityMarketBroadcastPacket::setSelectiveRequestForQuoteServiceStatus, &eurexServiceAvailabilityMarketBroadcastPacket::resetSelectiveRequestForQuoteServiceStatus> (d, SelectiveRequestForQuoteServiceStatus, packet);
    eti::getString<eurexServiceAvailabilityMarketBroadcastPacket, &eurexServiceAvailabilityMarketBroadcastPacket::setPad3, &eurexServiceAvailabilityMarketBroadcastPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ServiceAvailabilityMarketBroadcast");
}

void
eurexCodec::putSubscribeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSubscribeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint32_t, eurexSubscribeRequestPacket, &eurexSubscribeRequestPacket::setSubscriptionScope, &eurexSubscribeRequestPacket::resetSubscriptionScope> (d, SubscriptionScope, packet);
    eti::getInteger<int8_t, eurexSubscribeRequestPacket, &eurexSubscribeRequestPacket::setRefApplID, &eurexSubscribeRequestPacket::resetRefApplID> (d, RefApplID, packet);
    eti::getString<eurexSubscribeRequestPacket, &eurexSubscribeRequestPacket::setPad3, &eurexSubscribeRequestPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SubscribeRequest");
}

void
eurexCodec::putSubscribeResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexSubscribeResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<uint32_t, eurexSubscribeResponsePacket, &eurexSubscribeResponsePacket::setApplSubID, &eurexSubscribeResponsePacket::resetApplSubID> (d, ApplSubID, packet);
    eti::getString<eurexSubscribeResponsePacket, &eurexSubscribeResponsePacket::setPad4, &eurexSubscribeResponsePacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize SubscribeResponse");
}

void
eurexCodec::putTESApproveBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESApproveBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int64_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setSecurityID, &eurexTESApproveBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setLastPx, &eurexTESApproveBroadcastPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setAllocQty, &eurexTESApproveBroadcastPacket::resetAllocQty> (d, AllocQty, packet);
    eti::getInteger<uint64_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTransactTime, &eurexTESApproveBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingPx, &eurexTESApproveBroadcastPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getInteger<uint64_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTransBkdTime, &eurexTESApproveBroadcastPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setRelatedClosePrice, &eurexTESApproveBroadcastPacket::resetRelatedClosePrice> (d, RelatedClosePrice, packet);
    eti::getDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setRelatedTradeQuantity, &eurexTESApproveBroadcastPacket::resetRelatedTradeQuantity> (d, RelatedTradeQuantity, packet);
    eti::getDouble<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingQty, &eurexTESApproveBroadcastPacket::resetUnderlyingQty> (d, UnderlyingQty, packet);
    eti::getInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setMarketSegmentID, &eurexTESApproveBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPackageID, &eurexTESApproveBroadcastPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTESExecID, &eurexTESApproveBroadcastPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setAllocID, &eurexTESApproveBroadcastPacket::resetAllocID> (d, AllocID, packet);
    eti::getInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingSettlementDate, &eurexTESApproveBroadcastPacket::resetUnderlyingSettlementDate> (d, UnderlyingSettlementDate, packet);
    eti::getInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingMaturityDate, &eurexTESApproveBroadcastPacket::resetUnderlyingMaturityDate> (d, UnderlyingMaturityDate, packet);
    eti::getInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setRelatedTradeID, &eurexTESApproveBroadcastPacket::resetRelatedTradeID> (d, RelatedTradeID, packet);
    eti::getInteger<int32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setRelatedMarketSegmentID, &eurexTESApproveBroadcastPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setNegotiationID, &eurexTESApproveBroadcastPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setNoSRQSRelatedTradeIDs, &eurexTESApproveBroadcastPacket::resetNoSRQSRelatedTradeIDs> (d, NoSRQSRelatedTradeIDs, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPad1, &eurexTESApproveBroadcastPacket::resetPad1> (d, Pad1, packet);
    eti::getInteger<int16_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTrdType, &eurexTESApproveBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setSide, &eurexTESApproveBroadcastPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTradePublishIndicator, &eurexTESApproveBroadcastPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setProductComplex, &eurexTESApproveBroadcastPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTradeReportType, &eurexTESApproveBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTradingCapacity, &eurexTESApproveBroadcastPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyIDSettlementLocation, &eurexTESApproveBroadcastPacket::resetPartyIDSettlementLocation> (d, PartyIDSettlementLocation, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTradeAllocStatus, &eurexTESApproveBroadcastPacket::resetTradeAllocStatus> (d, TradeAllocStatus, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setHedgeType, &eurexTESApproveBroadcastPacket::resetHedgeType> (d, HedgeType, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setNoLegs, &eurexTESApproveBroadcastPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setNoEvents, &eurexTESApproveBroadcastPacket::resetNoEvents> (d, NoEvents, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setNoInstrAttrib, &eurexTESApproveBroadcastPacket::resetNoInstrAttrib> (d, NoInstrAttrib, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setNoUnderlyingStips, &eurexTESApproveBroadcastPacket::resetNoUnderlyingStips> (d, NoUnderlyingStips, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setMessageEventSource, &eurexTESApproveBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setTradeReportID, &eurexTESApproveBroadcastPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyExecutingFirm, &eurexTESApproveBroadcastPacket::resetPartyExecutingFirm> (d, PartyExecutingFirm, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyExecutingTrader, &eurexTESApproveBroadcastPacket::resetPartyExecutingTrader> (d, PartyExecutingTrader, packet);
    eti::getInteger<int8_t, eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyIDEnteringFirm, &eurexTESApproveBroadcastPacket::resetPartyIDEnteringFirm> (d, PartyIDEnteringFirm, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyEnteringTrader, &eurexTESApproveBroadcastPacket::resetPartyEnteringTrader> (d, PartyEnteringTrader, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPositionEffect, &eurexTESApproveBroadcastPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setRootPartyExecutingFirm, &eurexTESApproveBroadcastPacket::resetRootPartyExecutingFirm> (d, RootPartyExecutingFirm, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setRootPartyExecutingTrader, &eurexTESApproveBroadcastPacket::resetRootPartyExecutingTrader> (d, RootPartyExecutingTrader, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setFreeText1, &eurexTESApproveBroadcastPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setFreeText2, &eurexTESApproveBroadcastPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setFreeText3, &eurexTESApproveBroadcastPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyIDTakeUpTradingFirm, &eurexTESApproveBroadcastPacket::resetPartyIDTakeUpTradingFirm> (d, PartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setAccount, &eurexTESApproveBroadcastPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyIDPositionAccount, &eurexTESApproveBroadcastPacket::resetPartyIDPositionAccount> (d, PartyIDPositionAccount, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyIDOrderOriginationFirm, &eurexTESApproveBroadcastPacket::resetPartyIDOrderOriginationFirm> (d, PartyIDOrderOriginationFirm, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyIDBeneficiary, &eurexTESApproveBroadcastPacket::resetPartyIDBeneficiary> (d, PartyIDBeneficiary, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPartyIDLocationID, &eurexTESApproveBroadcastPacket::resetPartyIDLocationID> (d, PartyIDLocationID, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setCustOrderHandlingInst, &eurexTESApproveBroadcastPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setComplianceText, &eurexTESApproveBroadcastPacket::resetComplianceText> (d, ComplianceText, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingSecurityID, &eurexTESApproveBroadcastPacket::resetUnderlyingSecurityID> (d, UnderlyingSecurityID, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingSecurityDesc, &eurexTESApproveBroadcastPacket::resetUnderlyingSecurityDesc> (d, UnderlyingSecurityDesc, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingCurrency, &eurexTESApproveBroadcastPacket::resetUnderlyingCurrency> (d, UnderlyingCurrency, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setUnderlyingIssuer, &eurexTESApproveBroadcastPacket::resetUnderlyingIssuer> (d, UnderlyingIssuer, packet);
    eti::getString<eurexTESApproveBroadcastPacket, &eurexTESApproveBroadcastPacket::setPad4, &eurexTESApproveBroadcastPacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vTrdInstrmntLegGrp;
    bool bTrdInstrmntLegGrp = d.getArray (TrdInstrmntLegGrp, &vTrdInstrmntLegGrp);
    for (size_t i = 0; bTrdInstrmntLegGrp && i < vTrdInstrmntLegGrp->size (); i++)
    {
        eurexTrdInstrmntLegGrpCompPacket group;
        putTrdInstrmntLegGrpComp ((*vTrdInstrmntLegGrp)[i], group);
        packet.mTrdInstrmntLegGrp.push_back (group);
    }
    const cdrArray* vInstrumentEventGrp;
    bool bInstrumentEventGrp = d.getArray (InstrumentEventGrp, &vInstrumentEventGrp);
    for (size_t i = 0; bInstrumentEventGrp && i < vInstrumentEventGrp->size (); i++)
    {
        eurexInstrumentEventGrpCompPacket group;
        putInstrumentEventGrpComp ((*vInstrumentEventGrp)[i], group);
        packet.mInstrumentEventGrp.push_back (group);
    }
    const cdrArray* vInstrumentAttributeGrp;
    bool bInstrumentAttributeGrp = d.getArray (InstrumentAttributeGrp, &vInstrumentAttributeGrp);
    for (size_t i = 0; bInstrumentAttributeGrp && i < vInstrumentAttributeGrp->size (); i++)
    {
        eurexInstrumentAttributeGrpCompPacket group;
        putInstrumentAttributeGrpComp ((*vInstrumentAttributeGrp)[i], group);
        packet.mInstrumentAttributeGrp.push_back (group);
    }
    putUnderlyingStipGrpComp (d, packet.mUnderlyingStipGrp);
    const cdrArray* vSRQSRelatedTradeIDGrp;
    bool bSRQSRelatedTradeIDGrp = d.getArray (SRQSRelatedTradeIDGrp, &vSRQSRelatedTradeIDGrp);
    for (size_t i = 0; bSRQSRelatedTradeIDGrp && i < vSRQSRelatedTradeIDGrp->size (); i++)
    {
        eurexSRQSRelatedTradeIDGrpCompPacket group;
        putSRQSRelatedTradeIDGrpComp ((*vSRQSRelatedTradeIDGrp)[i], group);
        packet.mSRQSRelatedTradeIDGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESApproveBroadcast");
}

void
eurexCodec::putTESBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int64_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setSecurityID, &eurexTESBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setLastPx, &eurexTESBroadcastPacket::resetLastPx> (d, LastPx, packet);
    eti::getInteger<uint64_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTransactTime, &eurexTESBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingPx, &eurexTESBroadcastPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getInteger<uint64_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTransBkdTime, &eurexTESBroadcastPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setRelatedClosePrice, &eurexTESBroadcastPacket::resetRelatedClosePrice> (d, RelatedClosePrice, packet);
    eti::getDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setRelatedTradeQuantity, &eurexTESBroadcastPacket::resetRelatedTradeQuantity> (d, RelatedTradeQuantity, packet);
    eti::getDouble<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingQty, &eurexTESBroadcastPacket::resetUnderlyingQty> (d, UnderlyingQty, packet);
    eti::getInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setMarketSegmentID, &eurexTESBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setPackageID, &eurexTESBroadcastPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTESExecID, &eurexTESBroadcastPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingSettlementDate, &eurexTESBroadcastPacket::resetUnderlyingSettlementDate> (d, UnderlyingSettlementDate, packet);
    eti::getInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingMaturityDate, &eurexTESBroadcastPacket::resetUnderlyingMaturityDate> (d, UnderlyingMaturityDate, packet);
    eti::getInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setRelatedTradeID, &eurexTESBroadcastPacket::resetRelatedTradeID> (d, RelatedTradeID, packet);
    eti::getInteger<int32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setRelatedMarketSegmentID, &eurexTESBroadcastPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setNegotiationID, &eurexTESBroadcastPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setNoSRQSRelatedTradeIDs, &eurexTESBroadcastPacket::resetNoSRQSRelatedTradeIDs> (d, NoSRQSRelatedTradeIDs, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setPad1, &eurexTESBroadcastPacket::resetPad1> (d, Pad1, packet);
    eti::getInteger<int16_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTrdType, &eurexTESBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTradeReportType, &eurexTESBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setProductComplex, &eurexTESBroadcastPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTradePublishIndicator, &eurexTESBroadcastPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setNoEvents, &eurexTESBroadcastPacket::resetNoEvents> (d, NoEvents, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setNoInstrAttrib, &eurexTESBroadcastPacket::resetNoInstrAttrib> (d, NoInstrAttrib, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setNoUnderlyingStips, &eurexTESBroadcastPacket::resetNoUnderlyingStips> (d, NoUnderlyingStips, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setNoSideAllocs, &eurexTESBroadcastPacket::resetNoSideAllocs> (d, NoSideAllocs, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setNoLegs, &eurexTESBroadcastPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setPartyIDSettlementLocation, &eurexTESBroadcastPacket::resetPartyIDSettlementLocation> (d, PartyIDSettlementLocation, packet);
    eti::getInteger<int8_t, eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setHedgeType, &eurexTESBroadcastPacket::resetHedgeType> (d, HedgeType, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setMessageEventSource, &eurexTESBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTradeReportText, &eurexTESBroadcastPacket::resetTradeReportText> (d, TradeReportText, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setTradeReportID, &eurexTESBroadcastPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setRootPartyExecutingFirm, &eurexTESBroadcastPacket::resetRootPartyExecutingFirm> (d, RootPartyExecutingFirm, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setRootPartyExecutingTrader, &eurexTESBroadcastPacket::resetRootPartyExecutingTrader> (d, RootPartyExecutingTrader, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingSecurityID, &eurexTESBroadcastPacket::resetUnderlyingSecurityID> (d, UnderlyingSecurityID, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingSecurityDesc, &eurexTESBroadcastPacket::resetUnderlyingSecurityDesc> (d, UnderlyingSecurityDesc, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingCurrency, &eurexTESBroadcastPacket::resetUnderlyingCurrency> (d, UnderlyingCurrency, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setUnderlyingIssuer, &eurexTESBroadcastPacket::resetUnderlyingIssuer> (d, UnderlyingIssuer, packet);
    eti::getString<eurexTESBroadcastPacket, &eurexTESBroadcastPacket::setPad3, &eurexTESBroadcastPacket::resetPad3> (d, Pad3, packet);
    const cdrArray* vSideAllocGrpBC;
    bool bSideAllocGrpBC = d.getArray (SideAllocGrpBC, &vSideAllocGrpBC);
    for (size_t i = 0; bSideAllocGrpBC && i < vSideAllocGrpBC->size (); i++)
    {
        eurexSideAllocGrpBCCompPacket group;
        putSideAllocGrpBCComp ((*vSideAllocGrpBC)[i], group);
        packet.mSideAllocGrpBC.push_back (group);
    }
    const cdrArray* vTrdInstrmntLegGrp;
    bool bTrdInstrmntLegGrp = d.getArray (TrdInstrmntLegGrp, &vTrdInstrmntLegGrp);
    for (size_t i = 0; bTrdInstrmntLegGrp && i < vTrdInstrmntLegGrp->size (); i++)
    {
        eurexTrdInstrmntLegGrpCompPacket group;
        putTrdInstrmntLegGrpComp ((*vTrdInstrmntLegGrp)[i], group);
        packet.mTrdInstrmntLegGrp.push_back (group);
    }
    const cdrArray* vInstrumentEventGrp;
    bool bInstrumentEventGrp = d.getArray (InstrumentEventGrp, &vInstrumentEventGrp);
    for (size_t i = 0; bInstrumentEventGrp && i < vInstrumentEventGrp->size (); i++)
    {
        eurexInstrumentEventGrpCompPacket group;
        putInstrumentEventGrpComp ((*vInstrumentEventGrp)[i], group);
        packet.mInstrumentEventGrp.push_back (group);
    }
    const cdrArray* vInstrumentAttributeGrp;
    bool bInstrumentAttributeGrp = d.getArray (InstrumentAttributeGrp, &vInstrumentAttributeGrp);
    for (size_t i = 0; bInstrumentAttributeGrp && i < vInstrumentAttributeGrp->size (); i++)
    {
        eurexInstrumentAttributeGrpCompPacket group;
        putInstrumentAttributeGrpComp ((*vInstrumentAttributeGrp)[i], group);
        packet.mInstrumentAttributeGrp.push_back (group);
    }
    putUnderlyingStipGrpComp (d, packet.mUnderlyingStipGrp);
    const cdrArray* vSRQSRelatedTradeIDGrp;
    bool bSRQSRelatedTradeIDGrp = d.getArray (SRQSRelatedTradeIDGrp, &vSRQSRelatedTradeIDGrp);
    for (size_t i = 0; bSRQSRelatedTradeIDGrp && i < vSRQSRelatedTradeIDGrp->size (); i++)
    {
        eurexSRQSRelatedTradeIDGrpCompPacket group;
        putSRQSRelatedTradeIDGrpComp ((*vSRQSRelatedTradeIDGrp)[i], group);
        packet.mSRQSRelatedTradeIDGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESBroadcast");
}

void
eurexCodec::putTESDeleteBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESDeleteBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setTransactTime, &eurexTESDeleteBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int32_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setMarketSegmentID, &eurexTESDeleteBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setPackageID, &eurexTESDeleteBroadcastPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<uint32_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setTESExecID, &eurexTESDeleteBroadcastPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<int16_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setTrdType, &eurexTESDeleteBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setDeleteReason, &eurexTESDeleteBroadcastPacket::resetDeleteReason> (d, DeleteReason, packet);
    eti::getInteger<int8_t, eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setTradeReportType, &eurexTESDeleteBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getString<eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setMessageEventSource, &eurexTESDeleteBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setTradeReportID, &eurexTESDeleteBroadcastPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexTESDeleteBroadcastPacket, &eurexTESDeleteBroadcastPacket::setPad3, &eurexTESDeleteBroadcastPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESDeleteBroadcast");
}

void
eurexCodec::putTESExecutionBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESExecutionBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<uint64_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setTransactTime, &eurexTESExecutionBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setMarketSegmentID, &eurexTESExecutionBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setPackageID, &eurexTESExecutionBroadcastPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<uint32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setTESExecID, &eurexTESExecutionBroadcastPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<uint32_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setAllocID, &eurexTESExecutionBroadcastPacket::resetAllocID> (d, AllocID, packet);
    eti::getInteger<int16_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setTrdType, &eurexTESExecutionBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setTradeReportType, &eurexTESExecutionBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setSide, &eurexTESExecutionBroadcastPacket::resetSide> (d, Side, packet);
    eti::getString<eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setMessageEventSource, &eurexTESExecutionBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexTESExecutionBroadcastPacket, &eurexTESExecutionBroadcastPacket::setPad3, &eurexTESExecutionBroadcastPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESExecutionBroadcast");
}

void
eurexCodec::putTESResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    eti::getInteger<uint32_t, eurexTESResponsePacket, &eurexTESResponsePacket::setTESExecID, &eurexTESResponsePacket::resetTESExecID> (d, TESExecID, packet);
    eti::getString<eurexTESResponsePacket, &eurexTESResponsePacket::setTradeReportID, &eurexTESResponsePacket::resetTradeReportID> (d, TradeReportID, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESResponse");
}

void
eurexCodec::putTESTradeBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESTradeBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setSecurityID, &eurexTESTradeBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setLastPx, &eurexTESTradeBroadcastPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setLastQty, &eurexTESTradeBroadcastPacket::resetLastQty> (d, LastQty, packet);
    eti::getDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setClearingTradePrice, &eurexTESTradeBroadcastPacket::resetClearingTradePrice> (d, ClearingTradePrice, packet);
    eti::getDouble<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setClearingTradeQty, &eurexTESTradeBroadcastPacket::resetClearingTradeQty> (d, ClearingTradeQty, packet);
    eti::getInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTransactTime, &eurexTESTradeBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<int64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRelatedSecurityID, &eurexTESTradeBroadcastPacket::resetRelatedSecurityID> (d, RelatedSecurityID, packet);
    eti::getInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDClientID, &eurexTESTradeBroadcastPacket::resetRootPartyIDClientID> (d, RootPartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setExecutingTrader, &eurexTESTradeBroadcastPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDInvestmentDecisionMaker, &eurexTESTradeBroadcastPacket::resetRootPartyIDInvestmentDecisionMaker> (d, RootPartyIDInvestmentDecisionMaker, packet);
    eti::getInteger<uint64_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setBasketTrdMatchID, &eurexTESTradeBroadcastPacket::resetBasketTrdMatchID> (d, BasketTrdMatchID, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setPackageID, &eurexTESTradeBroadcastPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setMarketSegmentID, &eurexTESTradeBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTradeID, &eurexTESTradeBroadcastPacket::resetTradeID> (d, TradeID, packet);
    eti::getInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTradeDate, &eurexTESTradeBroadcastPacket::resetTradeDate> (d, TradeDate, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setSideTradeID, &eurexTESTradeBroadcastPacket::resetSideTradeID> (d, SideTradeID, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDSessionID, &eurexTESTradeBroadcastPacket::resetRootPartyIDSessionID> (d, RootPartyIDSessionID, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setOrigTradeID, &eurexTESTradeBroadcastPacket::resetOrigTradeID> (d, OrigTradeID, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDExecutingUnit, &eurexTESTradeBroadcastPacket::resetRootPartyIDExecutingUnit> (d, RootPartyIDExecutingUnit, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDExecutingTrader, &eurexTESTradeBroadcastPacket::resetRootPartyIDExecutingTrader> (d, RootPartyIDExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDClearingUnit, &eurexTESTradeBroadcastPacket::resetRootPartyIDClearingUnit> (d, RootPartyIDClearingUnit, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setStrategyLinkID, &eurexTESTradeBroadcastPacket::resetStrategyLinkID> (d, StrategyLinkID, packet);
    eti::getInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRelatedSymbol, &eurexTESTradeBroadcastPacket::resetRelatedSymbol> (d, RelatedSymbol, packet);
    eti::getInteger<int32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTotNumTradeReports, &eurexTESTradeBroadcastPacket::resetTotNumTradeReports> (d, TotNumTradeReports, packet);
    eti::getInteger<uint32_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setNegotiationID, &eurexTESTradeBroadcastPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setNoSRQSRelatedTradeIDs, &eurexTESTradeBroadcastPacket::resetNoSRQSRelatedTradeIDs> (d, NoSRQSRelatedTradeIDs, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setPad1, &eurexTESTradeBroadcastPacket::resetPad1> (d, Pad1, packet);
    eti::getInteger<int16_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTrdType, &eurexTESTradeBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setProductComplex, &eurexTESTradeBroadcastPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRelatedProductComplex, &eurexTESTradeBroadcastPacket::resetRelatedProductComplex> (d, RelatedProductComplex, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setSide, &eurexTESTradeBroadcastPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTradingCapacity, &eurexTESTradeBroadcastPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTradeReportType, &eurexTESTradeBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTransferReason, &eurexTESTradeBroadcastPacket::resetTransferReason> (d, TransferReason, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setTradePublishIndicator, &eurexTESTradeBroadcastPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setMultiLegReportingType, &eurexTESTradeBroadcastPacket::resetMultiLegReportingType> (d, MultiLegReportingType, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setPositionEffect, &eurexTESTradeBroadcastPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setMultilegPriceModel, &eurexTESTradeBroadcastPacket::resetMultilegPriceModel> (d, MultilegPriceModel, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setOrderAttributeLiquidityProvision, &eurexTESTradeBroadcastPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setOrderAttributeRiskReduction, &eurexTESTradeBroadcastPacket::resetOrderAttributeRiskReduction> (d, OrderAttributeRiskReduction, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setExecutingTraderQualifier, &eurexTESTradeBroadcastPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getInteger<int8_t, eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDInvestmentDecisionMakerQualifier, &eurexTESTradeBroadcastPacket::resetRootPartyIDInvestmentDecisionMakerQualifier> (d, RootPartyIDInvestmentDecisionMakerQualifier, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setAccount, &eurexTESTradeBroadcastPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDPositionAccount, &eurexTESTradeBroadcastPacket::resetRootPartyIDPositionAccount> (d, RootPartyIDPositionAccount, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setCustOrderHandlingInst, &eurexTESTradeBroadcastPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setFreeText1, &eurexTESTradeBroadcastPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setFreeText2, &eurexTESTradeBroadcastPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setFreeText3, &eurexTESTradeBroadcastPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyExecutingFirm, &eurexTESTradeBroadcastPacket::resetRootPartyExecutingFirm> (d, RootPartyExecutingFirm, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyExecutingTrader, &eurexTESTradeBroadcastPacket::resetRootPartyExecutingTrader> (d, RootPartyExecutingTrader, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyClearingFirm, &eurexTESTradeBroadcastPacket::resetRootPartyClearingFirm> (d, RootPartyClearingFirm, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyClearingOrganization, &eurexTESTradeBroadcastPacket::resetRootPartyClearingOrganization> (d, RootPartyClearingOrganization, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDBeneficiary, &eurexTESTradeBroadcastPacket::resetRootPartyIDBeneficiary> (d, RootPartyIDBeneficiary, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDTakeUpTradingFirm, &eurexTESTradeBroadcastPacket::resetRootPartyIDTakeUpTradingFirm> (d, RootPartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDOrderOriginationFirm, &eurexTESTradeBroadcastPacket::resetRootPartyIDOrderOriginationFirm> (d, RootPartyIDOrderOriginationFirm, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRootPartyIDExecutionVenue, &eurexTESTradeBroadcastPacket::resetRootPartyIDExecutionVenue> (d, RootPartyIDExecutionVenue, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setRegulatoryTradeID, &eurexTESTradeBroadcastPacket::resetRegulatoryTradeID> (d, RegulatoryTradeID, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setBasketSideTradeReportID, &eurexTESTradeBroadcastPacket::resetBasketSideTradeReportID> (d, BasketSideTradeReportID, packet);
    eti::getString<eurexTESTradeBroadcastPacket, &eurexTESTradeBroadcastPacket::setPad2_1, &eurexTESTradeBroadcastPacket::resetPad2_1> (d, Pad2_1, packet);
    const cdrArray* vSRQSRelatedTradeIDGrp;
    bool bSRQSRelatedTradeIDGrp = d.getArray (SRQSRelatedTradeIDGrp, &vSRQSRelatedTradeIDGrp);
    for (size_t i = 0; bSRQSRelatedTradeIDGrp && i < vSRQSRelatedTradeIDGrp->size (); i++)
    {
        eurexSRQSRelatedTradeIDGrpCompPacket group;
        putSRQSRelatedTradeIDGrpComp ((*vSRQSRelatedTradeIDGrp)[i], group);
        packet.mSRQSRelatedTradeIDGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESTradeBroadcast");
}

void
eurexCodec::putTESTradingSessionStatusBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESTradingSessionStatusBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int32_t, eurexTESTradingSessionStatusBroadcastPacket, &eurexTESTradingSessionStatusBroadcastPacket::setTradeDate, &eurexTESTradingSessionStatusBroadcastPacket::resetTradeDate> (d, TradeDate, packet);
    eti::getInteger<int8_t, eurexTESTradingSessionStatusBroadcastPacket, &eurexTESTradingSessionStatusBroadcastPacket::setTradSesEvent, &eurexTESTradingSessionStatusBroadcastPacket::resetTradSesEvent> (d, TradSesEvent, packet);
    eti::getString<eurexTESTradingSessionStatusBroadcastPacket, &eurexTESTradingSessionStatusBroadcastPacket::setPad3, &eurexTESTradingSessionStatusBroadcastPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESTradingSessionStatusBroadcast");
}

void
eurexCodec::putTESUploadBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTESUploadBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int64_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setSecurityID, &eurexTESUploadBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setLastPx, &eurexTESUploadBroadcastPacket::resetLastPx> (d, LastPx, packet);
    eti::getInteger<uint64_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTransBkdTime, &eurexTESUploadBroadcastPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getInteger<uint64_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTransactTime, &eurexTESUploadBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingPx, &eurexTESUploadBroadcastPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setRelatedClosePrice, &eurexTESUploadBroadcastPacket::resetRelatedClosePrice> (d, RelatedClosePrice, packet);
    eti::getDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setRelatedTradeQuantity, &eurexTESUploadBroadcastPacket::resetRelatedTradeQuantity> (d, RelatedTradeQuantity, packet);
    eti::getDouble<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingQty, &eurexTESUploadBroadcastPacket::resetUnderlyingQty> (d, UnderlyingQty, packet);
    eti::getInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setMarketSegmentID, &eurexTESUploadBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setPackageID, &eurexTESUploadBroadcastPacket::resetPackageID> (d, PackageID, packet);
    eti::getInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTESExecID, &eurexTESUploadBroadcastPacket::resetTESExecID> (d, TESExecID, packet);
    eti::getInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingSettlementDate, &eurexTESUploadBroadcastPacket::resetUnderlyingSettlementDate> (d, UnderlyingSettlementDate, packet);
    eti::getInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingMaturityDate, &eurexTESUploadBroadcastPacket::resetUnderlyingMaturityDate> (d, UnderlyingMaturityDate, packet);
    eti::getInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setRelatedTradeID, &eurexTESUploadBroadcastPacket::resetRelatedTradeID> (d, RelatedTradeID, packet);
    eti::getInteger<int32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setRelatedMarketSegmentID, &eurexTESUploadBroadcastPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setNegotiationID, &eurexTESUploadBroadcastPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setNoSRQSRelatedTradeIDs, &eurexTESUploadBroadcastPacket::resetNoSRQSRelatedTradeIDs> (d, NoSRQSRelatedTradeIDs, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setPad1, &eurexTESUploadBroadcastPacket::resetPad1> (d, Pad1, packet);
    eti::getInteger<int16_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTrdType, &eurexTESUploadBroadcastPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setProductComplex, &eurexTESUploadBroadcastPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTradeReportType, &eurexTESUploadBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTradePublishIndicator, &eurexTESUploadBroadcastPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTradePlatform, &eurexTESUploadBroadcastPacket::resetTradePlatform> (d, TradePlatform, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setNoSideAllocs, &eurexTESUploadBroadcastPacket::resetNoSideAllocs> (d, NoSideAllocs, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setNoLegs, &eurexTESUploadBroadcastPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setNoEvents, &eurexTESUploadBroadcastPacket::resetNoEvents> (d, NoEvents, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setNoInstrAttrib, &eurexTESUploadBroadcastPacket::resetNoInstrAttrib> (d, NoInstrAttrib, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setNoUnderlyingStips, &eurexTESUploadBroadcastPacket::resetNoUnderlyingStips> (d, NoUnderlyingStips, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setHedgeType, &eurexTESUploadBroadcastPacket::resetHedgeType> (d, HedgeType, packet);
    eti::getInteger<int8_t, eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setPartyIDSettlementLocation, &eurexTESUploadBroadcastPacket::resetPartyIDSettlementLocation> (d, PartyIDSettlementLocation, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setMessageEventSource, &eurexTESUploadBroadcastPacket::resetMessageEventSource> (d, MessageEventSource, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setTradeReportID, &eurexTESUploadBroadcastPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setRootPartyExecutingFirm, &eurexTESUploadBroadcastPacket::resetRootPartyExecutingFirm> (d, RootPartyExecutingFirm, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setRootPartyExecutingTrader, &eurexTESUploadBroadcastPacket::resetRootPartyExecutingTrader> (d, RootPartyExecutingTrader, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingSecurityID, &eurexTESUploadBroadcastPacket::resetUnderlyingSecurityID> (d, UnderlyingSecurityID, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingSecurityDesc, &eurexTESUploadBroadcastPacket::resetUnderlyingSecurityDesc> (d, UnderlyingSecurityDesc, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingCurrency, &eurexTESUploadBroadcastPacket::resetUnderlyingCurrency> (d, UnderlyingCurrency, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setUnderlyingIssuer, &eurexTESUploadBroadcastPacket::resetUnderlyingIssuer> (d, UnderlyingIssuer, packet);
    eti::getString<eurexTESUploadBroadcastPacket, &eurexTESUploadBroadcastPacket::setPad6, &eurexTESUploadBroadcastPacket::resetPad6> (d, Pad6, packet);
    const cdrArray* vSideAllocExtGrp;
    bool bSideAllocExtGrp = d.getArray (SideAllocExtGrp, &vSideAllocExtGrp);
    for (size_t i = 0; bSideAllocExtGrp && i < vSideAllocExtGrp->size (); i++)
    {
        eurexSideAllocExtGrpCompPacket group;
        putSideAllocExtGrpComp ((*vSideAllocExtGrp)[i], group);
        packet.mSideAllocExtGrp.push_back (group);
    }
    const cdrArray* vTrdInstrmntLegGrp;
    bool bTrdInstrmntLegGrp = d.getArray (TrdInstrmntLegGrp, &vTrdInstrmntLegGrp);
    for (size_t i = 0; bTrdInstrmntLegGrp && i < vTrdInstrmntLegGrp->size (); i++)
    {
        eurexTrdInstrmntLegGrpCompPacket group;
        putTrdInstrmntLegGrpComp ((*vTrdInstrmntLegGrp)[i], group);
        packet.mTrdInstrmntLegGrp.push_back (group);
    }
    const cdrArray* vInstrumentEventGrp;
    bool bInstrumentEventGrp = d.getArray (InstrumentEventGrp, &vInstrumentEventGrp);
    for (size_t i = 0; bInstrumentEventGrp && i < vInstrumentEventGrp->size (); i++)
    {
        eurexInstrumentEventGrpCompPacket group;
        putInstrumentEventGrpComp ((*vInstrumentEventGrp)[i], group);
        packet.mInstrumentEventGrp.push_back (group);
    }
    const cdrArray* vInstrumentAttributeGrp;
    bool bInstrumentAttributeGrp = d.getArray (InstrumentAttributeGrp, &vInstrumentAttributeGrp);
    for (size_t i = 0; bInstrumentAttributeGrp && i < vInstrumentAttributeGrp->size (); i++)
    {
        eurexInstrumentAttributeGrpCompPacket group;
        putInstrumentAttributeGrpComp ((*vInstrumentAttributeGrp)[i], group);
        packet.mInstrumentAttributeGrp.push_back (group);
    }
    putUnderlyingStipGrpComp (d, packet.mUnderlyingStipGrp);
    const cdrArray* vSRQSRelatedTradeIDGrp;
    bool bSRQSRelatedTradeIDGrp = d.getArray (SRQSRelatedTradeIDGrp, &vSRQSRelatedTradeIDGrp);
    for (size_t i = 0; bSRQSRelatedTradeIDGrp && i < vSRQSRelatedTradeIDGrp->size (); i++)
    {
        eurexSRQSRelatedTradeIDGrpCompPacket group;
        putSRQSRelatedTradeIDGrpComp ((*vSRQSRelatedTradeIDGrp)[i], group);
        packet.mSRQSRelatedTradeIDGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TESUploadBroadcast");
}

void
eurexCodec::putTMTradingSessionStatusBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTMTradingSessionStatusBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int8_t, eurexTMTradingSessionStatusBroadcastPacket, &eurexTMTradingSessionStatusBroadcastPacket::setTradSesEvent, &eurexTMTradingSessionStatusBroadcastPacket::resetTradSesEvent> (d, TradSesEvent, packet);
    eti::getString<eurexTMTradingSessionStatusBroadcastPacket, &eurexTMTradingSessionStatusBroadcastPacket::setPad7, &eurexTMTradingSessionStatusBroadcastPacket::resetPad7> (d, Pad7, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TMTradingSessionStatusBroadcast");
}

void
eurexCodec::putThrottleUpdateNotification (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexThrottleUpdateNotificationPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putNotifHeaderComp (d, packet.mNotifHeader);
    eti::getInteger<int64_t, eurexThrottleUpdateNotificationPacket, &eurexThrottleUpdateNotificationPacket::setThrottleTimeInterval, &eurexThrottleUpdateNotificationPacket::resetThrottleTimeInterval> (d, ThrottleTimeInterval, packet);
    eti::getInteger<uint32_t, eurexThrottleUpdateNotificationPacket, &eurexThrottleUpdateNotificationPacket::setThrottleNoMsgs, &eurexThrottleUpdateNotificationPacket::resetThrottleNoMsgs> (d, ThrottleNoMsgs, packet);
    eti::getInteger<uint32_t, eurexThrottleUpdateNotificationPacket, &eurexThrottleUpdateNotificationPacket::setThrottleDisconnectLimit, &eurexThrottleUpdateNotificationPacket::resetThrottleDisconnectLimit> (d, ThrottleDisconnectLimit, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize ThrottleUpdateNotification");
}

void
eurexCodec::putTradeBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTradeBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderComp (d, packet.mRBCHeader);
    eti::getInteger<int64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setSecurityID, &eurexTradeBroadcastPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getInteger<int64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRelatedSecurityID, &eurexTradeBroadcastPacket::resetRelatedSecurityID> (d, RelatedSecurityID, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setPrice, &eurexTradeBroadcastPacket::resetPrice> (d, Price, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setLastPx, &eurexTradeBroadcastPacket::resetLastPx> (d, LastPx, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setLastQty, &eurexTradeBroadcastPacket::resetLastQty> (d, LastQty, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setSideLastPx, &eurexTradeBroadcastPacket::resetSideLastPx> (d, SideLastPx, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setSideLastQty, &eurexTradeBroadcastPacket::resetSideLastQty> (d, SideLastQty, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setClearingTradePrice, &eurexTradeBroadcastPacket::resetClearingTradePrice> (d, ClearingTradePrice, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setClearingTradeQty, &eurexTradeBroadcastPacket::resetClearingTradeQty> (d, ClearingTradeQty, packet);
    eti::getInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setTransactTime, &eurexTradeBroadcastPacket::resetTransactTime> (d, TransactTime, packet);
    eti::getInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setOrderID, &eurexTradeBroadcastPacket::resetOrderID> (d, OrderID, packet);
    eti::getInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setClOrdID, &eurexTradeBroadcastPacket::resetClOrdID> (d, ClOrdID, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setLeavesQty, &eurexTradeBroadcastPacket::resetLeavesQty> (d, LeavesQty, packet);
    eti::getDouble<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setCumQty, &eurexTradeBroadcastPacket::resetCumQty> (d, CumQty, packet);
    eti::getInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDClientID, &eurexTradeBroadcastPacket::resetRootPartyIDClientID> (d, RootPartyIDClientID, packet);
    eti::getInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setExecutingTrader, &eurexTradeBroadcastPacket::resetExecutingTrader> (d, ExecutingTrader, packet);
    eti::getInteger<uint64_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDInvestmentDecisionMaker, &eurexTradeBroadcastPacket::resetRootPartyIDInvestmentDecisionMaker> (d, RootPartyIDInvestmentDecisionMaker, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setTradeID, &eurexTradeBroadcastPacket::resetTradeID> (d, TradeID, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setOrigTradeID, &eurexTradeBroadcastPacket::resetOrigTradeID> (d, OrigTradeID, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDExecutingUnit, &eurexTradeBroadcastPacket::resetRootPartyIDExecutingUnit> (d, RootPartyIDExecutingUnit, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDSessionID, &eurexTradeBroadcastPacket::resetRootPartyIDSessionID> (d, RootPartyIDSessionID, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDExecutingTrader, &eurexTradeBroadcastPacket::resetRootPartyIDExecutingTrader> (d, RootPartyIDExecutingTrader, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDClearingUnit, &eurexTradeBroadcastPacket::resetRootPartyIDClearingUnit> (d, RootPartyIDClearingUnit, packet);
    eti::getInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setMarketSegmentID, &eurexTradeBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRelatedSymbol, &eurexTradeBroadcastPacket::resetRelatedSymbol> (d, RelatedSymbol, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setSideTradeID, &eurexTradeBroadcastPacket::resetSideTradeID> (d, SideTradeID, packet);
    eti::getInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setMatchDate, &eurexTradeBroadcastPacket::resetMatchDate> (d, MatchDate, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setTrdMatchID, &eurexTradeBroadcastPacket::resetTrdMatchID> (d, TrdMatchID, packet);
    eti::getInteger<uint32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setStrategyLinkID, &eurexTradeBroadcastPacket::resetStrategyLinkID> (d, StrategyLinkID, packet);
    eti::getInteger<int32_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setTotNumTradeReports, &eurexTradeBroadcastPacket::resetTotNumTradeReports> (d, TotNumTradeReports, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setMultiLegReportingType, &eurexTradeBroadcastPacket::resetMultiLegReportingType> (d, MultiLegReportingType, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setTradeReportType, &eurexTradeBroadcastPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setTransferReason, &eurexTradeBroadcastPacket::resetTransferReason> (d, TransferReason, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDBeneficiary, &eurexTradeBroadcastPacket::resetRootPartyIDBeneficiary> (d, RootPartyIDBeneficiary, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDTakeUpTradingFirm, &eurexTradeBroadcastPacket::resetRootPartyIDTakeUpTradingFirm> (d, RootPartyIDTakeUpTradingFirm, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDOrderOriginationFirm, &eurexTradeBroadcastPacket::resetRootPartyIDOrderOriginationFirm> (d, RootPartyIDOrderOriginationFirm, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setMatchType, &eurexTradeBroadcastPacket::resetMatchType> (d, MatchType, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setMatchSubType, &eurexTradeBroadcastPacket::resetMatchSubType> (d, MatchSubType, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setSide, &eurexTradeBroadcastPacket::resetSide> (d, Side, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setSideLiquidityInd, &eurexTradeBroadcastPacket::resetSideLiquidityInd> (d, SideLiquidityInd, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setTradingCapacity, &eurexTradeBroadcastPacket::resetTradingCapacity> (d, TradingCapacity, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setOrderAttributeLiquidityProvision, &eurexTradeBroadcastPacket::resetOrderAttributeLiquidityProvision> (d, OrderAttributeLiquidityProvision, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setOrderAttributeRiskReduction, &eurexTradeBroadcastPacket::resetOrderAttributeRiskReduction> (d, OrderAttributeRiskReduction, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setExecutingTraderQualifier, &eurexTradeBroadcastPacket::resetExecutingTraderQualifier> (d, ExecutingTraderQualifier, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDInvestmentDecisionMakerQualifier, &eurexTradeBroadcastPacket::resetRootPartyIDInvestmentDecisionMakerQualifier> (d, RootPartyIDInvestmentDecisionMakerQualifier, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setAccount, &eurexTradeBroadcastPacket::resetAccount> (d, Account, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDPositionAccount, &eurexTradeBroadcastPacket::resetRootPartyIDPositionAccount> (d, RootPartyIDPositionAccount, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setPositionEffect, &eurexTradeBroadcastPacket::resetPositionEffect> (d, PositionEffect, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setCustOrderHandlingInst, &eurexTradeBroadcastPacket::resetCustOrderHandlingInst> (d, CustOrderHandlingInst, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setFreeText1, &eurexTradeBroadcastPacket::resetFreeText1> (d, FreeText1, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setFreeText2, &eurexTradeBroadcastPacket::resetFreeText2> (d, FreeText2, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setFreeText3, &eurexTradeBroadcastPacket::resetFreeText3> (d, FreeText3, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setOrderCategory, &eurexTradeBroadcastPacket::resetOrderCategory> (d, OrderCategory, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setOrdType, &eurexTradeBroadcastPacket::resetOrdType> (d, OrdType, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRelatedProductComplex, &eurexTradeBroadcastPacket::resetRelatedProductComplex> (d, RelatedProductComplex, packet);
    eti::getInteger<int8_t, eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setOrderSide, &eurexTradeBroadcastPacket::resetOrderSide> (d, OrderSide, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyClearingOrganization, &eurexTradeBroadcastPacket::resetRootPartyClearingOrganization> (d, RootPartyClearingOrganization, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyExecutingFirm, &eurexTradeBroadcastPacket::resetRootPartyExecutingFirm> (d, RootPartyExecutingFirm, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyExecutingTrader, &eurexTradeBroadcastPacket::resetRootPartyExecutingTrader> (d, RootPartyExecutingTrader, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyClearingFirm, &eurexTradeBroadcastPacket::resetRootPartyClearingFirm> (d, RootPartyClearingFirm, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRegulatoryTradeID, &eurexTradeBroadcastPacket::resetRegulatoryTradeID> (d, RegulatoryTradeID, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setRootPartyIDExecutionVenue, &eurexTradeBroadcastPacket::resetRootPartyIDExecutionVenue> (d, RootPartyIDExecutionVenue, packet);
    eti::getString<eurexTradeBroadcastPacket, &eurexTradeBroadcastPacket::setPad3, &eurexTradeBroadcastPacket::resetPad3> (d, Pad3, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TradeBroadcast");
}

void
eurexCodec::putTradingSessionStatusBroadcast (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexTradingSessionStatusBroadcastPacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putRBCHeaderMEComp (d, packet.mRBCHeaderME);
    eti::getInteger<int32_t, eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::setMarketSegmentID, &eurexTradingSessionStatusBroadcastPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::setTradeDate, &eurexTradingSessionStatusBroadcastPacket::resetTradeDate> (d, TradeDate, packet);
    eti::getInteger<int8_t, eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::setTradSesEvent, &eurexTradingSessionStatusBroadcastPacket::resetTradSesEvent> (d, TradSesEvent, packet);
    eti::getString<eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::setRefApplLastMsgID, &eurexTradingSessionStatusBroadcastPacket::resetRefApplLastMsgID> (d, RefApplLastMsgID, packet);
    eti::getString<eurexTradingSessionStatusBroadcastPacket, &eurexTradingSessionStatusBroadcastPacket::setPad7, &eurexTradingSessionStatusBroadcastPacket::resetPad7> (d, Pad7, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize TradingSessionStatusBroadcast");
}

void
eurexCodec::putUnsubscribeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexUnsubscribeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<uint32_t, eurexUnsubscribeRequestPacket, &eurexUnsubscribeRequestPacket::setRefApplSubID, &eurexUnsubscribeRequestPacket::resetRefApplSubID> (d, RefApplSubID, packet);
    eti::getString<eurexUnsubscribeRequestPacket, &eurexUnsubscribeRequestPacket::setPad4, &eurexUnsubscribeRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize UnsubscribeRequest");
}

void
eurexCodec::putUnsubscribeResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexUnsubscribeResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize UnsubscribeResponse");
}

void
eurexCodec::putUploadTESTradeRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexUploadTESTradeRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int64_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setSecurityID, &eurexUploadTESTradeRequestPacket::resetSecurityID> (d, SecurityID, packet);
    eti::getDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setLastPx, &eurexUploadTESTradeRequestPacket::resetLastPx> (d, LastPx, packet);
    eti::getInteger<uint64_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTransBkdTime, &eurexUploadTESTradeRequestPacket::resetTransBkdTime> (d, TransBkdTime, packet);
    eti::getDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingPx, &eurexUploadTESTradeRequestPacket::resetUnderlyingPx> (d, UnderlyingPx, packet);
    eti::getDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setRelatedClosePrice, &eurexUploadTESTradeRequestPacket::resetRelatedClosePrice> (d, RelatedClosePrice, packet);
    eti::getDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setRelatedTradeQuantity, &eurexUploadTESTradeRequestPacket::resetRelatedTradeQuantity> (d, RelatedTradeQuantity, packet);
    eti::getDouble<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingQty, &eurexUploadTESTradeRequestPacket::resetUnderlyingQty> (d, UnderlyingQty, packet);
    eti::getInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setMarketSegmentID, &eurexUploadTESTradeRequestPacket::resetMarketSegmentID> (d, MarketSegmentID, packet);
    eti::getInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingSettlementDate, &eurexUploadTESTradeRequestPacket::resetUnderlyingSettlementDate> (d, UnderlyingSettlementDate, packet);
    eti::getInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingMaturityDate, &eurexUploadTESTradeRequestPacket::resetUnderlyingMaturityDate> (d, UnderlyingMaturityDate, packet);
    eti::getInteger<uint32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setRelatedTradeID, &eurexUploadTESTradeRequestPacket::resetRelatedTradeID> (d, RelatedTradeID, packet);
    eti::getInteger<int32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setRelatedMarketSegmentID, &eurexUploadTESTradeRequestPacket::resetRelatedMarketSegmentID> (d, RelatedMarketSegmentID, packet);
    eti::getInteger<uint32_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setNegotiationID, &eurexUploadTESTradeRequestPacket::resetNegotiationID> (d, NegotiationID, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setNoSRQSRelatedTradeIDs, &eurexUploadTESTradeRequestPacket::resetNoSRQSRelatedTradeIDs> (d, NoSRQSRelatedTradeIDs, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setPad1, &eurexUploadTESTradeRequestPacket::resetPad1> (d, Pad1, packet);
    eti::getInteger<int16_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTrdType, &eurexUploadTESTradeRequestPacket::resetTrdType> (d, TrdType, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setProductComplex, &eurexUploadTESTradeRequestPacket::resetProductComplex> (d, ProductComplex, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTradeReportType, &eurexUploadTESTradeRequestPacket::resetTradeReportType> (d, TradeReportType, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTradePublishIndicator, &eurexUploadTESTradeRequestPacket::resetTradePublishIndicator> (d, TradePublishIndicator, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setNoSideAllocs, &eurexUploadTESTradeRequestPacket::resetNoSideAllocs> (d, NoSideAllocs, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setNoLegs, &eurexUploadTESTradeRequestPacket::resetNoLegs> (d, NoLegs, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setNoEvents, &eurexUploadTESTradeRequestPacket::resetNoEvents> (d, NoEvents, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setNoInstrAttrib, &eurexUploadTESTradeRequestPacket::resetNoInstrAttrib> (d, NoInstrAttrib, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setNoUnderlyingStips, &eurexUploadTESTradeRequestPacket::resetNoUnderlyingStips> (d, NoUnderlyingStips, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setSkipValidations, &eurexUploadTESTradeRequestPacket::resetSkipValidations> (d, SkipValidations, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTrdRptStatus, &eurexUploadTESTradeRequestPacket::resetTrdRptStatus> (d, TrdRptStatus, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTradePlatform, &eurexUploadTESTradeRequestPacket::resetTradePlatform> (d, TradePlatform, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setHedgeType, &eurexUploadTESTradeRequestPacket::resetHedgeType> (d, HedgeType, packet);
    eti::getInteger<int8_t, eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setPartyIDSettlementLocation, &eurexUploadTESTradeRequestPacket::resetPartyIDSettlementLocation> (d, PartyIDSettlementLocation, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTradeReportID, &eurexUploadTESTradeRequestPacket::resetTradeReportID> (d, TradeReportID, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setTradeReportText, &eurexUploadTESTradeRequestPacket::resetTradeReportText> (d, TradeReportText, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingSecurityID, &eurexUploadTESTradeRequestPacket::resetUnderlyingSecurityID> (d, UnderlyingSecurityID, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingSecurityDesc, &eurexUploadTESTradeRequestPacket::resetUnderlyingSecurityDesc> (d, UnderlyingSecurityDesc, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingCurrency, &eurexUploadTESTradeRequestPacket::resetUnderlyingCurrency> (d, UnderlyingCurrency, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setUnderlyingIssuer, &eurexUploadTESTradeRequestPacket::resetUnderlyingIssuer> (d, UnderlyingIssuer, packet);
    eti::getString<eurexUploadTESTradeRequestPacket, &eurexUploadTESTradeRequestPacket::setPad4, &eurexUploadTESTradeRequestPacket::resetPad4> (d, Pad4, packet);
    const cdrArray* vSideAllocExtGrp;
    bool bSideAllocExtGrp = d.getArray (SideAllocExtGrp, &vSideAllocExtGrp);
    for (size_t i = 0; bSideAllocExtGrp && i < vSideAllocExtGrp->size (); i++)
    {
        eurexSideAllocExtGrpCompPacket group;
        putSideAllocExtGrpComp ((*vSideAllocExtGrp)[i], group);
        packet.mSideAllocExtGrp.push_back (group);
    }
    const cdrArray* vTrdInstrmntLegGrp;
    bool bTrdInstrmntLegGrp = d.getArray (TrdInstrmntLegGrp, &vTrdInstrmntLegGrp);
    for (size_t i = 0; bTrdInstrmntLegGrp && i < vTrdInstrmntLegGrp->size (); i++)
    {
        eurexTrdInstrmntLegGrpCompPacket group;
        putTrdInstrmntLegGrpComp ((*vTrdInstrmntLegGrp)[i], group);
        packet.mTrdInstrmntLegGrp.push_back (group);
    }
    const cdrArray* vInstrumentEventGrp;
    bool bInstrumentEventGrp = d.getArray (InstrumentEventGrp, &vInstrumentEventGrp);
    for (size_t i = 0; bInstrumentEventGrp && i < vInstrumentEventGrp->size (); i++)
    {
        eurexInstrumentEventGrpCompPacket group;
        putInstrumentEventGrpComp ((*vInstrumentEventGrp)[i], group);
        packet.mInstrumentEventGrp.push_back (group);
    }
    const cdrArray* vInstrumentAttributeGrp;
    bool bInstrumentAttributeGrp = d.getArray (InstrumentAttributeGrp, &vInstrumentAttributeGrp);
    for (size_t i = 0; bInstrumentAttributeGrp && i < vInstrumentAttributeGrp->size (); i++)
    {
        eurexInstrumentAttributeGrpCompPacket group;
        putInstrumentAttributeGrpComp ((*vInstrumentAttributeGrp)[i], group);
        packet.mInstrumentAttributeGrp.push_back (group);
    }
    putUnderlyingStipGrpComp (d, packet.mUnderlyingStipGrp);
    const cdrArray* vSRQSRelatedTradeIDGrp;
    bool bSRQSRelatedTradeIDGrp = d.getArray (SRQSRelatedTradeIDGrp, &vSRQSRelatedTradeIDGrp);
    for (size_t i = 0; bSRQSRelatedTradeIDGrp && i < vSRQSRelatedTradeIDGrp->size (); i++)
    {
        eurexSRQSRelatedTradeIDGrpCompPacket group;
        putSRQSRelatedTradeIDGrpComp ((*vSRQSRelatedTradeIDGrp)[i], group);
        packet.mSRQSRelatedTradeIDGrp.push_back (group);
    }
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize UploadTESTradeRequest");
}

void
eurexCodec::putUserLoginRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexUserLoginRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexUserLoginRequestPacket, &eurexUserLoginRequestPacket::setUsername, &eurexUserLoginRequestPacket::resetUsername> (d, Username, packet);
    eti::getString<eurexUserLoginRequestPacket, &eurexUserLoginRequestPacket::setPassword, &eurexUserLoginRequestPacket::resetPassword> (d, Password, packet);
    eti::getString<eurexUserLoginRequestPacket, &eurexUserLoginRequestPacket::setPad4, &eurexUserLoginRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize UserLoginRequest");
}

void
eurexCodec::putUserLoginResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexUserLoginResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize UserLoginResponse");
}

void
eurexCodec::putUserLogoutRequest (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexUserLogoutRequestPacket packet;
    putMessageHeaderInComp (d, packet.mMessageHeaderIn);
    putRequestHeaderComp (d, packet.mRequestHeader);
    eti::getInteger<int32_t, eurexUserLogoutRequestPacket, &eurexUserLogoutRequestPacket::setUsername, &eurexUserLogoutRequestPacket::resetUsername> (d, Username, packet);
    eti::getString<eurexUserLogoutRequestPacket, &eurexUserLogoutRequestPacket::setPad4, &eurexUserLogoutRequestPacket::resetPad4> (d, Pad4, packet);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize UserLogoutRequest");
}

void
eurexCodec::putUserLogoutResponse (const cdr &d, void *buf, size_t len, size_t& used)
{
    eurexUserLogoutResponsePacket packet;
    putMessageHeaderOutComp (d, packet.mMessageHeaderOut);
    putResponseHeaderComp (d, packet.mResponseHeader);
    codecState state = packet.serialize (buf, len, used);
    if (state != GW_CODEC_SUCCESS)
        throw eti::codecError(state, "cannot serialize UserLogoutResponse");
}


codecState
eurexCodec::decode (cdr& d, const void* buf, size_t len, size_t& used)
{
    clearLastError ();
    used = 0;
    d.clear ();

    eurexHeaderPacket* hdr = (eurexHeaderPacket *) buf;
    if (len < sizeof (*hdr) || len < (size_t) hdr->mBodyLen)
        return GW_CODEC_SHORT;

    codecState state = GW_CODEC_SUCCESS;
    try
    {
        switch (hdr->mTemplateID)
        {
        case 10301:
            getAddComplexInstrumentRequest (d, buf, len, used);
            break;
        case 10302:
            getAddComplexInstrumentResponse (d, buf, len, used);
            break;
        case 10309:
            getAddFlexibleInstrumentRequest (d, buf, len, used);
            break;
        case 10310:
            getAddFlexibleInstrumentResponse (d, buf, len, used);
            break;
        case 10629:
            getAmendBasketTradeRequest (d, buf, len, used);
            break;
        case 10623:
            getApproveBasketTradeRequest (d, buf, len, used);
            break;
        case 10603:
            getApproveTESTradeRequest (d, buf, len, used);
            break;
        case 10627:
            getBasketApproveBroadcast (d, buf, len, used);
            break;
        case 10625:
            getBasketBroadcast (d, buf, len, used);
            break;
        case 10626:
            getBasketDeleteBroadcast (d, buf, len, used);
            break;
        case 10628:
            getBasketExecutionBroadcast (d, buf, len, used);
            break;
        case 10624:
            getBasketResponse (d, buf, len, used);
            break;
        case 10032:
            getBroadcastErrorNotification (d, buf, len, used);
            break;
        case 10134:
            getCLIPDeletionNotification (d, buf, len, used);
            break;
        case 10135:
            getCLIPExecutionNotification (d, buf, len, used);
            break;
        case 10133:
            getCLIPResponse (d, buf, len, used);
            break;
        case 10118:
            getCrossRequest (d, buf, len, used);
            break;
        case 10119:
            getCrossRequestResponse (d, buf, len, used);
            break;
        case 10122:
            getDeleteAllOrderBroadcast (d, buf, len, used);
            break;
        case 10124:
            getDeleteAllOrderNRResponse (d, buf, len, used);
            break;
        case 10308:
            getDeleteAllOrderQuoteEventBroadcast (d, buf, len, used);
            break;
        case 10120:
            getDeleteAllOrderRequest (d, buf, len, used);
            break;
        case 10121:
            getDeleteAllOrderResponse (d, buf, len, used);
            break;
        case 10410:
            getDeleteAllQuoteBroadcast (d, buf, len, used);
            break;
        case 10408:
            getDeleteAllQuoteRequest (d, buf, len, used);
            break;
        case 10409:
            getDeleteAllQuoteResponse (d, buf, len, used);
            break;
        case 10622:
            getDeleteBasketTradeRequest (d, buf, len, used);
            break;
        case 10132:
            getDeleteCLIPRequest (d, buf, len, used);
            break;
        case 10112:
            getDeleteOrderBroadcast (d, buf, len, used);
            break;
        case 10123:
            getDeleteOrderComplexRequest (d, buf, len, used);
            break;
        case 10111:
            getDeleteOrderNRResponse (d, buf, len, used);
            break;
        case 10110:
            getDeleteOrderResponse (d, buf, len, used);
            break;
        case 10109:
            getDeleteOrderSingleRequest (d, buf, len, used);
            break;
        case 10602:
            getDeleteTESTradeRequest (d, buf, len, used);
            break;
        case 10620:
            getEnterBasketTradeRequest (d, buf, len, used);
            break;
        case 10131:
            getEnterCLIPRequest (d, buf, len, used);
            break;
        case 10600:
            getEnterTESTradeRequest (d, buf, len, used);
            break;
        case 10012:
            getForcedLogoutNotification (d, buf, len, used);
            break;
        case 10043:
            getForcedUserLogoutNotification (d, buf, len, used);
            break;
        case 10011:
            getHeartbeat (d, buf, len, used);
            break;
        case 10023:
            getHeartbeatNotification (d, buf, len, used);
            break;
        case 10040:
            getInquireEnrichmentRuleIDListRequest (d, buf, len, used);
            break;
        case 10041:
            getInquireEnrichmentRuleIDListResponse (d, buf, len, used);
            break;
        case 10305:
            getInquireMMParameterRequest (d, buf, len, used);
            break;
        case 10306:
            getInquireMMParameterResponse (d, buf, len, used);
            break;
        case 10311:
            getInquirePreTradeRiskLimitsRequest (d, buf, len, used);
            break;
        case 10035:
            getInquireSessionListRequest (d, buf, len, used);
            break;
        case 10036:
            getInquireSessionListResponse (d, buf, len, used);
            break;
        case 10038:
            getInquireUserRequest (d, buf, len, used);
            break;
        case 10039:
            getInquireUserResponse (d, buf, len, used);
            break;
        case 10037:
            getLegalNotificationBroadcast (d, buf, len, used);
            break;
        case 10000:
            getLogonRequest (d, buf, len, used);
            break;
        case 10001:
            getLogonResponse (d, buf, len, used);
            break;
        case 10002:
            getLogoutRequest (d, buf, len, used);
            break;
        case 10003:
            getLogoutResponse (d, buf, len, used);
            break;
        case 10303:
            getMMParameterDefinitionRequest (d, buf, len, used);
            break;
        case 10304:
            getMMParameterDefinitionResponse (d, buf, len, used);
            break;
        case 10405:
            getMassQuoteRequest (d, buf, len, used);
            break;
        case 10406:
            getMassQuoteResponse (d, buf, len, used);
            break;
        case 10621:
            getModifyBasketTradeRequest (d, buf, len, used);
            break;
        case 10114:
            getModifyOrderComplexRequest (d, buf, len, used);
            break;
        case 10130:
            getModifyOrderComplexShortRequest (d, buf, len, used);
            break;
        case 10108:
            getModifyOrderNRResponse (d, buf, len, used);
            break;
        case 10107:
            getModifyOrderResponse (d, buf, len, used);
            break;
        case 10106:
            getModifyOrderSingleRequest (d, buf, len, used);
            break;
        case 10126:
            getModifyOrderSingleShortRequest (d, buf, len, used);
            break;
        case 10601:
            getModifyTESTradeRequest (d, buf, len, used);
            break;
        case 10113:
            getNewOrderComplexRequest (d, buf, len, used);
            break;
        case 10129:
            getNewOrderComplexShortRequest (d, buf, len, used);
            break;
        case 10102:
            getNewOrderNRResponse (d, buf, len, used);
            break;
        case 10101:
            getNewOrderResponse (d, buf, len, used);
            break;
        case 10100:
            getNewOrderSingleRequest (d, buf, len, used);
            break;
        case 10125:
            getNewOrderSingleShortRequest (d, buf, len, used);
            break;
        case 10031:
            getNewsBroadcast (d, buf, len, used);
            break;
        case 10104:
            getOrderExecNotification (d, buf, len, used);
            break;
        case 10117:
            getOrderExecReportBroadcast (d, buf, len, used);
            break;
        case 10103:
            getOrderExecResponse (d, buf, len, used);
            break;
        case 10042:
            getPartyActionReport (d, buf, len, used);
            break;
        case 10034:
            getPartyEntitlementsUpdateReport (d, buf, len, used);
            break;
        case 10313:
            getPreTradeRiskLimitResponse (d, buf, len, used);
            break;
        case 10312:
            getPreTradeRiskLimitsDefinitionRequest (d, buf, len, used);
            break;
        case 10411:
            getQuoteActivationNotification (d, buf, len, used);
            break;
        case 10403:
            getQuoteActivationRequest (d, buf, len, used);
            break;
        case 10404:
            getQuoteActivationResponse (d, buf, len, used);
            break;
        case 10407:
            getQuoteExecutionReport (d, buf, len, used);
            break;
        case 10401:
            getRFQRequest (d, buf, len, used);
            break;
        case 10402:
            getRFQResponse (d, buf, len, used);
            break;
        case 10010:
            getReject (d, buf, len, used);
            break;
        case 10026:
            getRetransmitMEMessageRequest (d, buf, len, used);
            break;
        case 10027:
            getRetransmitMEMessageResponse (d, buf, len, used);
            break;
        case 10008:
            getRetransmitRequest (d, buf, len, used);
            break;
        case 10009:
            getRetransmitResponse (d, buf, len, used);
            break;
        case 10033:
            getRiskNotificationBroadcast (d, buf, len, used);
            break;
        case 10708:
            getSRQSCreateDealNotification (d, buf, len, used);
            break;
        case 10709:
            getSRQSDealNotification (d, buf, len, used);
            break;
        case 10705:
            getSRQSDealResponse (d, buf, len, used);
            break;
        case 10702:
            getSRQSEnterQuoteRequest (d, buf, len, used);
            break;
        case 10704:
            getSRQSHitQuoteRequest (d, buf, len, used);
            break;
        case 10713:
            getSRQSNegotiationNotification (d, buf, len, used);
            break;
        case 10712:
            getSRQSNegotiationRequesterNotification (d, buf, len, used);
            break;
        case 10715:
            getSRQSNegotiationStatusNotification (d, buf, len, used);
            break;
        case 10711:
            getSRQSOpenNegotiationNotification (d, buf, len, used);
            break;
        case 10700:
            getSRQSOpenNegotiationRequest (d, buf, len, used);
            break;
        case 10710:
            getSRQSOpenNegotiationRequesterNotification (d, buf, len, used);
            break;
        case 10707:
            getSRQSQuoteNotification (d, buf, len, used);
            break;
        case 10703:
            getSRQSQuoteResponse (d, buf, len, used);
            break;
        case 10717:
            getSRQSQuotingStatusRequest (d, buf, len, used);
            break;
        case 10714:
            getSRQSStatusBroadcast (d, buf, len, used);
            break;
        case 10706:
            getSRQSUpdateDealStatusRequest (d, buf, len, used);
            break;
        case 10701:
            getSRQSUpdateNegotiationRequest (d, buf, len, used);
            break;
        case 10030:
            getServiceAvailabilityBroadcast (d, buf, len, used);
            break;
        case 10044:
            getServiceAvailabilityMarketBroadcast (d, buf, len, used);
            break;
        case 10025:
            getSubscribeRequest (d, buf, len, used);
            break;
        case 10005:
            getSubscribeResponse (d, buf, len, used);
            break;
        case 10607:
            getTESApproveBroadcast (d, buf, len, used);
            break;
        case 10604:
            getTESBroadcast (d, buf, len, used);
            break;
        case 10606:
            getTESDeleteBroadcast (d, buf, len, used);
            break;
        case 10610:
            getTESExecutionBroadcast (d, buf, len, used);
            break;
        case 10611:
            getTESResponse (d, buf, len, used);
            break;
        case 10614:
            getTESTradeBroadcast (d, buf, len, used);
            break;
        case 10615:
            getTESTradingSessionStatusBroadcast (d, buf, len, used);
            break;
        case 10613:
            getTESUploadBroadcast (d, buf, len, used);
            break;
        case 10501:
            getTMTradingSessionStatusBroadcast (d, buf, len, used);
            break;
        case 10028:
            getThrottleUpdateNotification (d, buf, len, used);
            break;
        case 10500:
            getTradeBroadcast (d, buf, len, used);
            break;
        case 10307:
            getTradingSessionStatusBroadcast (d, buf, len, used);
            break;
        case 10006:
            getUnsubscribeRequest (d, buf, len, used);
            break;
        case 10007:
            getUnsubscribeResponse (d, buf, len, used);
            break;
        case 10612:
            getUploadTESTradeRequest (d, buf, len, used);
            break;
        case 10018:
            getUserLoginRequest (d, buf, len, used);
            break;
        case 10019:
            getUserLoginResponse (d, buf, len, used);
            break;
        case 10029:
            getUserLogoutRequest (d, buf, len, used);
            break;
        case 10024:
            getUserLogoutResponse (d, buf, len, used);
            break;
            default:
                stringstream ss;
                ss << "unknown message type " << hdr->mTemplateID;
                throw eti::codecError (GW_CODEC_ERROR, ss.str ());
        }
    }
    catch (eti::codecError &e)
    {
        setLastError (e.mMessage);
        state = e.mState;
    }
    catch (...)
    {
        setLastError ("unknown error while encoding");
        state = GW_CODEC_ERROR;
    }
    return state;
}

codecState
eurexCodec::encode (const cdr& d, void* buf, size_t len, size_t& used)
{
    clearLastError ();
    used = 0;

    eurexHeaderPacket* hdr = (eurexHeaderPacket *)buf;
    if (len < sizeof (* hdr))
        return GW_CODEC_SHORT;
    if (!d.isType (TemplateID, CDR_INTEGER, 1))
    {
        setLastError ("TemplateID missing or not integer");
        return GW_CODEC_ERROR;
    }

    codecState state = GW_CODEC_SUCCESS;
    try
    {
        uint16_t templateID;
        d.getInteger (TemplateID, templateID);
        switch (templateID)
        {
        case 10301:
            putAddComplexInstrumentRequest (d, buf, len, used);
            break;
        case 10302:
            putAddComplexInstrumentResponse (d, buf, len, used);
            break;
        case 10309:
            putAddFlexibleInstrumentRequest (d, buf, len, used);
            break;
        case 10310:
            putAddFlexibleInstrumentResponse (d, buf, len, used);
            break;
        case 10629:
            putAmendBasketTradeRequest (d, buf, len, used);
            break;
        case 10623:
            putApproveBasketTradeRequest (d, buf, len, used);
            break;
        case 10603:
            putApproveTESTradeRequest (d, buf, len, used);
            break;
        case 10627:
            putBasketApproveBroadcast (d, buf, len, used);
            break;
        case 10625:
            putBasketBroadcast (d, buf, len, used);
            break;
        case 10626:
            putBasketDeleteBroadcast (d, buf, len, used);
            break;
        case 10628:
            putBasketExecutionBroadcast (d, buf, len, used);
            break;
        case 10624:
            putBasketResponse (d, buf, len, used);
            break;
        case 10032:
            putBroadcastErrorNotification (d, buf, len, used);
            break;
        case 10134:
            putCLIPDeletionNotification (d, buf, len, used);
            break;
        case 10135:
            putCLIPExecutionNotification (d, buf, len, used);
            break;
        case 10133:
            putCLIPResponse (d, buf, len, used);
            break;
        case 10118:
            putCrossRequest (d, buf, len, used);
            break;
        case 10119:
            putCrossRequestResponse (d, buf, len, used);
            break;
        case 10122:
            putDeleteAllOrderBroadcast (d, buf, len, used);
            break;
        case 10124:
            putDeleteAllOrderNRResponse (d, buf, len, used);
            break;
        case 10308:
            putDeleteAllOrderQuoteEventBroadcast (d, buf, len, used);
            break;
        case 10120:
            putDeleteAllOrderRequest (d, buf, len, used);
            break;
        case 10121:
            putDeleteAllOrderResponse (d, buf, len, used);
            break;
        case 10410:
            putDeleteAllQuoteBroadcast (d, buf, len, used);
            break;
        case 10408:
            putDeleteAllQuoteRequest (d, buf, len, used);
            break;
        case 10409:
            putDeleteAllQuoteResponse (d, buf, len, used);
            break;
        case 10622:
            putDeleteBasketTradeRequest (d, buf, len, used);
            break;
        case 10132:
            putDeleteCLIPRequest (d, buf, len, used);
            break;
        case 10112:
            putDeleteOrderBroadcast (d, buf, len, used);
            break;
        case 10123:
            putDeleteOrderComplexRequest (d, buf, len, used);
            break;
        case 10111:
            putDeleteOrderNRResponse (d, buf, len, used);
            break;
        case 10110:
            putDeleteOrderResponse (d, buf, len, used);
            break;
        case 10109:
            putDeleteOrderSingleRequest (d, buf, len, used);
            break;
        case 10602:
            putDeleteTESTradeRequest (d, buf, len, used);
            break;
        case 10620:
            putEnterBasketTradeRequest (d, buf, len, used);
            break;
        case 10131:
            putEnterCLIPRequest (d, buf, len, used);
            break;
        case 10600:
            putEnterTESTradeRequest (d, buf, len, used);
            break;
        case 10012:
            putForcedLogoutNotification (d, buf, len, used);
            break;
        case 10043:
            putForcedUserLogoutNotification (d, buf, len, used);
            break;
        case 10011:
            putHeartbeat (d, buf, len, used);
            break;
        case 10023:
            putHeartbeatNotification (d, buf, len, used);
            break;
        case 10040:
            putInquireEnrichmentRuleIDListRequest (d, buf, len, used);
            break;
        case 10041:
            putInquireEnrichmentRuleIDListResponse (d, buf, len, used);
            break;
        case 10305:
            putInquireMMParameterRequest (d, buf, len, used);
            break;
        case 10306:
            putInquireMMParameterResponse (d, buf, len, used);
            break;
        case 10311:
            putInquirePreTradeRiskLimitsRequest (d, buf, len, used);
            break;
        case 10035:
            putInquireSessionListRequest (d, buf, len, used);
            break;
        case 10036:
            putInquireSessionListResponse (d, buf, len, used);
            break;
        case 10038:
            putInquireUserRequest (d, buf, len, used);
            break;
        case 10039:
            putInquireUserResponse (d, buf, len, used);
            break;
        case 10037:
            putLegalNotificationBroadcast (d, buf, len, used);
            break;
        case 10000:
            putLogonRequest (d, buf, len, used);
            break;
        case 10001:
            putLogonResponse (d, buf, len, used);
            break;
        case 10002:
            putLogoutRequest (d, buf, len, used);
            break;
        case 10003:
            putLogoutResponse (d, buf, len, used);
            break;
        case 10303:
            putMMParameterDefinitionRequest (d, buf, len, used);
            break;
        case 10304:
            putMMParameterDefinitionResponse (d, buf, len, used);
            break;
        case 10405:
            putMassQuoteRequest (d, buf, len, used);
            break;
        case 10406:
            putMassQuoteResponse (d, buf, len, used);
            break;
        case 10621:
            putModifyBasketTradeRequest (d, buf, len, used);
            break;
        case 10114:
            putModifyOrderComplexRequest (d, buf, len, used);
            break;
        case 10130:
            putModifyOrderComplexShortRequest (d, buf, len, used);
            break;
        case 10108:
            putModifyOrderNRResponse (d, buf, len, used);
            break;
        case 10107:
            putModifyOrderResponse (d, buf, len, used);
            break;
        case 10106:
            putModifyOrderSingleRequest (d, buf, len, used);
            break;
        case 10126:
            putModifyOrderSingleShortRequest (d, buf, len, used);
            break;
        case 10601:
            putModifyTESTradeRequest (d, buf, len, used);
            break;
        case 10113:
            putNewOrderComplexRequest (d, buf, len, used);
            break;
        case 10129:
            putNewOrderComplexShortRequest (d, buf, len, used);
            break;
        case 10102:
            putNewOrderNRResponse (d, buf, len, used);
            break;
        case 10101:
            putNewOrderResponse (d, buf, len, used);
            break;
        case 10100:
            putNewOrderSingleRequest (d, buf, len, used);
            break;
        case 10125:
            putNewOrderSingleShortRequest (d, buf, len, used);
            break;
        case 10031:
            putNewsBroadcast (d, buf, len, used);
            break;
        case 10104:
            putOrderExecNotification (d, buf, len, used);
            break;
        case 10117:
            putOrderExecReportBroadcast (d, buf, len, used);
            break;
        case 10103:
            putOrderExecResponse (d, buf, len, used);
            break;
        case 10042:
            putPartyActionReport (d, buf, len, used);
            break;
        case 10034:
            putPartyEntitlementsUpdateReport (d, buf, len, used);
            break;
        case 10313:
            putPreTradeRiskLimitResponse (d, buf, len, used);
            break;
        case 10312:
            putPreTradeRiskLimitsDefinitionRequest (d, buf, len, used);
            break;
        case 10411:
            putQuoteActivationNotification (d, buf, len, used);
            break;
        case 10403:
            putQuoteActivationRequest (d, buf, len, used);
            break;
        case 10404:
            putQuoteActivationResponse (d, buf, len, used);
            break;
        case 10407:
            putQuoteExecutionReport (d, buf, len, used);
            break;
        case 10401:
            putRFQRequest (d, buf, len, used);
            break;
        case 10402:
            putRFQResponse (d, buf, len, used);
            break;
        case 10010:
            putReject (d, buf, len, used);
            break;
        case 10026:
            putRetransmitMEMessageRequest (d, buf, len, used);
            break;
        case 10027:
            putRetransmitMEMessageResponse (d, buf, len, used);
            break;
        case 10008:
            putRetransmitRequest (d, buf, len, used);
            break;
        case 10009:
            putRetransmitResponse (d, buf, len, used);
            break;
        case 10033:
            putRiskNotificationBroadcast (d, buf, len, used);
            break;
        case 10708:
            putSRQSCreateDealNotification (d, buf, len, used);
            break;
        case 10709:
            putSRQSDealNotification (d, buf, len, used);
            break;
        case 10705:
            putSRQSDealResponse (d, buf, len, used);
            break;
        case 10702:
            putSRQSEnterQuoteRequest (d, buf, len, used);
            break;
        case 10704:
            putSRQSHitQuoteRequest (d, buf, len, used);
            break;
        case 10713:
            putSRQSNegotiationNotification (d, buf, len, used);
            break;
        case 10712:
            putSRQSNegotiationRequesterNotification (d, buf, len, used);
            break;
        case 10715:
            putSRQSNegotiationStatusNotification (d, buf, len, used);
            break;
        case 10711:
            putSRQSOpenNegotiationNotification (d, buf, len, used);
            break;
        case 10700:
            putSRQSOpenNegotiationRequest (d, buf, len, used);
            break;
        case 10710:
            putSRQSOpenNegotiationRequesterNotification (d, buf, len, used);
            break;
        case 10707:
            putSRQSQuoteNotification (d, buf, len, used);
            break;
        case 10703:
            putSRQSQuoteResponse (d, buf, len, used);
            break;
        case 10717:
            putSRQSQuotingStatusRequest (d, buf, len, used);
            break;
        case 10714:
            putSRQSStatusBroadcast (d, buf, len, used);
            break;
        case 10706:
            putSRQSUpdateDealStatusRequest (d, buf, len, used);
            break;
        case 10701:
            putSRQSUpdateNegotiationRequest (d, buf, len, used);
            break;
        case 10030:
            putServiceAvailabilityBroadcast (d, buf, len, used);
            break;
        case 10044:
            putServiceAvailabilityMarketBroadcast (d, buf, len, used);
            break;
        case 10025:
            putSubscribeRequest (d, buf, len, used);
            break;
        case 10005:
            putSubscribeResponse (d, buf, len, used);
            break;
        case 10607:
            putTESApproveBroadcast (d, buf, len, used);
            break;
        case 10604:
            putTESBroadcast (d, buf, len, used);
            break;
        case 10606:
            putTESDeleteBroadcast (d, buf, len, used);
            break;
        case 10610:
            putTESExecutionBroadcast (d, buf, len, used);
            break;
        case 10611:
            putTESResponse (d, buf, len, used);
            break;
        case 10614:
            putTESTradeBroadcast (d, buf, len, used);
            break;
        case 10615:
            putTESTradingSessionStatusBroadcast (d, buf, len, used);
            break;
        case 10613:
            putTESUploadBroadcast (d, buf, len, used);
            break;
        case 10501:
            putTMTradingSessionStatusBroadcast (d, buf, len, used);
            break;
        case 10028:
            putThrottleUpdateNotification (d, buf, len, used);
            break;
        case 10500:
            putTradeBroadcast (d, buf, len, used);
            break;
        case 10307:
            putTradingSessionStatusBroadcast (d, buf, len, used);
            break;
        case 10006:
            putUnsubscribeRequest (d, buf, len, used);
            break;
        case 10007:
            putUnsubscribeResponse (d, buf, len, used);
            break;
        case 10612:
            putUploadTESTradeRequest (d, buf, len, used);
            break;
        case 10018:
            putUserLoginRequest (d, buf, len, used);
            break;
        case 10019:
            putUserLoginResponse (d, buf, len, used);
            break;
        case 10029:
            putUserLogoutRequest (d, buf, len, used);
            break;
        case 10024:
            putUserLogoutResponse (d, buf, len, used);
            break;
            default:
                stringstream ss;
                ss << "unknown message type " << templateID;
                throw eti::codecError (GW_CODEC_ERROR, ss.str ());
        }
    }
    catch (eti::codecError &e)
    {
        setLastError (e.mMessage);
        state = e.mState;
    }
    catch (...)
    {
        setLastError ("unknown error while encoding");
        state = GW_CODEC_ERROR;
    }

    return state;
}

} // namespace neueda
